// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: apple/v1/apple.proto

package v1

import (
	context "context"
	v1 "github.com/lulu-ls/st-api/api/order/v1"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Apple_VerifyReceipt_FullMethodName = "/api.apple.v1.Apple/VerifyReceipt"
	Apple_PayNotice_FullMethodName     = "/api.apple.v1.Apple/PayNotice"
	Apple_Pay_FullMethodName           = "/api.apple.v1.Apple/Pay"
)

// AppleClient is the client API for Apple service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AppleClient interface {
	VerifyReceipt(ctx context.Context, in *VerifyReceiptRequest, opts ...grpc.CallOption) (*VerifyReceiptReply, error)
	// 支付通知
	PayNotice(ctx context.Context, in *PayNoticeRequest, opts ...grpc.CallOption) (*PayNoticeReply, error)
	// 支付
	Pay(ctx context.Context, in *ApplePayBuyRequest, opts ...grpc.CallOption) (*v1.ConfirmPayReply, error)
}

type appleClient struct {
	cc grpc.ClientConnInterface
}

func NewAppleClient(cc grpc.ClientConnInterface) AppleClient {
	return &appleClient{cc}
}

func (c *appleClient) VerifyReceipt(ctx context.Context, in *VerifyReceiptRequest, opts ...grpc.CallOption) (*VerifyReceiptReply, error) {
	out := new(VerifyReceiptReply)
	err := c.cc.Invoke(ctx, Apple_VerifyReceipt_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appleClient) PayNotice(ctx context.Context, in *PayNoticeRequest, opts ...grpc.CallOption) (*PayNoticeReply, error) {
	out := new(PayNoticeReply)
	err := c.cc.Invoke(ctx, Apple_PayNotice_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *appleClient) Pay(ctx context.Context, in *ApplePayBuyRequest, opts ...grpc.CallOption) (*v1.ConfirmPayReply, error) {
	out := new(v1.ConfirmPayReply)
	err := c.cc.Invoke(ctx, Apple_Pay_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AppleServer is the server API for Apple service.
// All implementations must embed UnimplementedAppleServer
// for forward compatibility
type AppleServer interface {
	VerifyReceipt(context.Context, *VerifyReceiptRequest) (*VerifyReceiptReply, error)
	// 支付通知
	PayNotice(context.Context, *PayNoticeRequest) (*PayNoticeReply, error)
	// 支付
	Pay(context.Context, *ApplePayBuyRequest) (*v1.ConfirmPayReply, error)
	mustEmbedUnimplementedAppleServer()
}

// UnimplementedAppleServer must be embedded to have forward compatible implementations.
type UnimplementedAppleServer struct {
}

func (UnimplementedAppleServer) VerifyReceipt(context.Context, *VerifyReceiptRequest) (*VerifyReceiptReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyReceipt not implemented")
}
func (UnimplementedAppleServer) PayNotice(context.Context, *PayNoticeRequest) (*PayNoticeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PayNotice not implemented")
}
func (UnimplementedAppleServer) Pay(context.Context, *ApplePayBuyRequest) (*v1.ConfirmPayReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Pay not implemented")
}
func (UnimplementedAppleServer) mustEmbedUnimplementedAppleServer() {}

// UnsafeAppleServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AppleServer will
// result in compilation errors.
type UnsafeAppleServer interface {
	mustEmbedUnimplementedAppleServer()
}

func RegisterAppleServer(s grpc.ServiceRegistrar, srv AppleServer) {
	s.RegisterService(&Apple_ServiceDesc, srv)
}

func _Apple_VerifyReceipt_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyReceiptRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppleServer).VerifyReceipt(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Apple_VerifyReceipt_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppleServer).VerifyReceipt(ctx, req.(*VerifyReceiptRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Apple_PayNotice_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayNoticeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppleServer).PayNotice(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Apple_PayNotice_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppleServer).PayNotice(ctx, req.(*PayNoticeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Apple_Pay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ApplePayBuyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AppleServer).Pay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Apple_Pay_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AppleServer).Pay(ctx, req.(*ApplePayBuyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Apple_ServiceDesc is the grpc.ServiceDesc for Apple service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Apple_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.apple.v1.Apple",
	HandlerType: (*AppleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "VerifyReceipt",
			Handler:    _Apple_VerifyReceipt_Handler,
		},
		{
			MethodName: "PayNotice",
			Handler:    _Apple_PayNotice_Handler,
		},
		{
			MethodName: "Pay",
			Handler:    _Apple_Pay_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "apple/v1/apple.proto",
}
