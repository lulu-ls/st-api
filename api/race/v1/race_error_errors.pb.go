// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package v1

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

// 为某个枚举单独设置错误码
func IsUserNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_USER_NOT_FOUND.String() && e.Code == 404
}

// 为某个枚举单独设置错误码
func ErrorUserNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorReason_USER_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

func IsContentMissing(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_CONTENT_MISSING.String() && e.Code == 400
}

func ErrorContentMissing(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_CONTENT_MISSING.String(), fmt.Sprintf(format, args...))
}

func IsTokenVerify(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_TOKEN_VERIFY.String() && e.Code == 401
}

func ErrorTokenVerify(format string, args ...interface{}) *errors.Error {
	return errors.New(401, ErrorReason_TOKEN_VERIFY.String(), fmt.Sprintf(format, args...))
}

func IsAuthChannelAppidIsRequired(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_AUTH_CHANNEL_APPID_IS_REQUIRED.String() && e.Code == 400
}

func ErrorAuthChannelAppidIsRequired(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_AUTH_CHANNEL_APPID_IS_REQUIRED.String(), fmt.Sprintf(format, args...))
}

func IsRaceSignupTimeLimit(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_RACE_SIGNUP_TIME_LIMIT.String() && e.Code == 410
}

func ErrorRaceSignupTimeLimit(format string, args ...interface{}) *errors.Error {
	return errors.New(410, ErrorReason_RACE_SIGNUP_TIME_LIMIT.String(), fmt.Sprintf(format, args...))
}

// 比赛已开始
func IsRaceIsStart(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_RACE_IS_START.String() && e.Code == 412
}

// 比赛已开始
func ErrorRaceIsStart(format string, args ...interface{}) *errors.Error {
	return errors.New(412, ErrorReason_RACE_IS_START.String(), fmt.Sprintf(format, args...))
}

func IsRaceSignupFailPeople(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_RACE_SIGNUP_FAIL_PEOPLE.String() && e.Code == 413
}

func ErrorRaceSignupFailPeople(format string, args ...interface{}) *errors.Error {
	return errors.New(413, ErrorReason_RACE_SIGNUP_FAIL_PEOPLE.String(), fmt.Sprintf(format, args...))
}

// 已经取消报名
func IsRaceSignupCancel(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_RACE_SIGNUP_CANCEL.String() && e.Code == 414
}

// 已经取消报名
func ErrorRaceSignupCancel(format string, args ...interface{}) *errors.Error {
	return errors.New(414, ErrorReason_RACE_SIGNUP_CANCEL.String(), fmt.Sprintf(format, args...))
}

// 已在比赛中
func IsRaceIsInGame(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_RACE_IS_IN_GAME.String() && e.Code == 498
}

// 已在比赛中
func ErrorRaceIsInGame(format string, args ...interface{}) *errors.Error {
	return errors.New(498, ErrorReason_RACE_IS_IN_GAME.String(), fmt.Sprintf(format, args...))
}

// 已经报名其他比赛
func IsRaceIsSignup(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_RACE_IS_SIGNUP.String() && e.Code == 415
}

// 已经报名其他比赛
func ErrorRaceIsSignup(format string, args ...interface{}) *errors.Error {
	return errors.New(415, ErrorReason_RACE_IS_SIGNUP.String(), fmt.Sprintf(format, args...))
}

// 是否有权限参与比才
func IsRaceAuthSeriesUser(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_RACE_AUTH_SERIES_USER.String() && e.Code == 400
}

// 是否有权限参与比才
func ErrorRaceAuthSeriesUser(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_RACE_AUTH_SERIES_USER.String(), fmt.Sprintf(format, args...))
}
