// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.24.4
// source: race/v1/race.proto

package v1

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 报名状态 0 未报名 1 已报名
type SignupStatus int32

const (
	SignupStatus_NOT     SignupStatus = 0
	SignupStatus_ALREADY SignupStatus = 1
)

// Enum value maps for SignupStatus.
var (
	SignupStatus_name = map[int32]string{
		0: "NOT",
		1: "ALREADY",
	}
	SignupStatus_value = map[string]int32{
		"NOT":     0,
		"ALREADY": 1,
	}
)

func (x SignupStatus) Enum() *SignupStatus {
	p := new(SignupStatus)
	*p = x
	return p
}

func (x SignupStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SignupStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_race_v1_race_proto_enumTypes[0].Descriptor()
}

func (SignupStatus) Type() protoreflect.EnumType {
	return &file_race_v1_race_proto_enumTypes[0]
}

func (x SignupStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SignupStatus.Descriptor instead.
func (SignupStatus) EnumDescriptor() ([]byte, []int) {
	return file_race_v1_race_proto_rawDescGZIP(), []int{0}
}

type GameSeriesBindUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId         int32  `protobuf:"varint,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	UserId        int64  `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	SeriesIdEncry string `protobuf:"bytes,4,opt,name=series_id_encry,json=seriesIdEncry,proto3" json:"series_id_encry,omitempty"`
}

func (x *GameSeriesBindUserRequest) Reset() {
	*x = GameSeriesBindUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_race_v1_race_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameSeriesBindUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameSeriesBindUserRequest) ProtoMessage() {}

func (x *GameSeriesBindUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_race_v1_race_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameSeriesBindUserRequest.ProtoReflect.Descriptor instead.
func (*GameSeriesBindUserRequest) Descriptor() ([]byte, []int) {
	return file_race_v1_race_proto_rawDescGZIP(), []int{0}
}

func (x *GameSeriesBindUserRequest) GetAppId() int32 {
	if x != nil {
		return x.AppId
	}
	return 0
}

func (x *GameSeriesBindUserRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *GameSeriesBindUserRequest) GetSeriesIdEncry() string {
	if x != nil {
		return x.SeriesIdEncry
	}
	return ""
}

// 返回参数
type GameSeriesBindUserReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GameSeriesBindUserReply) Reset() {
	*x = GameSeriesBindUserReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_race_v1_race_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GameSeriesBindUserReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GameSeriesBindUserReply) ProtoMessage() {}

func (x *GameSeriesBindUserReply) ProtoReflect() protoreflect.Message {
	mi := &file_race_v1_race_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GameSeriesBindUserReply.ProtoReflect.Descriptor instead.
func (*GameSeriesBindUserReply) Descriptor() ([]byte, []int) {
	return file_race_v1_race_proto_rawDescGZIP(), []int{1}
}

type RaceTypeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId    int32 `protobuf:"varint,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	HomeShow int32 `protobuf:"varint,4,opt,name=home_show,json=homeShow,proto3" json:"home_show,omitempty"`
}

func (x *RaceTypeRequest) Reset() {
	*x = RaceTypeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_race_v1_race_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RaceTypeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaceTypeRequest) ProtoMessage() {}

func (x *RaceTypeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_race_v1_race_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaceTypeRequest.ProtoReflect.Descriptor instead.
func (*RaceTypeRequest) Descriptor() ([]byte, []int) {
	return file_race_v1_race_proto_rawDescGZIP(), []int{2}
}

func (x *RaceTypeRequest) GetAppId() int32 {
	if x != nil {
		return x.AppId
	}
	return 0
}

func (x *RaceTypeRequest) GetHomeShow() int32 {
	if x != nil {
		return x.HomeShow
	}
	return 0
}

type RaceTypeReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List  []*RaceTypeItem `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	Total int32           `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *RaceTypeReply) Reset() {
	*x = RaceTypeReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_race_v1_race_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RaceTypeReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaceTypeReply) ProtoMessage() {}

func (x *RaceTypeReply) ProtoReflect() protoreflect.Message {
	mi := &file_race_v1_race_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaceTypeReply.ProtoReflect.Descriptor instead.
func (*RaceTypeReply) Descriptor() ([]byte, []int) {
	return file_race_v1_race_proto_rawDescGZIP(), []int{3}
}

func (x *RaceTypeReply) GetList() []*RaceTypeItem {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *RaceTypeReply) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type RaceTypeItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameSeriesId int32  `protobuf:"varint,1,opt,name=game_series_id,json=gameSeriesId,proto3" json:"game_series_id,omitempty"`
	Name         string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	HomeShow     int32  `protobuf:"varint,3,opt,name=home_show,json=homeShow,proto3" json:"home_show,omitempty"`
	Image        string `protobuf:"bytes,4,opt,name=image,proto3" json:"image,omitempty"`
}

func (x *RaceTypeItem) Reset() {
	*x = RaceTypeItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_race_v1_race_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RaceTypeItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaceTypeItem) ProtoMessage() {}

func (x *RaceTypeItem) ProtoReflect() protoreflect.Message {
	mi := &file_race_v1_race_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaceTypeItem.ProtoReflect.Descriptor instead.
func (*RaceTypeItem) Descriptor() ([]byte, []int) {
	return file_race_v1_race_proto_rawDescGZIP(), []int{4}
}

func (x *RaceTypeItem) GetGameSeriesId() int32 {
	if x != nil {
		return x.GameSeriesId
	}
	return 0
}

func (x *RaceTypeItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RaceTypeItem) GetHomeShow() int32 {
	if x != nil {
		return x.HomeShow
	}
	return 0
}

func (x *RaceTypeItem) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

type RaceListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameSeriesId int32 `protobuf:"varint,1,opt,name=game_series_id,json=gameSeriesId,proto3" json:"game_series_id,omitempty"`
	AppId        int32 `protobuf:"varint,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`
	UserId       int64 `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"` // 用户 id
}

func (x *RaceListRequest) Reset() {
	*x = RaceListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_race_v1_race_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RaceListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaceListRequest) ProtoMessage() {}

func (x *RaceListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_race_v1_race_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaceListRequest.ProtoReflect.Descriptor instead.
func (*RaceListRequest) Descriptor() ([]byte, []int) {
	return file_race_v1_race_proto_rawDescGZIP(), []int{5}
}

func (x *RaceListRequest) GetGameSeriesId() int32 {
	if x != nil {
		return x.GameSeriesId
	}
	return 0
}

func (x *RaceListRequest) GetAppId() int32 {
	if x != nil {
		return x.AppId
	}
	return 0
}

func (x *RaceListRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type RaceListReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List  []*ListRaceItem `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	Total int32           `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *RaceListReply) Reset() {
	*x = RaceListReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_race_v1_race_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RaceListReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaceListReply) ProtoMessage() {}

func (x *RaceListReply) ProtoReflect() protoreflect.Message {
	mi := &file_race_v1_race_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaceListReply.ProtoReflect.Descriptor instead.
func (*RaceListReply) Descriptor() ([]byte, []int) {
	return file_race_v1_race_proto_rawDescGZIP(), []int{6}
}

func (x *RaceListReply) GetList() []*ListRaceItem {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *RaceListReply) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type ListRaceItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type         int32  `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"` // 1人满赛 2定时赛
	TypeName     string `protobuf:"bytes,2,opt,name=type_name,json=typeName,proto3" json:"type_name,omitempty"`
	GameTypeId   int32  `protobuf:"varint,3,opt,name=game_type_id,json=gameTypeId,proto3" json:"game_type_id,omitempty"` // 1挖坑 2斗地主
	GameTypeName string `protobuf:"bytes,4,opt,name=game_type_name,json=gameTypeName,proto3" json:"game_type_name,omitempty"`
	Name         string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`                             // sub title
	MaxPeople    int32  `protobuf:"varint,6,opt,name=max_people,json=maxPeople,proto3" json:"max_people,omitempty"` // 最大人数
	PeopleNo     int32  `protobuf:"varint,7,opt,name=people_no,json=peopleNo,proto3" json:"people_no,omitempty"`    // 当前人数
	// string desc = 8; // 赛事简介
	Image              string        `protobuf:"bytes,9,opt,name=image,proto3" json:"image,omitempty"`                                                             // 图片
	Free               int32         `protobuf:"varint,10,opt,name=free,proto3" json:"free,omitempty"`                                                             // 是否免费 1免费
	MaxFreeNo          int32         `protobuf:"varint,11,opt,name=max_free_no,json=maxFreeNo,proto3" json:"max_free_no,omitempty"`                                // 最大免费次数
	FreeNo             int32         `protobuf:"varint,12,opt,name=free_no,json=freeNo,proto3" json:"free_no,omitempty"`                                           // 可用剩余次数
	IsSetSignupEndTime int32         `protobuf:"varint,13,opt,name=is_set_signup_end_time,json=isSetSignupEndTime,proto3" json:"is_set_signup_end_time,omitempty"` // 是否设置报名截至时间 1设置
	SignupEndTime      int64         `protobuf:"varint,14,opt,name=signup_end_time,json=signupEndTime,proto3" json:"signup_end_time,omitempty"`                    // 报名截至时间
	SignupItem         []*SignupItem `protobuf:"bytes,15,rep,name=signup_item,json=signupItem,proto3" json:"signup_item,omitempty"`                                // 报名费
	EarliestTime       int64         `protobuf:"varint,16,opt,name=earliest_time,json=earliestTime,proto3" json:"earliest_time,omitempty"`                         // 最近开赛时间
	GameConfigId       int32         `protobuf:"varint,17,opt,name=game_config_id,json=gameConfigId,proto3" json:"game_config_id,omitempty"`                       // 比赛 id
	SignupStatus       int32         `protobuf:"varint,18,opt,name=signup_status,json=signupStatus,proto3" json:"signup_status,omitempty"`                         // 报名状态 0 未报名 1 已报名
}

func (x *ListRaceItem) Reset() {
	*x = ListRaceItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_race_v1_race_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRaceItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRaceItem) ProtoMessage() {}

func (x *ListRaceItem) ProtoReflect() protoreflect.Message {
	mi := &file_race_v1_race_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRaceItem.ProtoReflect.Descriptor instead.
func (*ListRaceItem) Descriptor() ([]byte, []int) {
	return file_race_v1_race_proto_rawDescGZIP(), []int{7}
}

func (x *ListRaceItem) GetType() int32 {
	if x != nil {
		return x.Type
	}
	return 0
}

func (x *ListRaceItem) GetTypeName() string {
	if x != nil {
		return x.TypeName
	}
	return ""
}

func (x *ListRaceItem) GetGameTypeId() int32 {
	if x != nil {
		return x.GameTypeId
	}
	return 0
}

func (x *ListRaceItem) GetGameTypeName() string {
	if x != nil {
		return x.GameTypeName
	}
	return ""
}

func (x *ListRaceItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListRaceItem) GetMaxPeople() int32 {
	if x != nil {
		return x.MaxPeople
	}
	return 0
}

func (x *ListRaceItem) GetPeopleNo() int32 {
	if x != nil {
		return x.PeopleNo
	}
	return 0
}

func (x *ListRaceItem) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *ListRaceItem) GetFree() int32 {
	if x != nil {
		return x.Free
	}
	return 0
}

func (x *ListRaceItem) GetMaxFreeNo() int32 {
	if x != nil {
		return x.MaxFreeNo
	}
	return 0
}

func (x *ListRaceItem) GetFreeNo() int32 {
	if x != nil {
		return x.FreeNo
	}
	return 0
}

func (x *ListRaceItem) GetIsSetSignupEndTime() int32 {
	if x != nil {
		return x.IsSetSignupEndTime
	}
	return 0
}

func (x *ListRaceItem) GetSignupEndTime() int64 {
	if x != nil {
		return x.SignupEndTime
	}
	return 0
}

func (x *ListRaceItem) GetSignupItem() []*SignupItem {
	if x != nil {
		return x.SignupItem
	}
	return nil
}

func (x *ListRaceItem) GetEarliestTime() int64 {
	if x != nil {
		return x.EarliestTime
	}
	return 0
}

func (x *ListRaceItem) GetGameConfigId() int32 {
	if x != nil {
		return x.GameConfigId
	}
	return 0
}

func (x *ListRaceItem) GetSignupStatus() int32 {
	if x != nil {
		return x.SignupStatus
	}
	return 0
}

type SignupItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId   int32  `protobuf:"varint,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`      // 道具 id
	ItemName string `protobuf:"bytes,2,opt,name=item_name,json=itemName,proto3" json:"item_name,omitempty"` // 道具名称
	Quantity int32  `protobuf:"varint,3,opt,name=quantity,proto3" json:"quantity,omitempty"`                // 数量
}

func (x *SignupItem) Reset() {
	*x = SignupItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_race_v1_race_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignupItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignupItem) ProtoMessage() {}

func (x *SignupItem) ProtoReflect() protoreflect.Message {
	mi := &file_race_v1_race_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignupItem.ProtoReflect.Descriptor instead.
func (*SignupItem) Descriptor() ([]byte, []int) {
	return file_race_v1_race_proto_rawDescGZIP(), []int{8}
}

func (x *SignupItem) GetItemId() int32 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *SignupItem) GetItemName() string {
	if x != nil {
		return x.ItemName
	}
	return ""
}

func (x *SignupItem) GetQuantity() int32 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

type RaceDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameConfigId int32 `protobuf:"varint,1,opt,name=game_config_id,json=gameConfigId,proto3" json:"game_config_id,omitempty"` // 比赛 id
	UserId       int64 `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                     // 用户 id
}

func (x *RaceDetailRequest) Reset() {
	*x = RaceDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_race_v1_race_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RaceDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaceDetailRequest) ProtoMessage() {}

func (x *RaceDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_race_v1_race_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaceDetailRequest.ProtoReflect.Descriptor instead.
func (*RaceDetailRequest) Descriptor() ([]byte, []int) {
	return file_race_v1_race_proto_rawDescGZIP(), []int{9}
}

func (x *RaceDetailRequest) GetGameConfigId() int32 {
	if x != nil {
		return x.GameConfigId
	}
	return 0
}

func (x *RaceDetailRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type RaceRewardRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameConfigId int32 `protobuf:"varint,1,opt,name=game_config_id,json=gameConfigId,proto3" json:"game_config_id,omitempty"` // 比赛 id
}

func (x *RaceRewardRequest) Reset() {
	*x = RaceRewardRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_race_v1_race_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RaceRewardRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaceRewardRequest) ProtoMessage() {}

func (x *RaceRewardRequest) ProtoReflect() protoreflect.Message {
	mi := &file_race_v1_race_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaceRewardRequest.ProtoReflect.Descriptor instead.
func (*RaceRewardRequest) Descriptor() ([]byte, []int) {
	return file_race_v1_race_proto_rawDescGZIP(), []int{10}
}

func (x *RaceRewardRequest) GetGameConfigId() int32 {
	if x != nil {
		return x.GameConfigId
	}
	return 0
}

type RaceRewardReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List        []*RaceRewardRuleItem `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`                                  // 奖励配置列表
	Total       int32                 `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`                               // 数量
	RostrumItem []*RaceRostrumItem    `protobuf:"bytes,3,rep,name=rostrum_item,json=rostrumItem,proto3" json:"rostrum_item,omitempty"` // 领奖台配置
}

func (x *RaceRewardReply) Reset() {
	*x = RaceRewardReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_race_v1_race_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RaceRewardReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaceRewardReply) ProtoMessage() {}

func (x *RaceRewardReply) ProtoReflect() protoreflect.Message {
	mi := &file_race_v1_race_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaceRewardReply.ProtoReflect.Descriptor instead.
func (*RaceRewardReply) Descriptor() ([]byte, []int) {
	return file_race_v1_race_proto_rawDescGZIP(), []int{11}
}

func (x *RaceRewardReply) GetList() []*RaceRewardRuleItem {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *RaceRewardReply) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *RaceRewardReply) GetRostrumItem() []*RaceRostrumItem {
	if x != nil {
		return x.RostrumItem
	}
	return nil
}

type RaceRewardRuleItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameRuleConfigId int32             `protobuf:"varint,1,opt,name=game_rule_config_id,json=gameRuleConfigId,proto3" json:"game_rule_config_id,omitempty"` // 赛事 id
	MaxPeople        int32             `protobuf:"varint,2,opt,name=max_people,json=maxPeople,proto3" json:"max_people,omitempty"`                          // 最大参与人数
	Item             []*RaceRewardItem `protobuf:"bytes,3,rep,name=item,proto3" json:"item,omitempty"`                                                      // 奖励配置详情
}

func (x *RaceRewardRuleItem) Reset() {
	*x = RaceRewardRuleItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_race_v1_race_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RaceRewardRuleItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaceRewardRuleItem) ProtoMessage() {}

func (x *RaceRewardRuleItem) ProtoReflect() protoreflect.Message {
	mi := &file_race_v1_race_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaceRewardRuleItem.ProtoReflect.Descriptor instead.
func (*RaceRewardRuleItem) Descriptor() ([]byte, []int) {
	return file_race_v1_race_proto_rawDescGZIP(), []int{12}
}

func (x *RaceRewardRuleItem) GetGameRuleConfigId() int32 {
	if x != nil {
		return x.GameRuleConfigId
	}
	return 0
}

func (x *RaceRewardRuleItem) GetMaxPeople() int32 {
	if x != nil {
		return x.MaxPeople
	}
	return 0
}

func (x *RaceRewardRuleItem) GetItem() []*RaceRewardItem {
	if x != nil {
		return x.Item
	}
	return nil
}

type RaceRewardItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id        int32                   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`                                // 奖励配置 id
	StartRank int32                   `protobuf:"varint,2,opt,name=start_rank,json=startRank,proto3" json:"start_rank,omitempty"` // 开始排名
	EndRank   int32                   `protobuf:"varint,3,opt,name=end_rank,json=endRank,proto3" json:"end_rank,omitempty"`       // 结束排名
	RankName  string                  `protobuf:"bytes,4,opt,name=rank_name,json=rankName,proto3" json:"rank_name,omitempty"`     // 排名名称
	Detail    []*RaceRewardRuleDetail `protobuf:"bytes,5,rep,name=detail,proto3" json:"detail,omitempty"`
}

func (x *RaceRewardItem) Reset() {
	*x = RaceRewardItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_race_v1_race_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RaceRewardItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaceRewardItem) ProtoMessage() {}

func (x *RaceRewardItem) ProtoReflect() protoreflect.Message {
	mi := &file_race_v1_race_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaceRewardItem.ProtoReflect.Descriptor instead.
func (*RaceRewardItem) Descriptor() ([]byte, []int) {
	return file_race_v1_race_proto_rawDescGZIP(), []int{13}
}

func (x *RaceRewardItem) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RaceRewardItem) GetStartRank() int32 {
	if x != nil {
		return x.StartRank
	}
	return 0
}

func (x *RaceRewardItem) GetEndRank() int32 {
	if x != nil {
		return x.EndRank
	}
	return 0
}

func (x *RaceRewardItem) GetRankName() string {
	if x != nil {
		return x.RankName
	}
	return ""
}

func (x *RaceRewardItem) GetDetail() []*RaceRewardRuleDetail {
	if x != nil {
		return x.Detail
	}
	return nil
}

type RaceRewardRuleDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId   int32  `protobuf:"varint,1,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`       // 道具 id
	ItemName string `protobuf:"bytes,2,opt,name=item_name,json=itemName,proto3" json:"item_name,omitempty"`  // 道具名称
	Quantity int32  `protobuf:"varint,3,opt,name=quantity,proto3" json:"quantity,omitempty"`                 // 道具数量
	SendType int32  `protobuf:"varint,4,opt,name=send_type,json=sendType,proto3" json:"send_type,omitempty"` // 1.发到背包 2.邮件领取
}

func (x *RaceRewardRuleDetail) Reset() {
	*x = RaceRewardRuleDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_race_v1_race_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RaceRewardRuleDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaceRewardRuleDetail) ProtoMessage() {}

func (x *RaceRewardRuleDetail) ProtoReflect() protoreflect.Message {
	mi := &file_race_v1_race_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaceRewardRuleDetail.ProtoReflect.Descriptor instead.
func (*RaceRewardRuleDetail) Descriptor() ([]byte, []int) {
	return file_race_v1_race_proto_rawDescGZIP(), []int{14}
}

func (x *RaceRewardRuleDetail) GetItemId() int32 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *RaceRewardRuleDetail) GetItemName() string {
	if x != nil {
		return x.ItemName
	}
	return ""
}

func (x *RaceRewardRuleDetail) GetQuantity() int32 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *RaceRewardRuleDetail) GetSendType() int32 {
	if x != nil {
		return x.SendType
	}
	return 0
}

type RaceRostrumItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameRostrumConfigId int32  `protobuf:"varint,1,opt,name=game_rostrum_config_id,json=gameRostrumConfigId,proto3" json:"game_rostrum_config_id,omitempty"` // 配置 id
	Ranking             int32  `protobuf:"varint,2,opt,name=ranking,proto3" json:"ranking,omitempty"`                                                        // 名次
	Quantity            int32  `protobuf:"varint,3,opt,name=quantity,proto3" json:"quantity,omitempty"`                                                      // 数量
	Image               string `protobuf:"bytes,4,opt,name=image,proto3" json:"image,omitempty"`                                                             // 图片
	Title               string `protobuf:"bytes,5,opt,name=title,proto3" json:"title,omitempty"`                                                             // 标题
}

func (x *RaceRostrumItem) Reset() {
	*x = RaceRostrumItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_race_v1_race_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RaceRostrumItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaceRostrumItem) ProtoMessage() {}

func (x *RaceRostrumItem) ProtoReflect() protoreflect.Message {
	mi := &file_race_v1_race_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaceRostrumItem.ProtoReflect.Descriptor instead.
func (*RaceRostrumItem) Descriptor() ([]byte, []int) {
	return file_race_v1_race_proto_rawDescGZIP(), []int{15}
}

func (x *RaceRostrumItem) GetGameRostrumConfigId() int32 {
	if x != nil {
		return x.GameRostrumConfigId
	}
	return 0
}

func (x *RaceRostrumItem) GetRanking() int32 {
	if x != nil {
		return x.Ranking
	}
	return 0
}

func (x *RaceRostrumItem) GetQuantity() int32 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *RaceRostrumItem) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *RaceRostrumItem) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

type RaceRuleRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameConfigId int32 `protobuf:"varint,1,opt,name=game_config_id,json=gameConfigId,proto3" json:"game_config_id,omitempty"` // 比赛 id
}

func (x *RaceRuleRequest) Reset() {
	*x = RaceRuleRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_race_v1_race_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RaceRuleRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaceRuleRequest) ProtoMessage() {}

func (x *RaceRuleRequest) ProtoReflect() protoreflect.Message {
	mi := &file_race_v1_race_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaceRuleRequest.ProtoReflect.Descriptor instead.
func (*RaceRuleRequest) Descriptor() ([]byte, []int) {
	return file_race_v1_race_proto_rawDescGZIP(), []int{16}
}

func (x *RaceRuleRequest) GetGameConfigId() int32 {
	if x != nil {
		return x.GameConfigId
	}
	return 0
}

type RaceRuleReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rule string `protobuf:"bytes,1,opt,name=rule,proto3" json:"rule,omitempty"` // 赛制
}

func (x *RaceRuleReply) Reset() {
	*x = RaceRuleReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_race_v1_race_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RaceRuleReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaceRuleReply) ProtoMessage() {}

func (x *RaceRuleReply) ProtoReflect() protoreflect.Message {
	mi := &file_race_v1_race_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaceRuleReply.ProtoReflect.Descriptor instead.
func (*RaceRuleReply) Descriptor() ([]byte, []int) {
	return file_race_v1_race_proto_rawDescGZIP(), []int{17}
}

func (x *RaceRuleReply) GetRule() string {
	if x != nil {
		return x.Rule
	}
	return ""
}

type RaceSignupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                     // 用户 id
	GameConfigId int32 `protobuf:"varint,2,opt,name=game_config_id,json=gameConfigId,proto3" json:"game_config_id,omitempty"` // 赛事配置 id
}

func (x *RaceSignupRequest) Reset() {
	*x = RaceSignupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_race_v1_race_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RaceSignupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaceSignupRequest) ProtoMessage() {}

func (x *RaceSignupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_race_v1_race_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaceSignupRequest.ProtoReflect.Descriptor instead.
func (*RaceSignupRequest) Descriptor() ([]byte, []int) {
	return file_race_v1_race_proto_rawDescGZIP(), []int{18}
}

func (x *RaceSignupRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *RaceSignupRequest) GetGameConfigId() int32 {
	if x != nil {
		return x.GameConfigId
	}
	return 0
}

type RaceSignupReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameConfigId int32 `protobuf:"varint,1,opt,name=game_config_id,json=gameConfigId,proto3" json:"game_config_id,omitempty"` // 赛事配置 id
}

func (x *RaceSignupReply) Reset() {
	*x = RaceSignupReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_race_v1_race_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RaceSignupReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaceSignupReply) ProtoMessage() {}

func (x *RaceSignupReply) ProtoReflect() protoreflect.Message {
	mi := &file_race_v1_race_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaceSignupReply.ProtoReflect.Descriptor instead.
func (*RaceSignupReply) Descriptor() ([]byte, []int) {
	return file_race_v1_race_proto_rawDescGZIP(), []int{19}
}

func (x *RaceSignupReply) GetGameConfigId() int32 {
	if x != nil {
		return x.GameConfigId
	}
	return 0
}

type RaceSignupCancelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                     // 用户 id
	GameConfigId int32 `protobuf:"varint,2,opt,name=game_config_id,json=gameConfigId,proto3" json:"game_config_id,omitempty"` // 赛事配置 id
}

func (x *RaceSignupCancelRequest) Reset() {
	*x = RaceSignupCancelRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_race_v1_race_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RaceSignupCancelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaceSignupCancelRequest) ProtoMessage() {}

func (x *RaceSignupCancelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_race_v1_race_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaceSignupCancelRequest.ProtoReflect.Descriptor instead.
func (*RaceSignupCancelRequest) Descriptor() ([]byte, []int) {
	return file_race_v1_race_proto_rawDescGZIP(), []int{20}
}

func (x *RaceSignupCancelRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *RaceSignupCancelRequest) GetGameConfigId() int32 {
	if x != nil {
		return x.GameConfigId
	}
	return 0
}

type RaceSignupCancelReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameConfigId int32 `protobuf:"varint,1,opt,name=game_config_id,json=gameConfigId,proto3" json:"game_config_id,omitempty"` // 赛事配置 id
}

func (x *RaceSignupCancelReply) Reset() {
	*x = RaceSignupCancelReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_race_v1_race_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RaceSignupCancelReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RaceSignupCancelReply) ProtoMessage() {}

func (x *RaceSignupCancelReply) ProtoReflect() protoreflect.Message {
	mi := &file_race_v1_race_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RaceSignupCancelReply.ProtoReflect.Descriptor instead.
func (*RaceSignupCancelReply) Descriptor() ([]byte, []int) {
	return file_race_v1_race_proto_rawDescGZIP(), []int{21}
}

func (x *RaceSignupCancelReply) GetGameConfigId() int32 {
	if x != nil {
		return x.GameConfigId
	}
	return 0
}

type PodiumRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameConfigId int32 `protobuf:"varint,1,opt,name=game_config_id,json=gameConfigId,proto3" json:"game_config_id,omitempty"` // 赛事配置 id
}

func (x *PodiumRequest) Reset() {
	*x = PodiumRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_race_v1_race_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PodiumRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodiumRequest) ProtoMessage() {}

func (x *PodiumRequest) ProtoReflect() protoreflect.Message {
	mi := &file_race_v1_race_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodiumRequest.ProtoReflect.Descriptor instead.
func (*PodiumRequest) Descriptor() ([]byte, []int) {
	return file_race_v1_race_proto_rawDescGZIP(), []int{22}
}

func (x *PodiumRequest) GetGameConfigId() int32 {
	if x != nil {
		return x.GameConfigId
	}
	return 0
}

type PodiumReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ranking  int32  `protobuf:"varint,1,opt,name=ranking,proto3" json:"ranking,omitempty"`   // 名次
	Image    string `protobuf:"bytes,2,opt,name=image,proto3" json:"image,omitempty"`        // 奖励图片
	Quantity int32  `protobuf:"varint,3,opt,name=quantity,proto3" json:"quantity,omitempty"` // 数量
	Title    string `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`        // 标题
}

func (x *PodiumReply) Reset() {
	*x = PodiumReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_race_v1_race_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PodiumReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PodiumReply) ProtoMessage() {}

func (x *PodiumReply) ProtoReflect() protoreflect.Message {
	mi := &file_race_v1_race_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PodiumReply.ProtoReflect.Descriptor instead.
func (*PodiumReply) Descriptor() ([]byte, []int) {
	return file_race_v1_race_proto_rawDescGZIP(), []int{23}
}

func (x *PodiumReply) GetRanking() int32 {
	if x != nil {
		return x.Ranking
	}
	return 0
}

func (x *PodiumReply) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *PodiumReply) GetQuantity() int32 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *PodiumReply) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

var File_race_v1_race_proto protoreflect.FileDescriptor

var file_race_v1_race_proto_rawDesc = []byte{
	0x0a, 0x12, 0x72, 0x61, 0x63, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x73, 0x0a, 0x19, 0x47, 0x61, 0x6d, 0x65,
	0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x42, 0x69, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75,
	0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x5f,
	0x69, 0x64, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d,
	0x73, 0x65, 0x72, 0x69, 0x65, 0x73, 0x49, 0x64, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x22, 0x19, 0x0a,
	0x17, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x42, 0x69, 0x6e, 0x64, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x45, 0x0a, 0x0f, 0x52, 0x61, 0x63, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x61, 0x70, 0x70,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x68, 0x6f, 0x6d, 0x65, 0x53, 0x68, 0x6f, 0x77, 0x22,
	0x54, 0x0a, 0x0d, 0x52, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x2d, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x63,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0x7b, 0x0a, 0x0c, 0x52, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x24, 0x0a, 0x0e, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x67,
	0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x49, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x68, 0x6f, 0x6d, 0x65, 0x5f, 0x73, 0x68, 0x6f, 0x77, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x08, 0x68, 0x6f, 0x6d, 0x65, 0x53, 0x68, 0x6f, 0x77, 0x12, 0x14, 0x0a, 0x05,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x22, 0x70, 0x0a, 0x0f, 0x52, 0x61, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x0e, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x65,
	0x72, 0x69, 0x65, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xfa,
	0x42, 0x04, 0x1a, 0x02, 0x20, 0x00, 0x52, 0x0c, 0x67, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69,
	0x65, 0x73, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x22, 0x54, 0x0a, 0x0d, 0x52, 0x61, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x2d, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x61, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0xc0, 0x04, 0x0a, 0x0c, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x61, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0c,
	0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0a, 0x67, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x49, 0x64, 0x12, 0x24,
	0x0a, 0x0e, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x67, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f,
	0x70, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x61,
	0x78, 0x50, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x65, 0x6f, 0x70, 0x6c,
	0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x70, 0x65, 0x6f, 0x70,
	0x6c, 0x65, 0x4e, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72,
	0x65, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x66, 0x72, 0x65, 0x65, 0x12, 0x1e,
	0x0a, 0x0b, 0x6d, 0x61, 0x78, 0x5f, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x46, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x12, 0x17,
	0x0a, 0x07, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x6e, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x06, 0x66, 0x72, 0x65, 0x65, 0x4e, 0x6f, 0x12, 0x32, 0x0a, 0x16, 0x69, 0x73, 0x5f, 0x73, 0x65,
	0x74, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x75, 0x70, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x69, 0x73, 0x53, 0x65, 0x74, 0x53, 0x69,
	0x67, 0x6e, 0x75, 0x70, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x73,
	0x69, 0x67, 0x6e, 0x75, 0x70, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x73, 0x69, 0x67, 0x6e, 0x75, 0x70, 0x45, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x73, 0x69, 0x67, 0x6e, 0x75, 0x70, 0x5f, 0x69, 0x74,
	0x65, 0x6d, 0x18, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72,
	0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x75, 0x70, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x75, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x23, 0x0a,
	0x0d, 0x65, 0x61, 0x72, 0x6c, 0x69, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x65, 0x61, 0x72, 0x6c, 0x69, 0x65, 0x73, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x5f, 0x69, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x67, 0x61, 0x6d, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x69, 0x67, 0x6e,
	0x75, 0x70, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x73, 0x69, 0x67, 0x6e, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x5e, 0x0a,
	0x0a, 0x53, 0x69, 0x67, 0x6e, 0x75, 0x70, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x69,
	0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x69, 0x74,
	0x65, 0x6d, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0x5b, 0x0a,
	0x11, 0x52, 0x61, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x2d, 0x0a, 0x0e, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a,
	0x02, 0x20, 0x00, 0x52, 0x0c, 0x67, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x42, 0x0a, 0x11, 0x52, 0x61,
	0x63, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2d, 0x0a, 0x0e, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x20, 0x00,
	0x52, 0x0c, 0x67, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x22, 0x9d,
	0x01, 0x0a, 0x0f, 0x52, 0x61, 0x63, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x33, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x61, 0x63, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x3f, 0x0a,
	0x0c, 0x72, 0x6f, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x61, 0x63, 0x65, 0x52, 0x6f, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x0b, 0x72, 0x6f, 0x73, 0x74, 0x72, 0x75, 0x6d, 0x49, 0x74, 0x65, 0x6d, 0x22, 0x93,
	0x01, 0x0a, 0x12, 0x52, 0x61, 0x63, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x75, 0x6c,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x2d, 0x0a, 0x13, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x72, 0x75,
	0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x10, 0x67, 0x61, 0x6d, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x5f, 0x70, 0x65, 0x6f, 0x70,
	0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x6d, 0x61, 0x78, 0x50, 0x65, 0x6f,
	0x70, 0x6c, 0x65, 0x12, 0x2f, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x61, 0x63, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04,
	0x69, 0x74, 0x65, 0x6d, 0x22, 0xb2, 0x01, 0x0a, 0x0e, 0x52, 0x61, 0x63, 0x65, 0x52, 0x65, 0x77,
	0x61, 0x72, 0x64, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x52, 0x61, 0x6e, 0x6b, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x72, 0x61,
	0x6e, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x52, 0x61, 0x6e,
	0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x61, 0x6e, 0x6b, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x61, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x39,
	0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x63,
	0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x52, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0x85, 0x01, 0x0a, 0x14, 0x52, 0x61,
	0x63, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x75, 0x6c, 0x65, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69,
	0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x69, 0x74, 0x65, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x73, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x65, 0x6e, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x22, 0xa8, 0x01, 0x0a, 0x0f, 0x52, 0x61, 0x63, 0x65, 0x52, 0x6f, 0x73, 0x74, 0x72, 0x75,
	0x6d, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x33, 0x0a, 0x16, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x72, 0x6f,
	0x73, 0x74, 0x72, 0x75, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x67, 0x61, 0x6d, 0x65, 0x52, 0x6f, 0x73, 0x74, 0x72,
	0x75, 0x6d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x61,
	0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x72, 0x61, 0x6e,
	0x6b, 0x69, 0x6e, 0x67, 0x12, 0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x22, 0x40, 0x0a, 0x0f,
	0x52, 0x61, 0x63, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x2d, 0x0a, 0x0e, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x20, 0x00,
	0x52, 0x0c, 0x67, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x22, 0x23,
	0x0a, 0x0d, 0x52, 0x61, 0x63, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x12, 0x0a, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x72,
	0x75, 0x6c, 0x65, 0x22, 0x52, 0x0a, 0x11, 0x52, 0x61, 0x63, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x75,
	0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x64, 0x12, 0x24, 0x0a, 0x0e, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x67, 0x61, 0x6d, 0x65, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x22, 0x37, 0x0a, 0x0f, 0x52, 0x61, 0x63, 0x65, 0x53,
	0x69, 0x67, 0x6e, 0x75, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x24, 0x0a, 0x0e, 0x67, 0x61,
	0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x67, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64,
	0x22, 0x58, 0x0a, 0x17, 0x52, 0x61, 0x63, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x75, 0x70, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75,
	0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x67, 0x61,
	0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x22, 0x3d, 0x0a, 0x15, 0x52, 0x61,
	0x63, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x75, 0x70, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x24, 0x0a, 0x0e, 0x67, 0x61, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x67, 0x61, 0x6d,
	0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x22, 0x35, 0x0a, 0x0d, 0x50, 0x6f, 0x64,
	0x69, 0x75, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x24, 0x0a, 0x0e, 0x67, 0x61,
	0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x67, 0x61, 0x6d, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64,
	0x22, 0x6f, 0x0a, 0x0b, 0x50, 0x6f, 0x64, 0x69, 0x75, 0x6d, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x18, 0x0a, 0x07, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x72, 0x61, 0x6e, 0x6b, 0x69, 0x6e, 0x67, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x2a, 0x24, 0x0a, 0x0c, 0x53, 0x69, 0x67, 0x6e, 0x75, 0x70, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x07, 0x0a, 0x03, 0x4e, 0x4f, 0x54, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x4c,
	0x52, 0x45, 0x41, 0x44, 0x59, 0x10, 0x01, 0x32, 0x92, 0x08, 0x0a, 0x04, 0x52, 0x61, 0x63, 0x65,
	0x12, 0x6b, 0x0a, 0x08, 0x52, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1c, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x63, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x63, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x25, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1f, 0x3a, 0x01,
	0x2a, 0x22, 0x1a, 0x2f, 0x73, 0x74, 0x2d, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f,
	0x72, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x67, 0x0a,
	0x08, 0x52, 0x61, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x72, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x61,
	0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x63, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x3a, 0x01, 0x2a, 0x22, 0x16,
	0x2f, 0x73, 0x74, 0x2d, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x61, 0x63,
	0x65, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x6c, 0x0a, 0x0a, 0x52, 0x61, 0x63, 0x65, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x12, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x61, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x61, 0x63, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x61, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x61, 0x63, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x22,
	0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x3a, 0x01, 0x2a, 0x22, 0x18, 0x2f, 0x73, 0x74, 0x2d,
	0x67, 0x61, 0x6d, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x61, 0x63, 0x65, 0x2f, 0x64, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x12, 0x6f, 0x0a, 0x0a, 0x52, 0x61, 0x63, 0x65, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x12, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x61, 0x63, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x61, 0x63, 0x65, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1d, 0x3a, 0x01, 0x2a, 0x22, 0x18, 0x2f, 0x73, 0x74,
	0x2d, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x61, 0x63, 0x65, 0x2f, 0x72,
	0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x67, 0x0a, 0x08, 0x52, 0x61, 0x63, 0x65, 0x52, 0x75, 0x6c,
	0x65, 0x12, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x61, 0x63, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61,
	0x63, 0x65, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x21, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1b, 0x3a, 0x01, 0x2a, 0x22, 0x16, 0x2f, 0x73, 0x74, 0x2d, 0x67, 0x61, 0x6d, 0x65,
	0x73, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x61, 0x63, 0x65, 0x2f, 0x72, 0x75, 0x6c, 0x65, 0x12, 0x6f,
	0x0a, 0x0a, 0x52, 0x61, 0x63, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x75, 0x70, 0x12, 0x1e, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x63, 0x65, 0x53,
	0x69, 0x67, 0x6e, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x63, 0x65, 0x53,
	0x69, 0x67, 0x6e, 0x75, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1d, 0x3a, 0x01, 0x2a, 0x22, 0x18, 0x2f, 0x73, 0x74, 0x2d, 0x67, 0x61, 0x6d, 0x65, 0x73,
	0x2f, 0x76, 0x31, 0x2f, 0x72, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x69, 0x67, 0x6e, 0x75, 0x70, 0x12,
	0x88, 0x01, 0x0a, 0x10, 0x52, 0x61, 0x63, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x75, 0x70, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x12, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x61, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x61, 0x63, 0x65, 0x53, 0x69, 0x67, 0x6e, 0x75, 0x70, 0x43, 0x61, 0x6e,
	0x63, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x61, 0x63, 0x65, 0x53, 0x69, 0x67,
	0x6e, 0x75, 0x70, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x2a,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x3a, 0x01, 0x2a, 0x22, 0x1f, 0x2f, 0x73, 0x74, 0x2d, 0x67,
	0x61, 0x6d, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x61, 0x63, 0x65, 0x2f, 0x73, 0x69, 0x67,
	0x6e, 0x75, 0x70, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x12, 0x63, 0x0a, 0x06, 0x50, 0x6f,
	0x64, 0x69, 0x75, 0x6d, 0x12, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x61, 0x63, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x50, 0x6f, 0x64, 0x69, 0x75, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x18, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50,
	0x6f, 0x64, 0x69, 0x75, 0x6d, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x23, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x1d, 0x3a, 0x01, 0x2a, 0x22, 0x18, 0x2f, 0x73, 0x74, 0x2d, 0x67, 0x61, 0x6d, 0x65, 0x73,
	0x2f, 0x76, 0x31, 0x2f, 0x72, 0x61, 0x63, 0x65, 0x2f, 0x70, 0x6f, 0x64, 0x69, 0x75, 0x6d, 0x12,
	0x8a, 0x01, 0x0a, 0x12, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x42, 0x69,
	0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x12, 0x26, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x61, 0x63,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x42,
	0x69, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x24,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x61, 0x6d,
	0x65, 0x53, 0x65, 0x72, 0x69, 0x65, 0x73, 0x42, 0x69, 0x6e, 0x64, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x26, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x20, 0x3a, 0x01, 0x2a, 0x22,
	0x1b, 0x2f, 0x73, 0x74, 0x2d, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x72, 0x61,
	0x63, 0x65, 0x2f, 0x62, 0x69, 0x6e, 0x64, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x42, 0x39, 0x0a, 0x0b,
	0x61, 0x70, 0x69, 0x2e, 0x72, 0x61, 0x63, 0x65, 0x2e, 0x76, 0x31, 0x50, 0x01, 0x5a, 0x28, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x75, 0x6c, 0x75, 0x2d, 0x6c,
	0x73, 0x2f, 0x73, 0x74, 0x2d, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x61, 0x63,
	0x65, 0x2f, 0x76, 0x31, 0x3b, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_race_v1_race_proto_rawDescOnce sync.Once
	file_race_v1_race_proto_rawDescData = file_race_v1_race_proto_rawDesc
)

func file_race_v1_race_proto_rawDescGZIP() []byte {
	file_race_v1_race_proto_rawDescOnce.Do(func() {
		file_race_v1_race_proto_rawDescData = protoimpl.X.CompressGZIP(file_race_v1_race_proto_rawDescData)
	})
	return file_race_v1_race_proto_rawDescData
}

var file_race_v1_race_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_race_v1_race_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_race_v1_race_proto_goTypes = []interface{}{
	(SignupStatus)(0),                 // 0: api.race.v1.SignupStatus
	(*GameSeriesBindUserRequest)(nil), // 1: api.race.v1.GameSeriesBindUserRequest
	(*GameSeriesBindUserReply)(nil),   // 2: api.race.v1.GameSeriesBindUserReply
	(*RaceTypeRequest)(nil),           // 3: api.race.v1.RaceTypeRequest
	(*RaceTypeReply)(nil),             // 4: api.race.v1.RaceTypeReply
	(*RaceTypeItem)(nil),              // 5: api.race.v1.RaceTypeItem
	(*RaceListRequest)(nil),           // 6: api.race.v1.RaceListRequest
	(*RaceListReply)(nil),             // 7: api.race.v1.RaceListReply
	(*ListRaceItem)(nil),              // 8: api.race.v1.ListRaceItem
	(*SignupItem)(nil),                // 9: api.race.v1.SignupItem
	(*RaceDetailRequest)(nil),         // 10: api.race.v1.RaceDetailRequest
	(*RaceRewardRequest)(nil),         // 11: api.race.v1.RaceRewardRequest
	(*RaceRewardReply)(nil),           // 12: api.race.v1.RaceRewardReply
	(*RaceRewardRuleItem)(nil),        // 13: api.race.v1.RaceRewardRuleItem
	(*RaceRewardItem)(nil),            // 14: api.race.v1.RaceRewardItem
	(*RaceRewardRuleDetail)(nil),      // 15: api.race.v1.RaceRewardRuleDetail
	(*RaceRostrumItem)(nil),           // 16: api.race.v1.RaceRostrumItem
	(*RaceRuleRequest)(nil),           // 17: api.race.v1.RaceRuleRequest
	(*RaceRuleReply)(nil),             // 18: api.race.v1.RaceRuleReply
	(*RaceSignupRequest)(nil),         // 19: api.race.v1.RaceSignupRequest
	(*RaceSignupReply)(nil),           // 20: api.race.v1.RaceSignupReply
	(*RaceSignupCancelRequest)(nil),   // 21: api.race.v1.RaceSignupCancelRequest
	(*RaceSignupCancelReply)(nil),     // 22: api.race.v1.RaceSignupCancelReply
	(*PodiumRequest)(nil),             // 23: api.race.v1.PodiumRequest
	(*PodiumReply)(nil),               // 24: api.race.v1.PodiumReply
}
var file_race_v1_race_proto_depIdxs = []int32{
	5,  // 0: api.race.v1.RaceTypeReply.list:type_name -> api.race.v1.RaceTypeItem
	8,  // 1: api.race.v1.RaceListReply.list:type_name -> api.race.v1.ListRaceItem
	9,  // 2: api.race.v1.ListRaceItem.signup_item:type_name -> api.race.v1.SignupItem
	13, // 3: api.race.v1.RaceRewardReply.list:type_name -> api.race.v1.RaceRewardRuleItem
	16, // 4: api.race.v1.RaceRewardReply.rostrum_item:type_name -> api.race.v1.RaceRostrumItem
	14, // 5: api.race.v1.RaceRewardRuleItem.item:type_name -> api.race.v1.RaceRewardItem
	15, // 6: api.race.v1.RaceRewardItem.detail:type_name -> api.race.v1.RaceRewardRuleDetail
	3,  // 7: api.race.v1.Race.RaceType:input_type -> api.race.v1.RaceTypeRequest
	6,  // 8: api.race.v1.Race.RaceList:input_type -> api.race.v1.RaceListRequest
	10, // 9: api.race.v1.Race.RaceDetail:input_type -> api.race.v1.RaceDetailRequest
	11, // 10: api.race.v1.Race.RaceReward:input_type -> api.race.v1.RaceRewardRequest
	17, // 11: api.race.v1.Race.RaceRule:input_type -> api.race.v1.RaceRuleRequest
	19, // 12: api.race.v1.Race.RaceSignup:input_type -> api.race.v1.RaceSignupRequest
	21, // 13: api.race.v1.Race.RaceSignupCancel:input_type -> api.race.v1.RaceSignupCancelRequest
	23, // 14: api.race.v1.Race.Podium:input_type -> api.race.v1.PodiumRequest
	1,  // 15: api.race.v1.Race.GameSeriesBindUser:input_type -> api.race.v1.GameSeriesBindUserRequest
	4,  // 16: api.race.v1.Race.RaceType:output_type -> api.race.v1.RaceTypeReply
	7,  // 17: api.race.v1.Race.RaceList:output_type -> api.race.v1.RaceListReply
	8,  // 18: api.race.v1.Race.RaceDetail:output_type -> api.race.v1.ListRaceItem
	12, // 19: api.race.v1.Race.RaceReward:output_type -> api.race.v1.RaceRewardReply
	18, // 20: api.race.v1.Race.RaceRule:output_type -> api.race.v1.RaceRuleReply
	20, // 21: api.race.v1.Race.RaceSignup:output_type -> api.race.v1.RaceSignupReply
	22, // 22: api.race.v1.Race.RaceSignupCancel:output_type -> api.race.v1.RaceSignupCancelReply
	24, // 23: api.race.v1.Race.Podium:output_type -> api.race.v1.PodiumReply
	2,  // 24: api.race.v1.Race.GameSeriesBindUser:output_type -> api.race.v1.GameSeriesBindUserReply
	16, // [16:25] is the sub-list for method output_type
	7,  // [7:16] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_race_v1_race_proto_init() }
func file_race_v1_race_proto_init() {
	if File_race_v1_race_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_race_v1_race_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameSeriesBindUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_race_v1_race_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GameSeriesBindUserReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_race_v1_race_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RaceTypeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_race_v1_race_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RaceTypeReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_race_v1_race_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RaceTypeItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_race_v1_race_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RaceListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_race_v1_race_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RaceListReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_race_v1_race_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRaceItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_race_v1_race_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignupItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_race_v1_race_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RaceDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_race_v1_race_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RaceRewardRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_race_v1_race_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RaceRewardReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_race_v1_race_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RaceRewardRuleItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_race_v1_race_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RaceRewardItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_race_v1_race_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RaceRewardRuleDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_race_v1_race_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RaceRostrumItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_race_v1_race_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RaceRuleRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_race_v1_race_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RaceRuleReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_race_v1_race_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RaceSignupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_race_v1_race_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RaceSignupReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_race_v1_race_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RaceSignupCancelRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_race_v1_race_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RaceSignupCancelReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_race_v1_race_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PodiumRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_race_v1_race_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PodiumReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_race_v1_race_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_race_v1_race_proto_goTypes,
		DependencyIndexes: file_race_v1_race_proto_depIdxs,
		EnumInfos:         file_race_v1_race_proto_enumTypes,
		MessageInfos:      file_race_v1_race_proto_msgTypes,
	}.Build()
	File_race_v1_race_proto = out.File
	file_race_v1_race_proto_rawDesc = nil
	file_race_v1_race_proto_goTypes = nil
	file_race_v1_race_proto_depIdxs = nil
}
