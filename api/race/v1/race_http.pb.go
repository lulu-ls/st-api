// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.1
// - protoc             v4.24.4
// source: race/v1/race.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationRaceGameSeriesBindUser = "/api.race.v1.Race/GameSeriesBindUser"
const OperationRacePodium = "/api.race.v1.Race/Podium"
const OperationRaceRaceDetail = "/api.race.v1.Race/RaceDetail"
const OperationRaceRaceList = "/api.race.v1.Race/RaceList"
const OperationRaceRaceReward = "/api.race.v1.Race/RaceReward"
const OperationRaceRaceRule = "/api.race.v1.Race/RaceRule"
const OperationRaceRaceSignup = "/api.race.v1.Race/RaceSignup"
const OperationRaceRaceSignupCancel = "/api.race.v1.Race/RaceSignupCancel"
const OperationRaceRaceType = "/api.race.v1.Race/RaceType"

type RaceHTTPServer interface {
	// GameSeriesBindUser 用户绑定赛事系列
	GameSeriesBindUser(context.Context, *GameSeriesBindUserRequest) (*GameSeriesBindUserReply, error)
	// Podium 领奖台
	Podium(context.Context, *PodiumRequest) (*PodiumReply, error)
	// RaceDetail 比赛详情
	RaceDetail(context.Context, *RaceDetailRequest) (*ListRaceItem, error)
	// RaceList 比赛列表
	RaceList(context.Context, *RaceListRequest) (*RaceListReply, error)
	// RaceReward 比赛奖励
	RaceReward(context.Context, *RaceRewardRequest) (*RaceRewardReply, error)
	// RaceRule 赛制
	RaceRule(context.Context, *RaceRuleRequest) (*RaceRuleReply, error)
	// RaceSignup 报名
	RaceSignup(context.Context, *RaceSignupRequest) (*RaceSignupReply, error)
	// RaceSignupCancel 取消报名
	RaceSignupCancel(context.Context, *RaceSignupCancelRequest) (*RaceSignupCancelReply, error)
	// RaceType 比赛侧边栏分类
	RaceType(context.Context, *RaceTypeRequest) (*RaceTypeReply, error)
}

func RegisterRaceHTTPServer(s *http.Server, srv RaceHTTPServer) {
	r := s.Route("/")
	r.POST("/st-games/v1/race/sub_type", _Race_RaceType0_HTTP_Handler(srv))
	r.POST("/st-games/v1/race/list", _Race_RaceList0_HTTP_Handler(srv))
	r.POST("/st-games/v1/race/detail", _Race_RaceDetail0_HTTP_Handler(srv))
	r.POST("/st-games/v1/race/reward", _Race_RaceReward0_HTTP_Handler(srv))
	r.POST("/st-games/v1/race/rule", _Race_RaceRule0_HTTP_Handler(srv))
	r.POST("/st-games/v1/race/signup", _Race_RaceSignup0_HTTP_Handler(srv))
	r.POST("/st-games/v1/race/signup_cancel", _Race_RaceSignupCancel0_HTTP_Handler(srv))
	r.POST("/st-games/v1/race/podium", _Race_Podium0_HTTP_Handler(srv))
	r.POST("/st-games/v1/race/bind_user", _Race_GameSeriesBindUser0_HTTP_Handler(srv))
}

func _Race_RaceType0_HTTP_Handler(srv RaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RaceTypeRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRaceRaceType)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RaceType(ctx, req.(*RaceTypeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RaceTypeReply)
		return ctx.Result(200, reply)
	}
}

func _Race_RaceList0_HTTP_Handler(srv RaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RaceListRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRaceRaceList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RaceList(ctx, req.(*RaceListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RaceListReply)
		return ctx.Result(200, reply)
	}
}

func _Race_RaceDetail0_HTTP_Handler(srv RaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RaceDetailRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRaceRaceDetail)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RaceDetail(ctx, req.(*RaceDetailRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListRaceItem)
		return ctx.Result(200, reply)
	}
}

func _Race_RaceReward0_HTTP_Handler(srv RaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RaceRewardRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRaceRaceReward)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RaceReward(ctx, req.(*RaceRewardRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RaceRewardReply)
		return ctx.Result(200, reply)
	}
}

func _Race_RaceRule0_HTTP_Handler(srv RaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RaceRuleRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRaceRaceRule)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RaceRule(ctx, req.(*RaceRuleRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RaceRuleReply)
		return ctx.Result(200, reply)
	}
}

func _Race_RaceSignup0_HTTP_Handler(srv RaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RaceSignupRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRaceRaceSignup)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RaceSignup(ctx, req.(*RaceSignupRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RaceSignupReply)
		return ctx.Result(200, reply)
	}
}

func _Race_RaceSignupCancel0_HTTP_Handler(srv RaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RaceSignupCancelRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRaceRaceSignupCancel)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RaceSignupCancel(ctx, req.(*RaceSignupCancelRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RaceSignupCancelReply)
		return ctx.Result(200, reply)
	}
}

func _Race_Podium0_HTTP_Handler(srv RaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PodiumRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRacePodium)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Podium(ctx, req.(*PodiumRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PodiumReply)
		return ctx.Result(200, reply)
	}
}

func _Race_GameSeriesBindUser0_HTTP_Handler(srv RaceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GameSeriesBindUserRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRaceGameSeriesBindUser)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GameSeriesBindUser(ctx, req.(*GameSeriesBindUserRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GameSeriesBindUserReply)
		return ctx.Result(200, reply)
	}
}

type RaceHTTPClient interface {
	GameSeriesBindUser(ctx context.Context, req *GameSeriesBindUserRequest, opts ...http.CallOption) (rsp *GameSeriesBindUserReply, err error)
	Podium(ctx context.Context, req *PodiumRequest, opts ...http.CallOption) (rsp *PodiumReply, err error)
	RaceDetail(ctx context.Context, req *RaceDetailRequest, opts ...http.CallOption) (rsp *ListRaceItem, err error)
	RaceList(ctx context.Context, req *RaceListRequest, opts ...http.CallOption) (rsp *RaceListReply, err error)
	RaceReward(ctx context.Context, req *RaceRewardRequest, opts ...http.CallOption) (rsp *RaceRewardReply, err error)
	RaceRule(ctx context.Context, req *RaceRuleRequest, opts ...http.CallOption) (rsp *RaceRuleReply, err error)
	RaceSignup(ctx context.Context, req *RaceSignupRequest, opts ...http.CallOption) (rsp *RaceSignupReply, err error)
	RaceSignupCancel(ctx context.Context, req *RaceSignupCancelRequest, opts ...http.CallOption) (rsp *RaceSignupCancelReply, err error)
	RaceType(ctx context.Context, req *RaceTypeRequest, opts ...http.CallOption) (rsp *RaceTypeReply, err error)
}

type RaceHTTPClientImpl struct {
	cc *http.Client
}

func NewRaceHTTPClient(client *http.Client) RaceHTTPClient {
	return &RaceHTTPClientImpl{client}
}

func (c *RaceHTTPClientImpl) GameSeriesBindUser(ctx context.Context, in *GameSeriesBindUserRequest, opts ...http.CallOption) (*GameSeriesBindUserReply, error) {
	var out GameSeriesBindUserReply
	pattern := "/st-games/v1/race/bind_user"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRaceGameSeriesBindUser))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *RaceHTTPClientImpl) Podium(ctx context.Context, in *PodiumRequest, opts ...http.CallOption) (*PodiumReply, error) {
	var out PodiumReply
	pattern := "/st-games/v1/race/podium"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRacePodium))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *RaceHTTPClientImpl) RaceDetail(ctx context.Context, in *RaceDetailRequest, opts ...http.CallOption) (*ListRaceItem, error) {
	var out ListRaceItem
	pattern := "/st-games/v1/race/detail"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRaceRaceDetail))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *RaceHTTPClientImpl) RaceList(ctx context.Context, in *RaceListRequest, opts ...http.CallOption) (*RaceListReply, error) {
	var out RaceListReply
	pattern := "/st-games/v1/race/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRaceRaceList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *RaceHTTPClientImpl) RaceReward(ctx context.Context, in *RaceRewardRequest, opts ...http.CallOption) (*RaceRewardReply, error) {
	var out RaceRewardReply
	pattern := "/st-games/v1/race/reward"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRaceRaceReward))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *RaceHTTPClientImpl) RaceRule(ctx context.Context, in *RaceRuleRequest, opts ...http.CallOption) (*RaceRuleReply, error) {
	var out RaceRuleReply
	pattern := "/st-games/v1/race/rule"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRaceRaceRule))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *RaceHTTPClientImpl) RaceSignup(ctx context.Context, in *RaceSignupRequest, opts ...http.CallOption) (*RaceSignupReply, error) {
	var out RaceSignupReply
	pattern := "/st-games/v1/race/signup"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRaceRaceSignup))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *RaceHTTPClientImpl) RaceSignupCancel(ctx context.Context, in *RaceSignupCancelRequest, opts ...http.CallOption) (*RaceSignupCancelReply, error) {
	var out RaceSignupCancelReply
	pattern := "/st-games/v1/race/signup_cancel"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRaceRaceSignupCancel))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *RaceHTTPClientImpl) RaceType(ctx context.Context, in *RaceTypeRequest, opts ...http.CallOption) (*RaceTypeReply, error) {
	var out RaceTypeReply
	pattern := "/st-games/v1/race/sub_type"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRaceRaceType))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
