// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.0
// source: mall/v1/mall.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Mall_GetBalance_FullMethodName      = "/api.mall.v1.Mall/GetBalance"
	Mall_RechargeGeneral_FullMethodName = "/api.mall.v1.Mall/RechargeGeneral"
	Mall_GetRecharge_FullMethodName     = "/api.mall.v1.Mall/GetRecharge"
	Mall_RechargeNotify_FullMethodName  = "/api.mall.v1.Mall/RechargeNotify"
)

// MallClient is the client API for Mall service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MallClient interface {
	// 获取余额
	GetBalance(ctx context.Context, in *GetBalanceRequest, opts ...grpc.CallOption) (*GetBalanceReply, error)
	// 通用充值 话费/会员卡
	RechargeGeneral(ctx context.Context, in *RechargeGeneralRequest, opts ...grpc.CallOption) (*RechargeGeneralReply, error)
	// 订单查询
	GetRecharge(ctx context.Context, in *GetRechargeRequest, opts ...grpc.CallOption) (*GetRechargeReply, error)
	// 订单通知
	RechargeNotify(ctx context.Context, in *RechargeNotifyRequest, opts ...grpc.CallOption) (*RechargeNotifyReply, error)
}

type mallClient struct {
	cc grpc.ClientConnInterface
}

func NewMallClient(cc grpc.ClientConnInterface) MallClient {
	return &mallClient{cc}
}

func (c *mallClient) GetBalance(ctx context.Context, in *GetBalanceRequest, opts ...grpc.CallOption) (*GetBalanceReply, error) {
	out := new(GetBalanceReply)
	err := c.cc.Invoke(ctx, Mall_GetBalance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mallClient) RechargeGeneral(ctx context.Context, in *RechargeGeneralRequest, opts ...grpc.CallOption) (*RechargeGeneralReply, error) {
	out := new(RechargeGeneralReply)
	err := c.cc.Invoke(ctx, Mall_RechargeGeneral_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mallClient) GetRecharge(ctx context.Context, in *GetRechargeRequest, opts ...grpc.CallOption) (*GetRechargeReply, error) {
	out := new(GetRechargeReply)
	err := c.cc.Invoke(ctx, Mall_GetRecharge_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mallClient) RechargeNotify(ctx context.Context, in *RechargeNotifyRequest, opts ...grpc.CallOption) (*RechargeNotifyReply, error) {
	out := new(RechargeNotifyReply)
	err := c.cc.Invoke(ctx, Mall_RechargeNotify_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MallServer is the server API for Mall service.
// All implementations must embed UnimplementedMallServer
// for forward compatibility
type MallServer interface {
	// 获取余额
	GetBalance(context.Context, *GetBalanceRequest) (*GetBalanceReply, error)
	// 通用充值 话费/会员卡
	RechargeGeneral(context.Context, *RechargeGeneralRequest) (*RechargeGeneralReply, error)
	// 订单查询
	GetRecharge(context.Context, *GetRechargeRequest) (*GetRechargeReply, error)
	// 订单通知
	RechargeNotify(context.Context, *RechargeNotifyRequest) (*RechargeNotifyReply, error)
	mustEmbedUnimplementedMallServer()
}

// UnimplementedMallServer must be embedded to have forward compatible implementations.
type UnimplementedMallServer struct {
}

func (UnimplementedMallServer) GetBalance(context.Context, *GetBalanceRequest) (*GetBalanceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBalance not implemented")
}
func (UnimplementedMallServer) RechargeGeneral(context.Context, *RechargeGeneralRequest) (*RechargeGeneralReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RechargeGeneral not implemented")
}
func (UnimplementedMallServer) GetRecharge(context.Context, *GetRechargeRequest) (*GetRechargeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecharge not implemented")
}
func (UnimplementedMallServer) RechargeNotify(context.Context, *RechargeNotifyRequest) (*RechargeNotifyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RechargeNotify not implemented")
}
func (UnimplementedMallServer) mustEmbedUnimplementedMallServer() {}

// UnsafeMallServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MallServer will
// result in compilation errors.
type UnsafeMallServer interface {
	mustEmbedUnimplementedMallServer()
}

func RegisterMallServer(s grpc.ServiceRegistrar, srv MallServer) {
	s.RegisterService(&Mall_ServiceDesc, srv)
}

func _Mall_GetBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MallServer).GetBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mall_GetBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MallServer).GetBalance(ctx, req.(*GetBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mall_RechargeGeneral_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RechargeGeneralRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MallServer).RechargeGeneral(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mall_RechargeGeneral_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MallServer).RechargeGeneral(ctx, req.(*RechargeGeneralRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mall_GetRecharge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRechargeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MallServer).GetRecharge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mall_GetRecharge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MallServer).GetRecharge(ctx, req.(*GetRechargeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Mall_RechargeNotify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RechargeNotifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MallServer).RechargeNotify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Mall_RechargeNotify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MallServer).RechargeNotify(ctx, req.(*RechargeNotifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Mall_ServiceDesc is the grpc.ServiceDesc for Mall service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Mall_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.mall.v1.Mall",
	HandlerType: (*MallServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBalance",
			Handler:    _Mall_GetBalance_Handler,
		},
		{
			MethodName: "RechargeGeneral",
			Handler:    _Mall_RechargeGeneral_Handler,
		},
		{
			MethodName: "GetRecharge",
			Handler:    _Mall_GetRecharge_Handler,
		},
		{
			MethodName: "RechargeNotify",
			Handler:    _Mall_RechargeNotify_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mall/v1/mall.proto",
}
