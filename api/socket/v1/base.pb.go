// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.24.4
// source: base.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 游戏类型
type GameType int32

const (
	GameType_GameTypeUnspecified GameType = 0
	GameType_GameTypeDigHole     GameType = 1 //挖坑
	GameType_GameTypeLandlord    GameType = 2 //斗地主
	GameType_GameTypeMahjong     GameType = 3 //麻将
)

// Enum value maps for GameType.
var (
	GameType_name = map[int32]string{
		0: "GameTypeUnspecified",
		1: "GameTypeDigHole",
		2: "GameTypeLandlord",
		3: "GameTypeMahjong",
	}
	GameType_value = map[string]int32{
		"GameTypeUnspecified": 0,
		"GameTypeDigHole":     1,
		"GameTypeLandlord":    2,
		"GameTypeMahjong":     3,
	}
)

func (x GameType) Enum() *GameType {
	p := new(GameType)
	*p = x
	return p
}

func (x GameType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GameType) Descriptor() protoreflect.EnumDescriptor {
	return file_base_proto_enumTypes[0].Descriptor()
}

func (GameType) Type() protoreflect.EnumType {
	return &file_base_proto_enumTypes[0]
}

func (x GameType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GameType.Descriptor instead.
func (GameType) EnumDescriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{0}
}

// 游戏类别
type GameCategory int32

const (
	GameCategory_GameCategoryUnspecified GameCategory = 0
	GameCategory_GameCategoryGold        GameCategory = 1 //金币场（自由场）
	GameCategory_GameCategoryCompetition GameCategory = 2 //竞技场
	GameCategory_GameCategoryPrivate     GameCategory = 3 //好友房
)

// Enum value maps for GameCategory.
var (
	GameCategory_name = map[int32]string{
		0: "GameCategoryUnspecified",
		1: "GameCategoryGold",
		2: "GameCategoryCompetition",
		3: "GameCategoryPrivate",
	}
	GameCategory_value = map[string]int32{
		"GameCategoryUnspecified": 0,
		"GameCategoryGold":        1,
		"GameCategoryCompetition": 2,
		"GameCategoryPrivate":     3,
	}
)

func (x GameCategory) Enum() *GameCategory {
	p := new(GameCategory)
	*p = x
	return p
}

func (x GameCategory) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GameCategory) Descriptor() protoreflect.EnumDescriptor {
	return file_base_proto_enumTypes[1].Descriptor()
}

func (GameCategory) Type() protoreflect.EnumType {
	return &file_base_proto_enumTypes[1]
}

func (x GameCategory) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GameCategory.Descriptor instead.
func (GameCategory) EnumDescriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{1}
}

// 牌桌状态
type TableStatus int32

const (
	TableStatus_TableStatusUnspecified TableStatus = 0
	TableStatus_TableStatusMatching    TableStatus = 1 //匹配中
	TableStatus_TableStatusStarted     TableStatus = 2 //已开局
	TableStatus_TableStatusCallRate    TableStatus = 3 //叫分中
	TableStatus_TableStatusCallDouble  TableStatus = 4 //叫加倍中
	TableStatus_TableStatusPlaying     TableStatus = 5 //出牌中
	TableStatus_TableStatusDeckEnd     TableStatus = 6 //本副牌结算中
	TableStatus_TableStatusEnd         TableStatus = 7 //已结束
)

// Enum value maps for TableStatus.
var (
	TableStatus_name = map[int32]string{
		0: "TableStatusUnspecified",
		1: "TableStatusMatching",
		2: "TableStatusStarted",
		3: "TableStatusCallRate",
		4: "TableStatusCallDouble",
		5: "TableStatusPlaying",
		6: "TableStatusDeckEnd",
		7: "TableStatusEnd",
	}
	TableStatus_value = map[string]int32{
		"TableStatusUnspecified": 0,
		"TableStatusMatching":    1,
		"TableStatusStarted":     2,
		"TableStatusCallRate":    3,
		"TableStatusCallDouble":  4,
		"TableStatusPlaying":     5,
		"TableStatusDeckEnd":     6,
		"TableStatusEnd":         7,
	}
)

func (x TableStatus) Enum() *TableStatus {
	p := new(TableStatus)
	*p = x
	return p
}

func (x TableStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TableStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_base_proto_enumTypes[2].Descriptor()
}

func (TableStatus) Type() protoreflect.EnumType {
	return &file_base_proto_enumTypes[2]
}

func (x TableStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TableStatus.Descriptor instead.
func (TableStatus) EnumDescriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{2}
}

type Action int32

const (
	Action_ActionUnspecified Action = 0
	Action_ActionCallRate    Action = 1 //叫分
	Action_ActionCallDouble  Action = 2 //加倍
	Action_ActionPlay        Action = 3 //出牌
	Action_ActionFollow      Action = 4 //跟牌
	Action_ActionCantFollow  Action = 5 //要不起
)

// Enum value maps for Action.
var (
	Action_name = map[int32]string{
		0: "ActionUnspecified",
		1: "ActionCallRate",
		2: "ActionCallDouble",
		3: "ActionPlay",
		4: "ActionFollow",
		5: "ActionCantFollow",
	}
	Action_value = map[string]int32{
		"ActionUnspecified": 0,
		"ActionCallRate":    1,
		"ActionCallDouble":  2,
		"ActionPlay":        3,
		"ActionFollow":      4,
		"ActionCantFollow":  5,
	}
)

func (x Action) Enum() *Action {
	p := new(Action)
	*p = x
	return p
}

func (x Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Action) Descriptor() protoreflect.EnumDescriptor {
	return file_base_proto_enumTypes[3].Descriptor()
}

func (Action) Type() protoreflect.EnumType {
	return &file_base_proto_enumTypes[3]
}

func (x Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Action.Descriptor instead.
func (Action) EnumDescriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{3}
}

type EndTag int32

const (
	EndTag_EndTagUnspecified EndTag = 0
	EndTag_EndTagReachMax    EndTag = 1 //封顶
	EndTag_EndTagGoBroke     EndTag = 2 //破产
)

// Enum value maps for EndTag.
var (
	EndTag_name = map[int32]string{
		0: "EndTagUnspecified",
		1: "EndTagReachMax",
		2: "EndTagGoBroke",
	}
	EndTag_value = map[string]int32{
		"EndTagUnspecified": 0,
		"EndTagReachMax":    1,
		"EndTagGoBroke":     2,
	}
)

func (x EndTag) Enum() *EndTag {
	p := new(EndTag)
	*p = x
	return p
}

func (x EndTag) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EndTag) Descriptor() protoreflect.EnumDescriptor {
	return file_base_proto_enumTypes[4].Descriptor()
}

func (EndTag) Type() protoreflect.EnumType {
	return &file_base_proto_enumTypes[4]
}

func (x EndTag) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EndTag.Descriptor instead.
func (EndTag) EnumDescriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{4}
}

type ChatType int32

const (
	ChatType_ChatTypeUnspecified ChatType = 0
	ChatType_ChatTypeText        ChatType = 1 //文字
	ChatType_ChatTypeEmo         ChatType = 2 //表情
	ChatType_ChatTypeProp        ChatType = 3 //道具
)

// Enum value maps for ChatType.
var (
	ChatType_name = map[int32]string{
		0: "ChatTypeUnspecified",
		1: "ChatTypeText",
		2: "ChatTypeEmo",
		3: "ChatTypeProp",
	}
	ChatType_value = map[string]int32{
		"ChatTypeUnspecified": 0,
		"ChatTypeText":        1,
		"ChatTypeEmo":         2,
		"ChatTypeProp":        3,
	}
)

func (x ChatType) Enum() *ChatType {
	p := new(ChatType)
	*p = x
	return p
}

func (x ChatType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChatType) Descriptor() protoreflect.EnumDescriptor {
	return file_base_proto_enumTypes[5].Descriptor()
}

func (ChatType) Type() protoreflect.EnumType {
	return &file_base_proto_enumTypes[5]
}

func (x ChatType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChatType.Descriptor instead.
func (ChatType) EnumDescriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{5}
}

type VoteState int32

const (
	VoteState_VoteStateUnspecified VoteState = 0
	VoteState_VoteStateAwaiting    VoteState = 1
	VoteState_VoteStateAccept      VoteState = 2
	VoteState_VoteStateReject      VoteState = 3
)

// Enum value maps for VoteState.
var (
	VoteState_name = map[int32]string{
		0: "VoteStateUnspecified",
		1: "VoteStateAwaiting",
		2: "VoteStateAccept",
		3: "VoteStateReject",
	}
	VoteState_value = map[string]int32{
		"VoteStateUnspecified": 0,
		"VoteStateAwaiting":    1,
		"VoteStateAccept":      2,
		"VoteStateReject":      3,
	}
)

func (x VoteState) Enum() *VoteState {
	p := new(VoteState)
	*p = x
	return p
}

func (x VoteState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VoteState) Descriptor() protoreflect.EnumDescriptor {
	return file_base_proto_enumTypes[6].Descriptor()
}

func (VoteState) Type() protoreflect.EnumType {
	return &file_base_proto_enumTypes[6]
}

func (x VoteState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VoteState.Descriptor instead.
func (VoteState) EnumDescriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{6}
}

type UserCards struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Seat  uint32 `protobuf:"varint,1,opt,name=Seat,proto3" json:"Seat,omitempty"`
	Cards []byte `protobuf:"bytes,2,opt,name=Cards,proto3" json:"Cards,omitempty"`
}

func (x *UserCards) Reset() {
	*x = UserCards{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserCards) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserCards) ProtoMessage() {}

func (x *UserCards) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserCards.ProtoReflect.Descriptor instead.
func (*UserCards) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{0}
}

func (x *UserCards) GetSeat() uint32 {
	if x != nil {
		return x.Seat
	}
	return 0
}

func (x *UserCards) GetCards() []byte {
	if x != nil {
		return x.Cards
	}
	return nil
}

type UserDeckEnd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Seat      uint32 `protobuf:"varint,1,opt,name=Seat,proto3" json:"Seat,omitempty"`
	DeckScore int32  `protobuf:"varint,2,opt,name=DeckScore,proto3" json:"DeckScore,omitempty"` // 本副牌分数
	Cards     []byte `protobuf:"bytes,3,opt,name=Cards,proto3,oneof" json:"Cards,omitempty"`    //剩余手牌
}

func (x *UserDeckEnd) Reset() {
	*x = UserDeckEnd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserDeckEnd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserDeckEnd) ProtoMessage() {}

func (x *UserDeckEnd) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserDeckEnd.ProtoReflect.Descriptor instead.
func (*UserDeckEnd) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{1}
}

func (x *UserDeckEnd) GetSeat() uint32 {
	if x != nil {
		return x.Seat
	}
	return 0
}

func (x *UserDeckEnd) GetDeckScore() int32 {
	if x != nil {
		return x.DeckScore
	}
	return 0
}

func (x *UserDeckEnd) GetCards() []byte {
	if x != nil {
		return x.Cards
	}
	return nil
}

type UserVote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Seat      uint32    `protobuf:"varint,1,opt,name=Seat,proto3" json:"Seat,omitempty"`
	VoteState VoteState `protobuf:"varint,2,opt,name=VoteState,proto3,enum=VoteState" json:"VoteState,omitempty"`
}

func (x *UserVote) Reset() {
	*x = UserVote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserVote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserVote) ProtoMessage() {}

func (x *UserVote) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserVote.ProtoReflect.Descriptor instead.
func (*UserVote) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{2}
}

func (x *UserVote) GetSeat() uint32 {
	if x != nil {
		return x.Seat
	}
	return 0
}

func (x *UserVote) GetVoteState() VoteState {
	if x != nil {
		return x.VoteState
	}
	return VoteState_VoteStateUnspecified
}

type Deck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeckNo uint32         `protobuf:"varint,1,opt,name=DeckNo,proto3" json:"DeckNo,omitempty"` //序号
	Users  []*UserDeckEnd `protobuf:"bytes,2,rep,name=Users,proto3" json:"Users,omitempty"`    //用户结算数据
}

func (x *Deck) Reset() {
	*x = Deck{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Deck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Deck) ProtoMessage() {}

func (x *Deck) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Deck.ProtoReflect.Descriptor instead.
func (*Deck) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{3}
}

func (x *Deck) GetDeckNo() uint32 {
	if x != nil {
		return x.DeckNo
	}
	return 0
}

func (x *Deck) GetUsers() []*UserDeckEnd {
	if x != nil {
		return x.Users
	}
	return nil
}

type UserTableEnd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Seat      uint32 `protobuf:"varint,1,opt,name=Seat,proto3" json:"Seat,omitempty"`
	Nickname  string `protobuf:"bytes,2,opt,name=Nickname,proto3" json:"Nickname,omitempty"`     //昵称
	Avatar    string `protobuf:"bytes,3,opt,name=Avatar,proto3" json:"Avatar,omitempty"`         //头像
	Rate      uint32 `protobuf:"varint,4,opt,name=Rate,proto3" json:"Rate,omitempty"`            //加倍数
	BaseScore uint32 `protobuf:"varint,5,opt,name=BaseScore,proto3" json:"BaseScore,omitempty"`  //牌桌底分
	Score     int32  `protobuf:"varint,6,opt,name=Score,proto3" json:"Score,omitempty"`          //当前分数
	Landlord  bool   `protobuf:"varint,7,opt,name=Landlord,proto3" json:"Landlord,omitempty"`    //坑主
	Winner    bool   `protobuf:"varint,8,opt,name=Winner,proto3" json:"Winner,omitempty"`        //是否获胜
	Owner     bool   `protobuf:"varint,9,opt,name=Owner,proto3" json:"Owner,omitempty"`          //房主
	Tag       EndTag `protobuf:"varint,10,opt,name=Tag,proto3,enum=EndTag" json:"Tag,omitempty"` //封顶
	Cards     []byte `protobuf:"bytes,11,opt,name=Cards,proto3" json:"Cards,omitempty"`          //剩余手牌
}

func (x *UserTableEnd) Reset() {
	*x = UserTableEnd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserTableEnd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserTableEnd) ProtoMessage() {}

func (x *UserTableEnd) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserTableEnd.ProtoReflect.Descriptor instead.
func (*UserTableEnd) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{4}
}

func (x *UserTableEnd) GetSeat() uint32 {
	if x != nil {
		return x.Seat
	}
	return 0
}

func (x *UserTableEnd) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *UserTableEnd) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *UserTableEnd) GetRate() uint32 {
	if x != nil {
		return x.Rate
	}
	return 0
}

func (x *UserTableEnd) GetBaseScore() uint32 {
	if x != nil {
		return x.BaseScore
	}
	return 0
}

func (x *UserTableEnd) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *UserTableEnd) GetLandlord() bool {
	if x != nil {
		return x.Landlord
	}
	return false
}

func (x *UserTableEnd) GetWinner() bool {
	if x != nil {
		return x.Winner
	}
	return false
}

func (x *UserTableEnd) GetOwner() bool {
	if x != nil {
		return x.Owner
	}
	return false
}

func (x *UserTableEnd) GetTag() EndTag {
	if x != nil {
		return x.Tag
	}
	return EndTag_EndTagUnspecified
}

func (x *UserTableEnd) GetCards() []byte {
	if x != nil {
		return x.Cards
	}
	return nil
}

type Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ItemId   uint32 `protobuf:"varint,1,opt,name=ItemId,proto3" json:"ItemId,omitempty"`
	Quantity uint32 `protobuf:"varint,2,opt,name=Quantity,proto3" json:"Quantity,omitempty"`
}

func (x *Item) Reset() {
	*x = Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Item) ProtoMessage() {}

func (x *Item) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Item.ProtoReflect.Descriptor instead.
func (*Item) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{5}
}

func (x *Item) GetItemId() uint32 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *Item) GetQuantity() uint32 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

type User struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId       string    `protobuf:"bytes,1,opt,name=UserId,proto3" json:"UserId,omitempty"`
	Nickname     string    `protobuf:"bytes,2,opt,name=Nickname,proto3" json:"Nickname,omitempty"`                    //昵称
	Avatar       string    `protobuf:"bytes,3,opt,name=Avatar,proto3" json:"Avatar,omitempty"`                        //头像
	Seat         uint32    `protobuf:"varint,4,opt,name=Seat,proto3" json:"Seat,omitempty"`                           //座位号0,1,2 逆时针方向排列
	Landlord     bool      `protobuf:"varint,5,opt,name=Landlord,proto3" json:"Landlord,omitempty"`                   //坑主
	Score        int32     `protobuf:"varint,6,opt,name=Score,proto3" json:"Score,omitempty"`                         //分数
	Double       uint32    `protobuf:"varint,7,opt,name=Double,proto3" json:"Double,omitempty"`                       //加倍数
	DoubleCalled bool      `protobuf:"varint,8,opt,name=DoubleCalled,proto3" json:"DoubleCalled,omitempty"`           //已叫过加倍
	Cards        []byte    `protobuf:"bytes,9,opt,name=Cards,proto3" json:"Cards,omitempty"`                          //当前手牌
	LastCards    []byte    `protobuf:"bytes,10,opt,name=LastCards,proto3" json:"LastCards,omitempty"`                 //上一手牌
	Items        []*Item   `protobuf:"bytes,11,rep,name=Items,proto3" json:"Items,omitempty"`                         //道具列表
	Online       bool      `protobuf:"varint,12,opt,name=Online,proto3" json:"Online,omitempty"`                      //是否在线
	Leaved       bool      `protobuf:"varint,13,opt,name=Leaved,proto3" json:"Leaved,omitempty"`                      //是否离开
	Hosted       bool      `protobuf:"varint,14,opt,name=Hosted,proto3" json:"Hosted,omitempty"`                      //是否托管
	Owner        bool      `protobuf:"varint,15,opt,name=Owner,proto3" json:"Owner,omitempty"`                        //房主
	VoteState    VoteState `protobuf:"varint,16,opt,name=VoteState,proto3,enum=VoteState" json:"VoteState,omitempty"` //投票状态
	Ready        bool      `protobuf:"varint,17,opt,name=Ready,proto3" json:"Ready,omitempty"`                        //是否准备
}

func (x *User) Reset() {
	*x = User{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{6}
}

func (x *User) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *User) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *User) GetAvatar() string {
	if x != nil {
		return x.Avatar
	}
	return ""
}

func (x *User) GetSeat() uint32 {
	if x != nil {
		return x.Seat
	}
	return 0
}

func (x *User) GetLandlord() bool {
	if x != nil {
		return x.Landlord
	}
	return false
}

func (x *User) GetScore() int32 {
	if x != nil {
		return x.Score
	}
	return 0
}

func (x *User) GetDouble() uint32 {
	if x != nil {
		return x.Double
	}
	return 0
}

func (x *User) GetDoubleCalled() bool {
	if x != nil {
		return x.DoubleCalled
	}
	return false
}

func (x *User) GetCards() []byte {
	if x != nil {
		return x.Cards
	}
	return nil
}

func (x *User) GetLastCards() []byte {
	if x != nil {
		return x.LastCards
	}
	return nil
}

func (x *User) GetItems() []*Item {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *User) GetOnline() bool {
	if x != nil {
		return x.Online
	}
	return false
}

func (x *User) GetLeaved() bool {
	if x != nil {
		return x.Leaved
	}
	return false
}

func (x *User) GetHosted() bool {
	if x != nil {
		return x.Hosted
	}
	return false
}

func (x *User) GetOwner() bool {
	if x != nil {
		return x.Owner
	}
	return false
}

func (x *User) GetVoteState() VoteState {
	if x != nil {
		return x.VoteState
	}
	return VoteState_VoteStateUnspecified
}

func (x *User) GetReady() bool {
	if x != nil {
		return x.Ready
	}
	return false
}

type Game struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GameId             string       `protobuf:"bytes,1,opt,name=GameId,proto3" json:"GameId,omitempty"`                                //游戏ID
	GameType           GameType     `protobuf:"varint,2,opt,name=GameType,proto3,enum=GameType" json:"GameType,omitempty"`             //游戏类型
	GameCategory       GameCategory `protobuf:"varint,3,opt,name=GameCategory,proto3,enum=GameCategory" json:"GameCategory,omitempty"` //游戏类别
	Title              string       `protobuf:"bytes,4,opt,name=Title,proto3" json:"Title,omitempty"`                                  //游戏标题
	Image              string       `protobuf:"bytes,5,opt,name=Image,proto3" json:"Image,omitempty"`                                  //游戏图标
	Rounds             uint32       `protobuf:"varint,6,opt,name=Rounds,proto3" json:"Rounds,omitempty"`                               //游戏总轮次
	CurrentRound       uint32       `protobuf:"varint,7,opt,name=CurrentRound,proto3" json:"CurrentRound,omitempty"`                   //游戏当前轮次
	People             uint32       `protobuf:"varint,8,opt,name=People,proto3" json:"People,omitempty"`                               //参加人数
	CurrentPeople      uint32       `protobuf:"varint,9,opt,name=CurrentPeople,proto3" json:"CurrentPeople,omitempty"`                 //当前剩余人数
	GameConfig         string       `protobuf:"bytes,10,opt,name=GameConfig,proto3" json:"GameConfig,omitempty"`                       //游戏配置JSON字符串
	DefaultVoteTimeout uint32       `protobuf:"varint,11,opt,name=DefaultVoteTimeout,proto3" json:"DefaultVoteTimeout,omitempty"`      //默认投票超时秒数
	WithBomb           bool         `protobuf:"varint,12,opt,name=WithBomb,proto3" json:"WithBomb,omitempty"`                          //是否带炸弹
	WithDouble         bool         `protobuf:"varint,13,opt,name=WithDouble,proto3" json:"WithDouble,omitempty"`                      //是否带加倍
}

func (x *Game) Reset() {
	*x = Game{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Game) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Game) ProtoMessage() {}

func (x *Game) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Game.ProtoReflect.Descriptor instead.
func (*Game) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{7}
}

func (x *Game) GetGameId() string {
	if x != nil {
		return x.GameId
	}
	return ""
}

func (x *Game) GetGameType() GameType {
	if x != nil {
		return x.GameType
	}
	return GameType_GameTypeUnspecified
}

func (x *Game) GetGameCategory() GameCategory {
	if x != nil {
		return x.GameCategory
	}
	return GameCategory_GameCategoryUnspecified
}

func (x *Game) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Game) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *Game) GetRounds() uint32 {
	if x != nil {
		return x.Rounds
	}
	return 0
}

func (x *Game) GetCurrentRound() uint32 {
	if x != nil {
		return x.CurrentRound
	}
	return 0
}

func (x *Game) GetPeople() uint32 {
	if x != nil {
		return x.People
	}
	return 0
}

func (x *Game) GetCurrentPeople() uint32 {
	if x != nil {
		return x.CurrentPeople
	}
	return 0
}

func (x *Game) GetGameConfig() string {
	if x != nil {
		return x.GameConfig
	}
	return ""
}

func (x *Game) GetDefaultVoteTimeout() uint32 {
	if x != nil {
		return x.DefaultVoteTimeout
	}
	return 0
}

func (x *Game) GetWithBomb() bool {
	if x != nil {
		return x.WithBomb
	}
	return false
}

func (x *Game) GetWithDouble() bool {
	if x != nil {
		return x.WithDouble
	}
	return false
}

type Table struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Game           *Game       `protobuf:"bytes,1,opt,name=Game,proto3" json:"Game,omitempty"`                                 //游戏
	Status         TableStatus `protobuf:"varint,2,opt,name=Status,proto3,enum=TableStatus" json:"Status,omitempty"`           //牌桌状态
	Users          []*User     `protobuf:"bytes,3,rep,name=Users,proto3" json:"Users,omitempty"`                               //用户列表
	TableId        string      `protobuf:"bytes,4,opt,name=TableId,proto3" json:"TableId,omitempty"`                           //牌桌唯一ID
	TableNo        string      `protobuf:"bytes,5,opt,name=TableNo,proto3" json:"TableNo,omitempty"`                           //私人牌桌桌号
	Decks          uint32      `protobuf:"varint,6,opt,name=Decks,proto3" json:"Decks,omitempty"`                              //共几副牌
	CurrentDeck    uint32      `protobuf:"varint,7,opt,name=CurrentDeck,proto3" json:"CurrentDeck,omitempty"`                  //当前第几副牌
	BaseScore      uint32      `protobuf:"varint,8,opt,name=BaseScore,proto3" json:"BaseScore,omitempty"`                      //牌桌底分
	Rate           uint32      `protobuf:"varint,9,opt,name=Rate,proto3" json:"Rate,omitempty"`                                //当前倍率
	HoleCards      []byte      `protobuf:"bytes,10,opt,name=HoleCards,proto3" json:"HoleCards,omitempty"`                      //底牌
	PlayedCards    []byte      `protobuf:"bytes,11,opt,name=PlayedCards,proto3" json:"PlayedCards,omitempty"`                  //已出牌
	CurrentSeat    uint32      `protobuf:"varint,12,opt,name=CurrentSeat,proto3" json:"CurrentSeat,omitempty"`                 //当前到谁 座位号
	CurrentAction  Action      `protobuf:"varint,13,opt,name=CurrentAction,proto3,enum=Action" json:"CurrentAction,omitempty"` //当前到谁 动作
	CurrentTimeout uint32      `protobuf:"varint,14,opt,name=CurrentTimeout,proto3" json:"CurrentTimeout,omitempty"`           //当前到谁 超时秒数
	VoteTimeout    *uint32     `protobuf:"varint,15,opt,name=VoteTimeout,proto3,oneof" json:"VoteTimeout,omitempty"`           //当前投票超时秒数，存在时表示正在进行解散投票中
}

func (x *Table) Reset() {
	*x = Table{}
	if protoimpl.UnsafeEnabled {
		mi := &file_base_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Table) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Table) ProtoMessage() {}

func (x *Table) ProtoReflect() protoreflect.Message {
	mi := &file_base_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Table.ProtoReflect.Descriptor instead.
func (*Table) Descriptor() ([]byte, []int) {
	return file_base_proto_rawDescGZIP(), []int{8}
}

func (x *Table) GetGame() *Game {
	if x != nil {
		return x.Game
	}
	return nil
}

func (x *Table) GetStatus() TableStatus {
	if x != nil {
		return x.Status
	}
	return TableStatus_TableStatusUnspecified
}

func (x *Table) GetUsers() []*User {
	if x != nil {
		return x.Users
	}
	return nil
}

func (x *Table) GetTableId() string {
	if x != nil {
		return x.TableId
	}
	return ""
}

func (x *Table) GetTableNo() string {
	if x != nil {
		return x.TableNo
	}
	return ""
}

func (x *Table) GetDecks() uint32 {
	if x != nil {
		return x.Decks
	}
	return 0
}

func (x *Table) GetCurrentDeck() uint32 {
	if x != nil {
		return x.CurrentDeck
	}
	return 0
}

func (x *Table) GetBaseScore() uint32 {
	if x != nil {
		return x.BaseScore
	}
	return 0
}

func (x *Table) GetRate() uint32 {
	if x != nil {
		return x.Rate
	}
	return 0
}

func (x *Table) GetHoleCards() []byte {
	if x != nil {
		return x.HoleCards
	}
	return nil
}

func (x *Table) GetPlayedCards() []byte {
	if x != nil {
		return x.PlayedCards
	}
	return nil
}

func (x *Table) GetCurrentSeat() uint32 {
	if x != nil {
		return x.CurrentSeat
	}
	return 0
}

func (x *Table) GetCurrentAction() Action {
	if x != nil {
		return x.CurrentAction
	}
	return Action_ActionUnspecified
}

func (x *Table) GetCurrentTimeout() uint32 {
	if x != nil {
		return x.CurrentTimeout
	}
	return 0
}

func (x *Table) GetVoteTimeout() uint32 {
	if x != nil && x.VoteTimeout != nil {
		return *x.VoteTimeout
	}
	return 0
}

var File_base_proto protoreflect.FileDescriptor

var file_base_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x62, 0x61, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x35, 0x0a, 0x09,
	0x55, 0x73, 0x65, 0x72, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x65, 0x61,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x53, 0x65, 0x61, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x43, 0x61, 0x72, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x43, 0x61,
	0x72, 0x64, 0x73, 0x22, 0x64, 0x0a, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x63, 0x6b, 0x45,
	0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x65, 0x61, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x04, 0x53, 0x65, 0x61, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x44, 0x65, 0x63, 0x6b, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x44, 0x65, 0x63, 0x6b, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x12, 0x19, 0x0a, 0x05, 0x43, 0x61, 0x72, 0x64, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x48, 0x00, 0x52, 0x05, 0x43, 0x61, 0x72, 0x64, 0x73, 0x88, 0x01, 0x01, 0x42,
	0x08, 0x0a, 0x06, 0x5f, 0x43, 0x61, 0x72, 0x64, 0x73, 0x22, 0x48, 0x0a, 0x08, 0x55, 0x73, 0x65,
	0x72, 0x56, 0x6f, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x65, 0x61, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x04, 0x53, 0x65, 0x61, 0x74, 0x12, 0x28, 0x0a, 0x09, 0x56, 0x6f, 0x74,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x56,
	0x6f, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x09, 0x56, 0x6f, 0x74, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x22, 0x42, 0x0a, 0x04, 0x44, 0x65, 0x63, 0x6b, 0x12, 0x16, 0x0a, 0x06, 0x44,
	0x65, 0x63, 0x6b, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x44, 0x65, 0x63,
	0x6b, 0x4e, 0x6f, 0x12, 0x22, 0x0a, 0x05, 0x55, 0x73, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x63, 0x6b, 0x45, 0x6e, 0x64,
	0x52, 0x05, 0x55, 0x73, 0x65, 0x72, 0x73, 0x22, 0x99, 0x02, 0x0a, 0x0c, 0x55, 0x73, 0x65, 0x72,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x65, 0x61, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x53, 0x65, 0x61, 0x74, 0x12, 0x1a, 0x0a, 0x08,
	0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x76, 0x61, 0x74,
	0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x41, 0x76, 0x61, 0x74, 0x61, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x52, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04,
	0x52, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x61, 0x73, 0x65, 0x53, 0x63, 0x6f, 0x72,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x42, 0x61, 0x73, 0x65, 0x53, 0x63, 0x6f,
	0x72, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x61, 0x6e, 0x64,
	0x6c, 0x6f, 0x72, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x4c, 0x61, 0x6e, 0x64,
	0x6c, 0x6f, 0x72, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x57, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x57, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x4f, 0x77, 0x6e,
	0x65, 0x72, 0x12, 0x19, 0x0a, 0x03, 0x54, 0x61, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x07, 0x2e, 0x45, 0x6e, 0x64, 0x54, 0x61, 0x67, 0x52, 0x03, 0x54, 0x61, 0x67, 0x12, 0x14, 0x0a,
	0x05, 0x43, 0x61, 0x72, 0x64, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x43, 0x61,
	0x72, 0x64, 0x73, 0x22, 0x3a, 0x0a, 0x04, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x49,
	0x74, 0x65, 0x6d, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x49, 0x74, 0x65,
	0x6d, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x22,
	0xc3, 0x03, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x4e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x41, 0x76, 0x61, 0x74, 0x61, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x41, 0x76,
	0x61, 0x74, 0x61, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x53, 0x65, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x53, 0x65, 0x61, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x4c, 0x61, 0x6e, 0x64,
	0x6c, 0x6f, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x4c, 0x61, 0x6e, 0x64,
	0x6c, 0x6f, 0x72, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x53, 0x63, 0x6f, 0x72, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x44, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x44, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x43, 0x61, 0x6c, 0x6c,
	0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x43, 0x61, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x43, 0x61, 0x72, 0x64, 0x73, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x4c, 0x61, 0x73, 0x74, 0x43, 0x61, 0x72, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x09, 0x4c, 0x61, 0x73, 0x74, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x1b, 0x0a, 0x05, 0x49, 0x74,
	0x65, 0x6d, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x49, 0x74, 0x65, 0x6d,
	0x52, 0x05, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x4f, 0x6e, 0x6c, 0x69, 0x6e,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x06, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x6f, 0x73, 0x74, 0x65,
	0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x48, 0x6f, 0x73, 0x74, 0x65, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x4f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x4f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x09, 0x56, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0a, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x09, 0x56, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x52, 0x65, 0x61, 0x64, 0x79, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05,
	0x52, 0x65, 0x61, 0x64, 0x79, 0x22, 0xaa, 0x03, 0x0a, 0x04, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x16,
	0x0a, 0x06, 0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x47, 0x61, 0x6d, 0x65, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x08, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x09, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x08, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x31, 0x0a,
	0x0c, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x0d, 0x2e, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x52, 0x0c, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x54, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06,
	0x52, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x52, 0x6f,
	0x75, 0x6e, 0x64, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x52,
	0x6f, 0x75, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x50, 0x65, 0x6f, 0x70,
	0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x50, 0x65, 0x6f, 0x70, 0x6c, 0x65,
	0x12, 0x24, 0x0a, 0x0d, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x65, 0x6f, 0x70, 0x6c,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x50, 0x65, 0x6f, 0x70, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x47, 0x61, 0x6d, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2e, 0x0a, 0x12, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x56, 0x6f, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x12, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x6f, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x57, 0x69, 0x74, 0x68, 0x42, 0x6f,
	0x6d, 0x62, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x57, 0x69, 0x74, 0x68, 0x42, 0x6f,
	0x6d, 0x62, 0x12, 0x1e, 0x0a, 0x0a, 0x57, 0x69, 0x74, 0x68, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x57, 0x69, 0x74, 0x68, 0x44, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x22, 0xf3, 0x03, 0x0a, 0x05, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x19, 0x0a, 0x04,
	0x47, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x47, 0x61, 0x6d,
	0x65, 0x52, 0x04, 0x47, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1b, 0x0a,
	0x05, 0x55, 0x73, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x05, 0x55, 0x73, 0x65, 0x72, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x6f, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x6f, 0x12, 0x14,
	0x0a, 0x05, 0x44, 0x65, 0x63, 0x6b, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x44,
	0x65, 0x63, 0x6b, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x44,
	0x65, 0x63, 0x6b, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x44, 0x65, 0x63, 0x6b, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x61, 0x73, 0x65, 0x53, 0x63,
	0x6f, 0x72, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x42, 0x61, 0x73, 0x65, 0x53,
	0x63, 0x6f, 0x72, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x52, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x04, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x48, 0x6f, 0x6c, 0x65,
	0x43, 0x61, 0x72, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x48, 0x6f, 0x6c,
	0x65, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x6c, 0x61, 0x79, 0x65, 0x64,
	0x43, 0x61, 0x72, 0x64, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x50, 0x6c, 0x61,
	0x79, 0x65, 0x64, 0x43, 0x61, 0x72, 0x64, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x53, 0x65, 0x61, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x43,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x65, 0x61, 0x74, 0x12, 0x2d, 0x0a, 0x0d, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x07, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0e, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x12, 0x25, 0x0a, 0x0b, 0x56, 0x6f, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x00, 0x52, 0x0b, 0x56, 0x6f, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x56, 0x6f, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x2a, 0x63, 0x0a, 0x08, 0x47, 0x61, 0x6d, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x55, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x13, 0x0a,
	0x0f, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x44, 0x69, 0x67, 0x48, 0x6f, 0x6c, 0x65,
	0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x47, 0x61, 0x6d, 0x65, 0x54, 0x79, 0x70, 0x65, 0x4c, 0x61,
	0x6e, 0x64, 0x6c, 0x6f, 0x72, 0x64, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x47, 0x61, 0x6d, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x68, 0x6a, 0x6f, 0x6e, 0x67, 0x10, 0x03, 0x2a, 0x77, 0x0a,
	0x0c, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x1b, 0x0a,
	0x17, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x55, 0x6e, 0x73,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x47, 0x61,
	0x6d, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x47, 0x6f, 0x6c, 0x64, 0x10, 0x01,
	0x12, 0x1b, 0x0a, 0x17, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x02, 0x12, 0x17, 0x0a,
	0x13, 0x47, 0x61, 0x6d, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x69,
	0x76, 0x61, 0x74, 0x65, 0x10, 0x03, 0x2a, 0xd2, 0x01, 0x0a, 0x0b, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x55, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65,
	0x64, 0x10, 0x02, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x61, 0x74, 0x65, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x61, 0x6c, 0x6c, 0x44,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x10, 0x04, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x50, 0x6c, 0x61, 0x79, 0x69, 0x6e, 0x67, 0x10, 0x05, 0x12,
	0x16, 0x0a, 0x12, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65,
	0x63, 0x6b, 0x45, 0x6e, 0x64, 0x10, 0x06, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x45, 0x6e, 0x64, 0x10, 0x07, 0x2a, 0x81, 0x01, 0x0a, 0x06,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x55, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x12, 0x0a,
	0x0e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x52, 0x61, 0x74, 0x65, 0x10,
	0x01, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x44,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x6c, 0x61, 0x79, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6e, 0x74, 0x46, 0x6f, 0x6c, 0x6c, 0x6f, 0x77, 0x10, 0x05, 0x2a,
	0x46, 0x0a, 0x06, 0x45, 0x6e, 0x64, 0x54, 0x61, 0x67, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x6e, 0x64,
	0x54, 0x61, 0x67, 0x55, 0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00,
	0x12, 0x12, 0x0a, 0x0e, 0x45, 0x6e, 0x64, 0x54, 0x61, 0x67, 0x52, 0x65, 0x61, 0x63, 0x68, 0x4d,
	0x61, 0x78, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x6e, 0x64, 0x54, 0x61, 0x67, 0x47, 0x6f,
	0x42, 0x72, 0x6f, 0x6b, 0x65, 0x10, 0x02, 0x2a, 0x58, 0x0a, 0x08, 0x43, 0x68, 0x61, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x43, 0x68, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x55,
	0x6e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c,
	0x43, 0x68, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x54, 0x65, 0x78, 0x74, 0x10, 0x01, 0x12, 0x0f,
	0x0a, 0x0b, 0x43, 0x68, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6d, 0x6f, 0x10, 0x02, 0x12,
	0x10, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x70, 0x10,
	0x03, 0x2a, 0x66, 0x0a, 0x09, 0x56, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x18,
	0x0a, 0x14, 0x56, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x55, 0x6e, 0x73, 0x70, 0x65,
	0x63, 0x69, 0x66, 0x69, 0x65, 0x64, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x56, 0x6f, 0x74, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x41, 0x77, 0x61, 0x69, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x01, 0x12,
	0x13, 0x0a, 0x0f, 0x56, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x41, 0x63, 0x63, 0x65,
	0x70, 0x74, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x56, 0x6f, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x6a, 0x65, 0x63, 0x74, 0x10, 0x03, 0x42, 0x07, 0x5a, 0x05, 0x2e, 0x2e, 0x2f,
	0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_base_proto_rawDescOnce sync.Once
	file_base_proto_rawDescData = file_base_proto_rawDesc
)

func file_base_proto_rawDescGZIP() []byte {
	file_base_proto_rawDescOnce.Do(func() {
		file_base_proto_rawDescData = protoimpl.X.CompressGZIP(file_base_proto_rawDescData)
	})
	return file_base_proto_rawDescData
}

var file_base_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_base_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_base_proto_goTypes = []interface{}{
	(GameType)(0),        // 0: GameType
	(GameCategory)(0),    // 1: GameCategory
	(TableStatus)(0),     // 2: TableStatus
	(Action)(0),          // 3: Action
	(EndTag)(0),          // 4: EndTag
	(ChatType)(0),        // 5: ChatType
	(VoteState)(0),       // 6: VoteState
	(*UserCards)(nil),    // 7: UserCards
	(*UserDeckEnd)(nil),  // 8: UserDeckEnd
	(*UserVote)(nil),     // 9: UserVote
	(*Deck)(nil),         // 10: Deck
	(*UserTableEnd)(nil), // 11: UserTableEnd
	(*Item)(nil),         // 12: Item
	(*User)(nil),         // 13: User
	(*Game)(nil),         // 14: Game
	(*Table)(nil),        // 15: Table
}
var file_base_proto_depIdxs = []int32{
	6,  // 0: UserVote.VoteState:type_name -> VoteState
	8,  // 1: Deck.Users:type_name -> UserDeckEnd
	4,  // 2: UserTableEnd.Tag:type_name -> EndTag
	12, // 3: User.Items:type_name -> Item
	6,  // 4: User.VoteState:type_name -> VoteState
	0,  // 5: Game.GameType:type_name -> GameType
	1,  // 6: Game.GameCategory:type_name -> GameCategory
	14, // 7: Table.Game:type_name -> Game
	2,  // 8: Table.Status:type_name -> TableStatus
	13, // 9: Table.Users:type_name -> User
	3,  // 10: Table.CurrentAction:type_name -> Action
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_base_proto_init() }
func file_base_proto_init() {
	if File_base_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_base_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserCards); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserDeckEnd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserVote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Deck); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserTableEnd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*User); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Game); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_base_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Table); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_base_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_base_proto_msgTypes[8].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_base_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_base_proto_goTypes,
		DependencyIndexes: file_base_proto_depIdxs,
		EnumInfos:         file_base_proto_enumTypes,
		MessageInfos:      file_base_proto_msgTypes,
	}.Build()
	File_base_proto = out.File
	file_base_proto_rawDesc = nil
	file_base_proto_goTypes = nil
	file_base_proto_depIdxs = nil
}
