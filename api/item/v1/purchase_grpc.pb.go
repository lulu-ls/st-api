// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: item/v1/purchase.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Purchase_VirtualBuy_FullMethodName        = "/api.item.v1.Purchase/VirtualBuy"
	Purchase_JSBuy_FullMethodName             = "/api.item.v1.Purchase/JSBuy"
	Purchase_AppBuy_FullMethodName            = "/api.item.v1.Purchase/AppBuy"
	Purchase_PurchaseList_FullMethodName      = "/api.item.v1.Purchase/PurchaseList"
	Purchase_GetPurchase_FullMethodName       = "/api.item.v1.Purchase/GetPurchase"
	Purchase_GetPurchaseRecord_FullMethodName = "/api.item.v1.Purchase/GetPurchaseRecord"
)

// PurchaseClient is the client API for Purchase service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PurchaseClient interface {
	VirtualBuy(ctx context.Context, in *VirtualBuyRequest, opts ...grpc.CallOption) (*VirtualBuyReply, error)
	JSBuy(ctx context.Context, in *JSBuyRequest, opts ...grpc.CallOption) (*JSBuyReply, error)
	AppBuy(ctx context.Context, in *AppBuyRequest, opts ...grpc.CallOption) (*AppBuyReply, error)
	PurchaseList(ctx context.Context, in *PurchaseListRequest, opts ...grpc.CallOption) (*PurchaseListReply, error)
	GetPurchase(ctx context.Context, in *GetPurchaseRequest, opts ...grpc.CallOption) (*GetPurchaseReply, error)
	GetPurchaseRecord(ctx context.Context, in *GetPurchaseRecordRequest, opts ...grpc.CallOption) (*GetPurchaseRecordReply, error)
}

type purchaseClient struct {
	cc grpc.ClientConnInterface
}

func NewPurchaseClient(cc grpc.ClientConnInterface) PurchaseClient {
	return &purchaseClient{cc}
}

func (c *purchaseClient) VirtualBuy(ctx context.Context, in *VirtualBuyRequest, opts ...grpc.CallOption) (*VirtualBuyReply, error) {
	out := new(VirtualBuyReply)
	err := c.cc.Invoke(ctx, Purchase_VirtualBuy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchaseClient) JSBuy(ctx context.Context, in *JSBuyRequest, opts ...grpc.CallOption) (*JSBuyReply, error) {
	out := new(JSBuyReply)
	err := c.cc.Invoke(ctx, Purchase_JSBuy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchaseClient) AppBuy(ctx context.Context, in *AppBuyRequest, opts ...grpc.CallOption) (*AppBuyReply, error) {
	out := new(AppBuyReply)
	err := c.cc.Invoke(ctx, Purchase_AppBuy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchaseClient) PurchaseList(ctx context.Context, in *PurchaseListRequest, opts ...grpc.CallOption) (*PurchaseListReply, error) {
	out := new(PurchaseListReply)
	err := c.cc.Invoke(ctx, Purchase_PurchaseList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchaseClient) GetPurchase(ctx context.Context, in *GetPurchaseRequest, opts ...grpc.CallOption) (*GetPurchaseReply, error) {
	out := new(GetPurchaseReply)
	err := c.cc.Invoke(ctx, Purchase_GetPurchase_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *purchaseClient) GetPurchaseRecord(ctx context.Context, in *GetPurchaseRecordRequest, opts ...grpc.CallOption) (*GetPurchaseRecordReply, error) {
	out := new(GetPurchaseRecordReply)
	err := c.cc.Invoke(ctx, Purchase_GetPurchaseRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PurchaseServer is the server API for Purchase service.
// All implementations must embed UnimplementedPurchaseServer
// for forward compatibility
type PurchaseServer interface {
	VirtualBuy(context.Context, *VirtualBuyRequest) (*VirtualBuyReply, error)
	JSBuy(context.Context, *JSBuyRequest) (*JSBuyReply, error)
	AppBuy(context.Context, *AppBuyRequest) (*AppBuyReply, error)
	PurchaseList(context.Context, *PurchaseListRequest) (*PurchaseListReply, error)
	GetPurchase(context.Context, *GetPurchaseRequest) (*GetPurchaseReply, error)
	GetPurchaseRecord(context.Context, *GetPurchaseRecordRequest) (*GetPurchaseRecordReply, error)
	mustEmbedUnimplementedPurchaseServer()
}

// UnimplementedPurchaseServer must be embedded to have forward compatible implementations.
type UnimplementedPurchaseServer struct {
}

func (UnimplementedPurchaseServer) VirtualBuy(context.Context, *VirtualBuyRequest) (*VirtualBuyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VirtualBuy not implemented")
}
func (UnimplementedPurchaseServer) JSBuy(context.Context, *JSBuyRequest) (*JSBuyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method JSBuy not implemented")
}
func (UnimplementedPurchaseServer) AppBuy(context.Context, *AppBuyRequest) (*AppBuyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppBuy not implemented")
}
func (UnimplementedPurchaseServer) PurchaseList(context.Context, *PurchaseListRequest) (*PurchaseListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PurchaseList not implemented")
}
func (UnimplementedPurchaseServer) GetPurchase(context.Context, *GetPurchaseRequest) (*GetPurchaseReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPurchase not implemented")
}
func (UnimplementedPurchaseServer) GetPurchaseRecord(context.Context, *GetPurchaseRecordRequest) (*GetPurchaseRecordReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPurchaseRecord not implemented")
}
func (UnimplementedPurchaseServer) mustEmbedUnimplementedPurchaseServer() {}

// UnsafePurchaseServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PurchaseServer will
// result in compilation errors.
type UnsafePurchaseServer interface {
	mustEmbedUnimplementedPurchaseServer()
}

func RegisterPurchaseServer(s grpc.ServiceRegistrar, srv PurchaseServer) {
	s.RegisterService(&Purchase_ServiceDesc, srv)
}

func _Purchase_VirtualBuy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VirtualBuyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PurchaseServer).VirtualBuy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Purchase_VirtualBuy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PurchaseServer).VirtualBuy(ctx, req.(*VirtualBuyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Purchase_JSBuy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JSBuyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PurchaseServer).JSBuy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Purchase_JSBuy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PurchaseServer).JSBuy(ctx, req.(*JSBuyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Purchase_AppBuy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppBuyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PurchaseServer).AppBuy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Purchase_AppBuy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PurchaseServer).AppBuy(ctx, req.(*AppBuyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Purchase_PurchaseList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PurchaseListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PurchaseServer).PurchaseList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Purchase_PurchaseList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PurchaseServer).PurchaseList(ctx, req.(*PurchaseListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Purchase_GetPurchase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPurchaseRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PurchaseServer).GetPurchase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Purchase_GetPurchase_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PurchaseServer).GetPurchase(ctx, req.(*GetPurchaseRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Purchase_GetPurchaseRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPurchaseRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PurchaseServer).GetPurchaseRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Purchase_GetPurchaseRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PurchaseServer).GetPurchaseRecord(ctx, req.(*GetPurchaseRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Purchase_ServiceDesc is the grpc.ServiceDesc for Purchase service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Purchase_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.item.v1.Purchase",
	HandlerType: (*PurchaseServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "VirtualBuy",
			Handler:    _Purchase_VirtualBuy_Handler,
		},
		{
			MethodName: "JSBuy",
			Handler:    _Purchase_JSBuy_Handler,
		},
		{
			MethodName: "AppBuy",
			Handler:    _Purchase_AppBuy_Handler,
		},
		{
			MethodName: "PurchaseList",
			Handler:    _Purchase_PurchaseList_Handler,
		},
		{
			MethodName: "GetPurchase",
			Handler:    _Purchase_GetPurchase_Handler,
		},
		{
			MethodName: "GetPurchaseRecord",
			Handler:    _Purchase_GetPurchaseRecord_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "item/v1/purchase.proto",
}
