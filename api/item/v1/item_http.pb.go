// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.1
// - protoc             v4.25.0
// source: item/v1/item.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationItemListItem = "/api.item.v1.Item/ListItem"

type ItemHTTPServer interface {
	// ListItem 获取道具列表
	ListItem(context.Context, *ListItemRequest) (*ListItemReply, error)
}

func RegisterItemHTTPServer(s *http.Server, srv ItemHTTPServer) {
	r := s.Route("/")
	r.POST("/st-games/v1/item/list", _Item_ListItem1_HTTP_Handler(srv))
}

func _Item_ListItem1_HTTP_Handler(srv ItemHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListItemRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationItemListItem)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListItem(ctx, req.(*ListItemRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListItemReply)
		return ctx.Result(200, reply)
	}
}

type ItemHTTPClient interface {
	ListItem(ctx context.Context, req *ListItemRequest, opts ...http.CallOption) (rsp *ListItemReply, err error)
}

type ItemHTTPClientImpl struct {
	cc *http.Client
}

func NewItemHTTPClient(client *http.Client) ItemHTTPClient {
	return &ItemHTTPClientImpl{client}
}

func (c *ItemHTTPClientImpl) ListItem(ctx context.Context, in *ListItemRequest, opts ...http.CallOption) (*ListItemReply, error) {
	var out ListItemReply
	pattern := "/st-games/v1/item/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationItemListItem))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
