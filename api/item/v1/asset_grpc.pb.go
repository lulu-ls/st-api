// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: item/v1/asset.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Asset_AssetEdit_FullMethodName       = "/api.item.v1.Asset/AssetEdit"
	Asset_AssetEditRevert_FullMethodName = "/api.item.v1.Asset/AssetEditRevert"
	Asset_AssetCreate_FullMethodName     = "/api.item.v1.Asset/AssetCreate"
	Asset_AssetCancel_FullMethodName     = "/api.item.v1.Asset/AssetCancel"
	Asset_AssetConfirm_FullMethodName    = "/api.item.v1.Asset/AssetConfirm"
	Asset_AssetRevert_FullMethodName     = "/api.item.v1.Asset/AssetRevert"
	Asset_AssetGet_FullMethodName        = "/api.item.v1.Asset/AssetGet"
	Asset_AssetList_FullMethodName       = "/api.item.v1.Asset/AssetList"
)

// AssetClient is the client API for Asset service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AssetClient interface {
	// 道具处理相关接口
	AssetEdit(ctx context.Context, in *AssetEditRequest, opts ...grpc.CallOption) (*AssetEditReply, error)
	AssetEditRevert(ctx context.Context, in *AssetEditRevertRequest, opts ...grpc.CallOption) (*AssetEditRevertReply, error)
	AssetCreate(ctx context.Context, in *AssetCreateRequest, opts ...grpc.CallOption) (*AssetCreateReply, error)
	AssetCancel(ctx context.Context, in *AssetCancelRequest, opts ...grpc.CallOption) (*AssetCancelReply, error)
	AssetConfirm(ctx context.Context, in *AssetConfirmRequest, opts ...grpc.CallOption) (*AssetConfirmReply, error)
	AssetRevert(ctx context.Context, in *AssetRevertRequest, opts ...grpc.CallOption) (*AssetRevertReply, error)
	AssetGet(ctx context.Context, in *AssetGetRequest, opts ...grpc.CallOption) (*AssetGetReply, error)
	AssetList(ctx context.Context, in *AssetListRequest, opts ...grpc.CallOption) (*AssetListReply, error)
}

type assetClient struct {
	cc grpc.ClientConnInterface
}

func NewAssetClient(cc grpc.ClientConnInterface) AssetClient {
	return &assetClient{cc}
}

func (c *assetClient) AssetEdit(ctx context.Context, in *AssetEditRequest, opts ...grpc.CallOption) (*AssetEditReply, error) {
	out := new(AssetEditReply)
	err := c.cc.Invoke(ctx, Asset_AssetEdit_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetClient) AssetEditRevert(ctx context.Context, in *AssetEditRevertRequest, opts ...grpc.CallOption) (*AssetEditRevertReply, error) {
	out := new(AssetEditRevertReply)
	err := c.cc.Invoke(ctx, Asset_AssetEditRevert_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetClient) AssetCreate(ctx context.Context, in *AssetCreateRequest, opts ...grpc.CallOption) (*AssetCreateReply, error) {
	out := new(AssetCreateReply)
	err := c.cc.Invoke(ctx, Asset_AssetCreate_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetClient) AssetCancel(ctx context.Context, in *AssetCancelRequest, opts ...grpc.CallOption) (*AssetCancelReply, error) {
	out := new(AssetCancelReply)
	err := c.cc.Invoke(ctx, Asset_AssetCancel_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetClient) AssetConfirm(ctx context.Context, in *AssetConfirmRequest, opts ...grpc.CallOption) (*AssetConfirmReply, error) {
	out := new(AssetConfirmReply)
	err := c.cc.Invoke(ctx, Asset_AssetConfirm_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetClient) AssetRevert(ctx context.Context, in *AssetRevertRequest, opts ...grpc.CallOption) (*AssetRevertReply, error) {
	out := new(AssetRevertReply)
	err := c.cc.Invoke(ctx, Asset_AssetRevert_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetClient) AssetGet(ctx context.Context, in *AssetGetRequest, opts ...grpc.CallOption) (*AssetGetReply, error) {
	out := new(AssetGetReply)
	err := c.cc.Invoke(ctx, Asset_AssetGet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *assetClient) AssetList(ctx context.Context, in *AssetListRequest, opts ...grpc.CallOption) (*AssetListReply, error) {
	out := new(AssetListReply)
	err := c.cc.Invoke(ctx, Asset_AssetList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AssetServer is the server API for Asset service.
// All implementations must embed UnimplementedAssetServer
// for forward compatibility
type AssetServer interface {
	// 道具处理相关接口
	AssetEdit(context.Context, *AssetEditRequest) (*AssetEditReply, error)
	AssetEditRevert(context.Context, *AssetEditRevertRequest) (*AssetEditRevertReply, error)
	AssetCreate(context.Context, *AssetCreateRequest) (*AssetCreateReply, error)
	AssetCancel(context.Context, *AssetCancelRequest) (*AssetCancelReply, error)
	AssetConfirm(context.Context, *AssetConfirmRequest) (*AssetConfirmReply, error)
	AssetRevert(context.Context, *AssetRevertRequest) (*AssetRevertReply, error)
	AssetGet(context.Context, *AssetGetRequest) (*AssetGetReply, error)
	AssetList(context.Context, *AssetListRequest) (*AssetListReply, error)
	mustEmbedUnimplementedAssetServer()
}

// UnimplementedAssetServer must be embedded to have forward compatible implementations.
type UnimplementedAssetServer struct {
}

func (UnimplementedAssetServer) AssetEdit(context.Context, *AssetEditRequest) (*AssetEditReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssetEdit not implemented")
}
func (UnimplementedAssetServer) AssetEditRevert(context.Context, *AssetEditRevertRequest) (*AssetEditRevertReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssetEditRevert not implemented")
}
func (UnimplementedAssetServer) AssetCreate(context.Context, *AssetCreateRequest) (*AssetCreateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssetCreate not implemented")
}
func (UnimplementedAssetServer) AssetCancel(context.Context, *AssetCancelRequest) (*AssetCancelReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssetCancel not implemented")
}
func (UnimplementedAssetServer) AssetConfirm(context.Context, *AssetConfirmRequest) (*AssetConfirmReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssetConfirm not implemented")
}
func (UnimplementedAssetServer) AssetRevert(context.Context, *AssetRevertRequest) (*AssetRevertReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssetRevert not implemented")
}
func (UnimplementedAssetServer) AssetGet(context.Context, *AssetGetRequest) (*AssetGetReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssetGet not implemented")
}
func (UnimplementedAssetServer) AssetList(context.Context, *AssetListRequest) (*AssetListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AssetList not implemented")
}
func (UnimplementedAssetServer) mustEmbedUnimplementedAssetServer() {}

// UnsafeAssetServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AssetServer will
// result in compilation errors.
type UnsafeAssetServer interface {
	mustEmbedUnimplementedAssetServer()
}

func RegisterAssetServer(s grpc.ServiceRegistrar, srv AssetServer) {
	s.RegisterService(&Asset_ServiceDesc, srv)
}

func _Asset_AssetEdit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssetEditRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetServer).AssetEdit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Asset_AssetEdit_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetServer).AssetEdit(ctx, req.(*AssetEditRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asset_AssetEditRevert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssetEditRevertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetServer).AssetEditRevert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Asset_AssetEditRevert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetServer).AssetEditRevert(ctx, req.(*AssetEditRevertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asset_AssetCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssetCreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetServer).AssetCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Asset_AssetCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetServer).AssetCreate(ctx, req.(*AssetCreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asset_AssetCancel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssetCancelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetServer).AssetCancel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Asset_AssetCancel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetServer).AssetCancel(ctx, req.(*AssetCancelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asset_AssetConfirm_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssetConfirmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetServer).AssetConfirm(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Asset_AssetConfirm_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetServer).AssetConfirm(ctx, req.(*AssetConfirmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asset_AssetRevert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssetRevertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetServer).AssetRevert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Asset_AssetRevert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetServer).AssetRevert(ctx, req.(*AssetRevertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asset_AssetGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssetGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetServer).AssetGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Asset_AssetGet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetServer).AssetGet(ctx, req.(*AssetGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Asset_AssetList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssetListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AssetServer).AssetList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Asset_AssetList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AssetServer).AssetList(ctx, req.(*AssetListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Asset_ServiceDesc is the grpc.ServiceDesc for Asset service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Asset_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.item.v1.Asset",
	HandlerType: (*AssetServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AssetEdit",
			Handler:    _Asset_AssetEdit_Handler,
		},
		{
			MethodName: "AssetEditRevert",
			Handler:    _Asset_AssetEditRevert_Handler,
		},
		{
			MethodName: "AssetCreate",
			Handler:    _Asset_AssetCreate_Handler,
		},
		{
			MethodName: "AssetCancel",
			Handler:    _Asset_AssetCancel_Handler,
		},
		{
			MethodName: "AssetConfirm",
			Handler:    _Asset_AssetConfirm_Handler,
		},
		{
			MethodName: "AssetRevert",
			Handler:    _Asset_AssetRevert_Handler,
		},
		{
			MethodName: "AssetGet",
			Handler:    _Asset_AssetGet_Handler,
		},
		{
			MethodName: "AssetList",
			Handler:    _Asset_AssetList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "item/v1/asset.proto",
}
