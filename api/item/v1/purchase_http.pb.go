// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.1
// - protoc             v4.24.4
// source: item/v1/purchase.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationPurchaseAppBuy = "/api.item.v1.Purchase/AppBuy"
const OperationPurchaseAppleBuy = "/api.item.v1.Purchase/AppleBuy"
const OperationPurchaseJSBuy = "/api.item.v1.Purchase/JSBuy"
const OperationPurchasePurchaseList = "/api.item.v1.Purchase/PurchaseList"
const OperationPurchaseVirtualBuy = "/api.item.v1.Purchase/VirtualBuy"

type PurchaseHTTPServer interface {
	AppBuy(context.Context, *AppBuyRequest) (*AppBuyReply, error)
	AppleBuy(context.Context, *AppleBuyRequest) (*AppleBuyReply, error)
	JSBuy(context.Context, *JSBuyRequest) (*JSBuyReply, error)
	PurchaseList(context.Context, *PurchaseListRequest) (*PurchaseListReply, error)
	VirtualBuy(context.Context, *VirtualBuyRequest) (*VirtualBuyReply, error)
}

func RegisterPurchaseHTTPServer(s *http.Server, srv PurchaseHTTPServer) {
	r := s.Route("/")
	r.POST("/st-games/v1/item/purchase/buy/virtual", _Purchase_VirtualBuy0_HTTP_Handler(srv))
	r.POST("/st-games/v1/item/purchase/buy/js", _Purchase_JSBuy0_HTTP_Handler(srv))
	r.POST("/st-games/v1/item/purchase/buy/apple", _Purchase_AppleBuy0_HTTP_Handler(srv))
	r.POST("/st-games/v1/item/purchase/buy/app", _Purchase_AppBuy0_HTTP_Handler(srv))
	r.POST("/st-games/v1/item/purchase/list", _Purchase_PurchaseList0_HTTP_Handler(srv))
}

func _Purchase_VirtualBuy0_HTTP_Handler(srv PurchaseHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in VirtualBuyRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPurchaseVirtualBuy)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.VirtualBuy(ctx, req.(*VirtualBuyRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*VirtualBuyReply)
		return ctx.Result(200, reply)
	}
}

func _Purchase_JSBuy0_HTTP_Handler(srv PurchaseHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in JSBuyRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPurchaseJSBuy)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.JSBuy(ctx, req.(*JSBuyRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*JSBuyReply)
		return ctx.Result(200, reply)
	}
}

func _Purchase_AppleBuy0_HTTP_Handler(srv PurchaseHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AppleBuyRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPurchaseAppleBuy)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AppleBuy(ctx, req.(*AppleBuyRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AppleBuyReply)
		return ctx.Result(200, reply)
	}
}

func _Purchase_AppBuy0_HTTP_Handler(srv PurchaseHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AppBuyRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPurchaseAppBuy)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AppBuy(ctx, req.(*AppBuyRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AppBuyReply)
		return ctx.Result(200, reply)
	}
}

func _Purchase_PurchaseList0_HTTP_Handler(srv PurchaseHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PurchaseListRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationPurchasePurchaseList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.PurchaseList(ctx, req.(*PurchaseListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PurchaseListReply)
		return ctx.Result(200, reply)
	}
}

type PurchaseHTTPClient interface {
	AppBuy(ctx context.Context, req *AppBuyRequest, opts ...http.CallOption) (rsp *AppBuyReply, err error)
	AppleBuy(ctx context.Context, req *AppleBuyRequest, opts ...http.CallOption) (rsp *AppleBuyReply, err error)
	JSBuy(ctx context.Context, req *JSBuyRequest, opts ...http.CallOption) (rsp *JSBuyReply, err error)
	PurchaseList(ctx context.Context, req *PurchaseListRequest, opts ...http.CallOption) (rsp *PurchaseListReply, err error)
	VirtualBuy(ctx context.Context, req *VirtualBuyRequest, opts ...http.CallOption) (rsp *VirtualBuyReply, err error)
}

type PurchaseHTTPClientImpl struct {
	cc *http.Client
}

func NewPurchaseHTTPClient(client *http.Client) PurchaseHTTPClient {
	return &PurchaseHTTPClientImpl{client}
}

func (c *PurchaseHTTPClientImpl) AppBuy(ctx context.Context, in *AppBuyRequest, opts ...http.CallOption) (*AppBuyReply, error) {
	var out AppBuyReply
	pattern := "/st-games/v1/item/purchase/buy/app"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPurchaseAppBuy))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PurchaseHTTPClientImpl) AppleBuy(ctx context.Context, in *AppleBuyRequest, opts ...http.CallOption) (*AppleBuyReply, error) {
	var out AppleBuyReply
	pattern := "/st-games/v1/item/purchase/buy/apple"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPurchaseAppleBuy))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PurchaseHTTPClientImpl) JSBuy(ctx context.Context, in *JSBuyRequest, opts ...http.CallOption) (*JSBuyReply, error) {
	var out JSBuyReply
	pattern := "/st-games/v1/item/purchase/buy/js"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPurchaseJSBuy))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PurchaseHTTPClientImpl) PurchaseList(ctx context.Context, in *PurchaseListRequest, opts ...http.CallOption) (*PurchaseListReply, error) {
	var out PurchaseListReply
	pattern := "/st-games/v1/item/purchase/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPurchasePurchaseList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *PurchaseHTTPClientImpl) VirtualBuy(ctx context.Context, in *VirtualBuyRequest, opts ...http.CallOption) (*VirtualBuyReply, error) {
	var out VirtualBuyReply
	pattern := "/st-games/v1/item/purchase/buy/virtual"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationPurchaseVirtualBuy))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
