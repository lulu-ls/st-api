// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: api/activity/v1/red_packet.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RedPacket_GetShareConf_FullMethodName   = "/api.activity.v1.RedPacket/GetShareConf"
	RedPacket_RedPacketShare_FullMethodName = "/api.activity.v1.RedPacket/RedPacketShare"
	RedPacket_Receive_FullMethodName        = "/api.activity.v1.RedPacket/Receive"
)

// RedPacketClient is the client API for RedPacket service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RedPacketClient interface {
	// 获取配置
	GetShareConf(ctx context.Context, in *GetShareConfRequest, opts ...grpc.CallOption) (*GetShareConfReply, error)
	// 分享 拆红包
	RedPacketShare(ctx context.Context, in *RedPacketRequest, opts ...grpc.CallOption) (*RedPacketReply, error)
	// 领取奖励
	Receive(ctx context.Context, in *ReceiveRequest, opts ...grpc.CallOption) (*ReceiveReply, error)
}

type redPacketClient struct {
	cc grpc.ClientConnInterface
}

func NewRedPacketClient(cc grpc.ClientConnInterface) RedPacketClient {
	return &redPacketClient{cc}
}

func (c *redPacketClient) GetShareConf(ctx context.Context, in *GetShareConfRequest, opts ...grpc.CallOption) (*GetShareConfReply, error) {
	out := new(GetShareConfReply)
	err := c.cc.Invoke(ctx, RedPacket_GetShareConf_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redPacketClient) RedPacketShare(ctx context.Context, in *RedPacketRequest, opts ...grpc.CallOption) (*RedPacketReply, error) {
	out := new(RedPacketReply)
	err := c.cc.Invoke(ctx, RedPacket_RedPacketShare_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *redPacketClient) Receive(ctx context.Context, in *ReceiveRequest, opts ...grpc.CallOption) (*ReceiveReply, error) {
	out := new(ReceiveReply)
	err := c.cc.Invoke(ctx, RedPacket_Receive_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RedPacketServer is the server API for RedPacket service.
// All implementations must embed UnimplementedRedPacketServer
// for forward compatibility
type RedPacketServer interface {
	// 获取配置
	GetShareConf(context.Context, *GetShareConfRequest) (*GetShareConfReply, error)
	// 分享 拆红包
	RedPacketShare(context.Context, *RedPacketRequest) (*RedPacketReply, error)
	// 领取奖励
	Receive(context.Context, *ReceiveRequest) (*ReceiveReply, error)
	mustEmbedUnimplementedRedPacketServer()
}

// UnimplementedRedPacketServer must be embedded to have forward compatible implementations.
type UnimplementedRedPacketServer struct {
}

func (UnimplementedRedPacketServer) GetShareConf(context.Context, *GetShareConfRequest) (*GetShareConfReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetShareConf not implemented")
}
func (UnimplementedRedPacketServer) RedPacketShare(context.Context, *RedPacketRequest) (*RedPacketReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RedPacketShare not implemented")
}
func (UnimplementedRedPacketServer) Receive(context.Context, *ReceiveRequest) (*ReceiveReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Receive not implemented")
}
func (UnimplementedRedPacketServer) mustEmbedUnimplementedRedPacketServer() {}

// UnsafeRedPacketServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RedPacketServer will
// result in compilation errors.
type UnsafeRedPacketServer interface {
	mustEmbedUnimplementedRedPacketServer()
}

func RegisterRedPacketServer(s grpc.ServiceRegistrar, srv RedPacketServer) {
	s.RegisterService(&RedPacket_ServiceDesc, srv)
}

func _RedPacket_GetShareConf_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetShareConfRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedPacketServer).GetShareConf(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RedPacket_GetShareConf_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedPacketServer).GetShareConf(ctx, req.(*GetShareConfRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RedPacket_RedPacketShare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RedPacketRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedPacketServer).RedPacketShare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RedPacket_RedPacketShare_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedPacketServer).RedPacketShare(ctx, req.(*RedPacketRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RedPacket_Receive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReceiveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RedPacketServer).Receive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RedPacket_Receive_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RedPacketServer).Receive(ctx, req.(*ReceiveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RedPacket_ServiceDesc is the grpc.ServiceDesc for RedPacket service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RedPacket_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.activity.v1.RedPacket",
	HandlerType: (*RedPacketServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetShareConf",
			Handler:    _RedPacket_GetShareConf_Handler,
		},
		{
			MethodName: "RedPacketShare",
			Handler:    _RedPacket_RedPacketShare_Handler,
		},
		{
			MethodName: "Receive",
			Handler:    _RedPacket_Receive_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/activity/v1/red_packet.proto",
}
