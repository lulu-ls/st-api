// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: api/activity/v1/bargain.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Bargain_GetBargain_FullMethodName      = "/api.activity.v1.Bargain/GetBargain"
	Bargain_GetProcess_FullMethodName      = "/api.activity.v1.Bargain/GetProcess"
	Bargain_IncreaseProcess_FullMethodName = "/api.activity.v1.Bargain/IncreaseProcess"
	Bargain_GrantAward_FullMethodName      = "/api.activity.v1.Bargain/GrantAward"
)

// BargainClient is the client API for Bargain service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BargainClient interface {
	// 查询进度接口
	GetBargain(ctx context.Context, in *GetBargainRequest, opts ...grpc.CallOption) (*GetBargainReply, error)
	// 点击气泡，领取进度接口
	GetProcess(ctx context.Context, in *GetProcessRequest, opts ...grpc.CallOption) (*GetProcessReply, error)
	// 好友助力接口
	IncreaseProcess(ctx context.Context, in *IncreaseProcessRequest, opts ...grpc.CallOption) (*IncreaseProcessReply, error)
	// 发放奖励
	GrantAward(ctx context.Context, in *GrantAwardRequest, opts ...grpc.CallOption) (*GrantAwardReply, error)
}

type bargainClient struct {
	cc grpc.ClientConnInterface
}

func NewBargainClient(cc grpc.ClientConnInterface) BargainClient {
	return &bargainClient{cc}
}

func (c *bargainClient) GetBargain(ctx context.Context, in *GetBargainRequest, opts ...grpc.CallOption) (*GetBargainReply, error) {
	out := new(GetBargainReply)
	err := c.cc.Invoke(ctx, Bargain_GetBargain_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bargainClient) GetProcess(ctx context.Context, in *GetProcessRequest, opts ...grpc.CallOption) (*GetProcessReply, error) {
	out := new(GetProcessReply)
	err := c.cc.Invoke(ctx, Bargain_GetProcess_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bargainClient) IncreaseProcess(ctx context.Context, in *IncreaseProcessRequest, opts ...grpc.CallOption) (*IncreaseProcessReply, error) {
	out := new(IncreaseProcessReply)
	err := c.cc.Invoke(ctx, Bargain_IncreaseProcess_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bargainClient) GrantAward(ctx context.Context, in *GrantAwardRequest, opts ...grpc.CallOption) (*GrantAwardReply, error) {
	out := new(GrantAwardReply)
	err := c.cc.Invoke(ctx, Bargain_GrantAward_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BargainServer is the server API for Bargain service.
// All implementations must embed UnimplementedBargainServer
// for forward compatibility
type BargainServer interface {
	// 查询进度接口
	GetBargain(context.Context, *GetBargainRequest) (*GetBargainReply, error)
	// 点击气泡，领取进度接口
	GetProcess(context.Context, *GetProcessRequest) (*GetProcessReply, error)
	// 好友助力接口
	IncreaseProcess(context.Context, *IncreaseProcessRequest) (*IncreaseProcessReply, error)
	// 发放奖励
	GrantAward(context.Context, *GrantAwardRequest) (*GrantAwardReply, error)
	mustEmbedUnimplementedBargainServer()
}

// UnimplementedBargainServer must be embedded to have forward compatible implementations.
type UnimplementedBargainServer struct {
}

func (UnimplementedBargainServer) GetBargain(context.Context, *GetBargainRequest) (*GetBargainReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBargain not implemented")
}
func (UnimplementedBargainServer) GetProcess(context.Context, *GetProcessRequest) (*GetProcessReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProcess not implemented")
}
func (UnimplementedBargainServer) IncreaseProcess(context.Context, *IncreaseProcessRequest) (*IncreaseProcessReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncreaseProcess not implemented")
}
func (UnimplementedBargainServer) GrantAward(context.Context, *GrantAwardRequest) (*GrantAwardReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GrantAward not implemented")
}
func (UnimplementedBargainServer) mustEmbedUnimplementedBargainServer() {}

// UnsafeBargainServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BargainServer will
// result in compilation errors.
type UnsafeBargainServer interface {
	mustEmbedUnimplementedBargainServer()
}

func RegisterBargainServer(s grpc.ServiceRegistrar, srv BargainServer) {
	s.RegisterService(&Bargain_ServiceDesc, srv)
}

func _Bargain_GetBargain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetBargainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BargainServer).GetBargain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bargain_GetBargain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BargainServer).GetBargain(ctx, req.(*GetBargainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bargain_GetProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProcessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BargainServer).GetProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bargain_GetProcess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BargainServer).GetProcess(ctx, req.(*GetProcessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bargain_IncreaseProcess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncreaseProcessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BargainServer).IncreaseProcess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bargain_IncreaseProcess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BargainServer).IncreaseProcess(ctx, req.(*IncreaseProcessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bargain_GrantAward_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GrantAwardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BargainServer).GrantAward(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bargain_GrantAward_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BargainServer).GrantAward(ctx, req.(*GrantAwardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Bargain_ServiceDesc is the grpc.ServiceDesc for Bargain service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Bargain_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.activity.v1.Bargain",
	HandlerType: (*BargainServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBargain",
			Handler:    _Bargain_GetBargain_Handler,
		},
		{
			MethodName: "GetProcess",
			Handler:    _Bargain_GetProcess_Handler,
		},
		{
			MethodName: "IncreaseProcess",
			Handler:    _Bargain_IncreaseProcess_Handler,
		},
		{
			MethodName: "GrantAward",
			Handler:    _Bargain_GrantAward_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/activity/v1/bargain.proto",
}
