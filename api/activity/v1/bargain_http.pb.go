// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.1
// - protoc             v4.25.1
// source: api/activity/v1/bargain.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationBargainGetBargain = "/api.activity.v1.Bargain/GetBargain"
const OperationBargainGetProcess = "/api.activity.v1.Bargain/GetProcess"
const OperationBargainGrantAward = "/api.activity.v1.Bargain/GrantAward"
const OperationBargainIncreaseProcess = "/api.activity.v1.Bargain/IncreaseProcess"

type BargainHTTPServer interface {
	// GetBargain 查询进度接口
	GetBargain(context.Context, *GetBargainRequest) (*GetBargainReply, error)
	// GetProcess 点击气泡，领取进度接口
	GetProcess(context.Context, *GetProcessRequest) (*GetProcessReply, error)
	// GrantAward 发放奖励
	GrantAward(context.Context, *GrantAwardRequest) (*GrantAwardReply, error)
	// IncreaseProcess 好友助力接口
	IncreaseProcess(context.Context, *IncreaseProcessRequest) (*IncreaseProcessReply, error)
}

func RegisterBargainHTTPServer(s *http.Server, srv BargainHTTPServer) {
	r := s.Route("/")
	r.POST("/st-games/v1/activity/bargain/detail", _Bargain_GetBargain0_HTTP_Handler(srv))
	r.POST("/st-games/v1/activity/bargain/receive", _Bargain_GetProcess0_HTTP_Handler(srv))
	r.POST("/st-games/v1/activity/bargain/process", _Bargain_IncreaseProcess0_HTTP_Handler(srv))
	r.POST("/st-games/v1/activity/bargain/grant", _Bargain_GrantAward0_HTTP_Handler(srv))
}

func _Bargain_GetBargain0_HTTP_Handler(srv BargainHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetBargainRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBargainGetBargain)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetBargain(ctx, req.(*GetBargainRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetBargainReply)
		return ctx.Result(200, reply)
	}
}

func _Bargain_GetProcess0_HTTP_Handler(srv BargainHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetProcessRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBargainGetProcess)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetProcess(ctx, req.(*GetProcessRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetProcessReply)
		return ctx.Result(200, reply)
	}
}

func _Bargain_IncreaseProcess0_HTTP_Handler(srv BargainHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in IncreaseProcessRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBargainIncreaseProcess)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.IncreaseProcess(ctx, req.(*IncreaseProcessRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*IncreaseProcessReply)
		return ctx.Result(200, reply)
	}
}

func _Bargain_GrantAward0_HTTP_Handler(srv BargainHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GrantAwardRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationBargainGrantAward)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GrantAward(ctx, req.(*GrantAwardRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GrantAwardReply)
		return ctx.Result(200, reply)
	}
}

type BargainHTTPClient interface {
	GetBargain(ctx context.Context, req *GetBargainRequest, opts ...http.CallOption) (rsp *GetBargainReply, err error)
	GetProcess(ctx context.Context, req *GetProcessRequest, opts ...http.CallOption) (rsp *GetProcessReply, err error)
	GrantAward(ctx context.Context, req *GrantAwardRequest, opts ...http.CallOption) (rsp *GrantAwardReply, err error)
	IncreaseProcess(ctx context.Context, req *IncreaseProcessRequest, opts ...http.CallOption) (rsp *IncreaseProcessReply, err error)
}

type BargainHTTPClientImpl struct {
	cc *http.Client
}

func NewBargainHTTPClient(client *http.Client) BargainHTTPClient {
	return &BargainHTTPClientImpl{client}
}

func (c *BargainHTTPClientImpl) GetBargain(ctx context.Context, in *GetBargainRequest, opts ...http.CallOption) (*GetBargainReply, error) {
	var out GetBargainReply
	pattern := "/st-games/v1/activity/bargain/detail"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBargainGetBargain))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BargainHTTPClientImpl) GetProcess(ctx context.Context, in *GetProcessRequest, opts ...http.CallOption) (*GetProcessReply, error) {
	var out GetProcessReply
	pattern := "/st-games/v1/activity/bargain/receive"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBargainGetProcess))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BargainHTTPClientImpl) GrantAward(ctx context.Context, in *GrantAwardRequest, opts ...http.CallOption) (*GrantAwardReply, error) {
	var out GrantAwardReply
	pattern := "/st-games/v1/activity/bargain/grant"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBargainGrantAward))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *BargainHTTPClientImpl) IncreaseProcess(ctx context.Context, in *IncreaseProcessRequest, opts ...http.CallOption) (*IncreaseProcessReply, error) {
	var out IncreaseProcessReply
	pattern := "/st-games/v1/activity/bargain/process"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationBargainIncreaseProcess))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
