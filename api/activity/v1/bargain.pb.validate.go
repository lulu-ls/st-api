// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: activity/v1/bargain.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetBargainRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetBargainRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBargainRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBargainRequestMultiError, or nil if none found.
func (m *GetBargainRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBargainRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AppId

	// no validation rules for ChannelId

	// no validation rules for UserId

	if len(errors) > 0 {
		return GetBargainRequestMultiError(errors)
	}

	return nil
}

// GetBargainRequestMultiError is an error wrapping multiple validation errors
// returned by GetBargainRequest.ValidateAll() if the designated constraints
// aren't met.
type GetBargainRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBargainRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBargainRequestMultiError) AllErrors() []error { return m }

// GetBargainRequestValidationError is the validation error returned by
// GetBargainRequest.Validate if the designated constraints aren't met.
type GetBargainRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBargainRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBargainRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBargainRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBargainRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBargainRequestValidationError) ErrorName() string {
	return "GetBargainRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetBargainRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBargainRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBargainRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBargainRequestValidationError{}

// Validate checks the field values on GetBargainReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetBargainReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetBargainReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetBargainReplyMultiError, or nil if none found.
func (m *GetBargainReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetBargainReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BargainId

	// no validation rules for Name

	// no validation rules for Title

	// no validation rules for Image

	// no validation rules for Process

	// no validation rules for Status

	for idx, item := range m.GetHistoryList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetBargainReplyValidationError{
						field:  fmt.Sprintf("HistoryList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetBargainReplyValidationError{
						field:  fmt.Sprintf("HistoryList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetBargainReplyValidationError{
					field:  fmt.Sprintf("HistoryList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetBubbleList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetBargainReplyValidationError{
						field:  fmt.Sprintf("BubbleList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetBargainReplyValidationError{
						field:  fmt.Sprintf("BubbleList[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetBargainReplyValidationError{
					field:  fmt.Sprintf("BubbleList[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for IsOpen

	if len(errors) > 0 {
		return GetBargainReplyMultiError(errors)
	}

	return nil
}

// GetBargainReplyMultiError is an error wrapping multiple validation errors
// returned by GetBargainReply.ValidateAll() if the designated constraints
// aren't met.
type GetBargainReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetBargainReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetBargainReplyMultiError) AllErrors() []error { return m }

// GetBargainReplyValidationError is the validation error returned by
// GetBargainReply.Validate if the designated constraints aren't met.
type GetBargainReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetBargainReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetBargainReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetBargainReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetBargainReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetBargainReplyValidationError) ErrorName() string { return "GetBargainReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetBargainReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetBargainReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetBargainReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetBargainReplyValidationError{}

// Validate checks the field values on BubbleItem with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BubbleItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BubbleItem with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BubbleItemMultiError, or
// nil if none found.
func (m *BubbleItem) ValidateAll() error {
	return m.validate(true)
}

func (m *BubbleItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Nickname

	// no validation rules for Avatar

	if len(errors) > 0 {
		return BubbleItemMultiError(errors)
	}

	return nil
}

// BubbleItemMultiError is an error wrapping multiple validation errors
// returned by BubbleItem.ValidateAll() if the designated constraints aren't met.
type BubbleItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BubbleItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BubbleItemMultiError) AllErrors() []error { return m }

// BubbleItemValidationError is the validation error returned by
// BubbleItem.Validate if the designated constraints aren't met.
type BubbleItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BubbleItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BubbleItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BubbleItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BubbleItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BubbleItemValidationError) ErrorName() string { return "BubbleItemValidationError" }

// Error satisfies the builtin error interface
func (e BubbleItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBubbleItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BubbleItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BubbleItemValidationError{}

// Validate checks the field values on HistoryItem with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *HistoryItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HistoryItem with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in HistoryItemMultiError, or
// nil if none found.
func (m *HistoryItem) ValidateAll() error {
	return m.validate(true)
}

func (m *HistoryItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Nickname

	// no validation rules for Text

	if len(errors) > 0 {
		return HistoryItemMultiError(errors)
	}

	return nil
}

// HistoryItemMultiError is an error wrapping multiple validation errors
// returned by HistoryItem.ValidateAll() if the designated constraints aren't met.
type HistoryItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HistoryItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HistoryItemMultiError) AllErrors() []error { return m }

// HistoryItemValidationError is the validation error returned by
// HistoryItem.Validate if the designated constraints aren't met.
type HistoryItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HistoryItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HistoryItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HistoryItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HistoryItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HistoryItemValidationError) ErrorName() string { return "HistoryItemValidationError" }

// Error satisfies the builtin error interface
func (e HistoryItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHistoryItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HistoryItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HistoryItemValidationError{}

// Validate checks the field values on GetProcessRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetProcessRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProcessRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProcessRequestMultiError, or nil if none found.
func (m *GetProcessRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProcessRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AppId

	// no validation rules for ChannelId

	// no validation rules for UserId

	if m.GetId() <= 0 {
		err := GetProcessRequestValidationError{
			field:  "Id",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetProcessRequestMultiError(errors)
	}

	return nil
}

// GetProcessRequestMultiError is an error wrapping multiple validation errors
// returned by GetProcessRequest.ValidateAll() if the designated constraints
// aren't met.
type GetProcessRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProcessRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProcessRequestMultiError) AllErrors() []error { return m }

// GetProcessRequestValidationError is the validation error returned by
// GetProcessRequest.Validate if the designated constraints aren't met.
type GetProcessRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProcessRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProcessRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProcessRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProcessRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProcessRequestValidationError) ErrorName() string {
	return "GetProcessRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetProcessRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProcessRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProcessRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProcessRequestValidationError{}

// Validate checks the field values on GetProcessReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetProcessReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProcessReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProcessReplyMultiError, or nil if none found.
func (m *GetProcessReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProcessReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Add

	// no validation rules for Process

	if len(errors) > 0 {
		return GetProcessReplyMultiError(errors)
	}

	return nil
}

// GetProcessReplyMultiError is an error wrapping multiple validation errors
// returned by GetProcessReply.ValidateAll() if the designated constraints
// aren't met.
type GetProcessReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProcessReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProcessReplyMultiError) AllErrors() []error { return m }

// GetProcessReplyValidationError is the validation error returned by
// GetProcessReply.Validate if the designated constraints aren't met.
type GetProcessReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProcessReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProcessReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProcessReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProcessReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProcessReplyValidationError) ErrorName() string { return "GetProcessReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetProcessReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProcessReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProcessReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProcessReplyValidationError{}

// Validate checks the field values on IncreaseProcessRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IncreaseProcessRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IncreaseProcessRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IncreaseProcessRequestMultiError, or nil if none found.
func (m *IncreaseProcessRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *IncreaseProcessRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AppId

	// no validation rules for ChannelId

	// no validation rules for UserId

	if m.GetBargainId() <= 0 {
		err := IncreaseProcessRequestValidationError{
			field:  "BargainId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _IncreaseProcessRequest_Type_InLookup[m.GetType()]; !ok {
		err := IncreaseProcessRequestValidationError{
			field:  "Type",
			reason: "value must be in list [Video OldUser NewUser]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return IncreaseProcessRequestMultiError(errors)
	}

	return nil
}

// IncreaseProcessRequestMultiError is an error wrapping multiple validation
// errors returned by IncreaseProcessRequest.ValidateAll() if the designated
// constraints aren't met.
type IncreaseProcessRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IncreaseProcessRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IncreaseProcessRequestMultiError) AllErrors() []error { return m }

// IncreaseProcessRequestValidationError is the validation error returned by
// IncreaseProcessRequest.Validate if the designated constraints aren't met.
type IncreaseProcessRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IncreaseProcessRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IncreaseProcessRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IncreaseProcessRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IncreaseProcessRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IncreaseProcessRequestValidationError) ErrorName() string {
	return "IncreaseProcessRequestValidationError"
}

// Error satisfies the builtin error interface
func (e IncreaseProcessRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIncreaseProcessRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IncreaseProcessRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IncreaseProcessRequestValidationError{}

var _IncreaseProcessRequest_Type_InLookup = map[BargainHistoryType]struct{}{
	1: {},
	2: {},
	3: {},
}

// Validate checks the field values on IncreaseProcessReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *IncreaseProcessReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IncreaseProcessReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// IncreaseProcessReplyMultiError, or nil if none found.
func (m *IncreaseProcessReply) ValidateAll() error {
	return m.validate(true)
}

func (m *IncreaseProcessReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Add

	// no validation rules for Process

	if len(errors) > 0 {
		return IncreaseProcessReplyMultiError(errors)
	}

	return nil
}

// IncreaseProcessReplyMultiError is an error wrapping multiple validation
// errors returned by IncreaseProcessReply.ValidateAll() if the designated
// constraints aren't met.
type IncreaseProcessReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IncreaseProcessReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IncreaseProcessReplyMultiError) AllErrors() []error { return m }

// IncreaseProcessReplyValidationError is the validation error returned by
// IncreaseProcessReply.Validate if the designated constraints aren't met.
type IncreaseProcessReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IncreaseProcessReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IncreaseProcessReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IncreaseProcessReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IncreaseProcessReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IncreaseProcessReplyValidationError) ErrorName() string {
	return "IncreaseProcessReplyValidationError"
}

// Error satisfies the builtin error interface
func (e IncreaseProcessReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIncreaseProcessReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IncreaseProcessReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IncreaseProcessReplyValidationError{}

// Validate checks the field values on GrantAwardRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GrantAwardRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GrantAwardRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GrantAwardRequestMultiError, or nil if none found.
func (m *GrantAwardRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GrantAwardRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AppId

	// no validation rules for ChannelId

	// no validation rules for UserId

	if m.GetBargainId() <= 0 {
		err := GrantAwardRequestValidationError{
			field:  "BargainId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GrantAwardRequestMultiError(errors)
	}

	return nil
}

// GrantAwardRequestMultiError is an error wrapping multiple validation errors
// returned by GrantAwardRequest.ValidateAll() if the designated constraints
// aren't met.
type GrantAwardRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GrantAwardRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GrantAwardRequestMultiError) AllErrors() []error { return m }

// GrantAwardRequestValidationError is the validation error returned by
// GrantAwardRequest.Validate if the designated constraints aren't met.
type GrantAwardRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GrantAwardRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GrantAwardRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GrantAwardRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GrantAwardRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GrantAwardRequestValidationError) ErrorName() string {
	return "GrantAwardRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GrantAwardRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGrantAwardRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GrantAwardRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GrantAwardRequestValidationError{}

// Validate checks the field values on GrantAwardReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GrantAwardReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GrantAwardReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GrantAwardReplyMultiError, or nil if none found.
func (m *GrantAwardReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GrantAwardReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GrantAwardReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GrantAwardReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GrantAwardReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GrantAwardReplyMultiError(errors)
	}

	return nil
}

// GrantAwardReplyMultiError is an error wrapping multiple validation errors
// returned by GrantAwardReply.ValidateAll() if the designated constraints
// aren't met.
type GrantAwardReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GrantAwardReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GrantAwardReplyMultiError) AllErrors() []error { return m }

// GrantAwardReplyValidationError is the validation error returned by
// GrantAwardReply.Validate if the designated constraints aren't met.
type GrantAwardReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GrantAwardReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GrantAwardReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GrantAwardReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GrantAwardReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GrantAwardReplyValidationError) ErrorName() string { return "GrantAwardReplyValidationError" }

// Error satisfies the builtin error interface
func (e GrantAwardReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGrantAwardReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GrantAwardReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GrantAwardReplyValidationError{}

// Validate checks the field values on GrantAwardItem with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GrantAwardItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GrantAwardItem with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GrantAwardItemMultiError,
// or nil if none found.
func (m *GrantAwardItem) ValidateAll() error {
	return m.validate(true)
}

func (m *GrantAwardItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ItemId

	// no validation rules for Name

	// no validation rules for Image

	// no validation rules for Quantity

	if len(errors) > 0 {
		return GrantAwardItemMultiError(errors)
	}

	return nil
}

// GrantAwardItemMultiError is an error wrapping multiple validation errors
// returned by GrantAwardItem.ValidateAll() if the designated constraints
// aren't met.
type GrantAwardItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GrantAwardItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GrantAwardItemMultiError) AllErrors() []error { return m }

// GrantAwardItemValidationError is the validation error returned by
// GrantAwardItem.Validate if the designated constraints aren't met.
type GrantAwardItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GrantAwardItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GrantAwardItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GrantAwardItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GrantAwardItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GrantAwardItemValidationError) ErrorName() string { return "GrantAwardItemValidationError" }

// Error satisfies the builtin error interface
func (e GrantAwardItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGrantAwardItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GrantAwardItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GrantAwardItemValidationError{}
