// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.1
// - protoc             v4.24.4
// source: api/activity/v1/red_packet.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationRedPacketGetShareConf = "/api.activity.v1.RedPacket/GetShareConf"
const OperationRedPacketReceive = "/api.activity.v1.RedPacket/Receive"
const OperationRedPacketRedPacketShare = "/api.activity.v1.RedPacket/RedPacketShare"

type RedPacketHTTPServer interface {
	// GetShareConf 获取配置
	GetShareConf(context.Context, *GetShareConfRequest) (*GetShareConfReply, error)
	// Receive领取奖励
	Receive(context.Context, *ReceiveRequest) (*ReceiveReply, error)
	// RedPacketShare 分享 拆红包
	RedPacketShare(context.Context, *RedPacketRequest) (*RedPacketReply, error)
}

func RegisterRedPacketHTTPServer(s *http.Server, srv RedPacketHTTPServer) {
	r := s.Route("/")
	r.POST("/st-games/v1/activity/red_packet/share_config/detail", _RedPacket_GetShareConf0_HTTP_Handler(srv))
	r.POST("/st-games/v1/activity/red_packet/share", _RedPacket_RedPacketShare0_HTTP_Handler(srv))
	r.POST("/st-games/v1/activity/red_packet/receive", _RedPacket_Receive0_HTTP_Handler(srv))
}

func _RedPacket_GetShareConf0_HTTP_Handler(srv RedPacketHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetShareConfRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRedPacketGetShareConf)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetShareConf(ctx, req.(*GetShareConfRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetShareConfReply)
		return ctx.Result(200, reply)
	}
}

func _RedPacket_RedPacketShare0_HTTP_Handler(srv RedPacketHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in RedPacketRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRedPacketRedPacketShare)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.RedPacketShare(ctx, req.(*RedPacketRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*RedPacketReply)
		return ctx.Result(200, reply)
	}
}

func _RedPacket_Receive0_HTTP_Handler(srv RedPacketHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ReceiveRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationRedPacketReceive)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Receive(ctx, req.(*ReceiveRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ReceiveReply)
		return ctx.Result(200, reply)
	}
}

type RedPacketHTTPClient interface {
	GetShareConf(ctx context.Context, req *GetShareConfRequest, opts ...http.CallOption) (rsp *GetShareConfReply, err error)
	Receive(ctx context.Context, req *ReceiveRequest, opts ...http.CallOption) (rsp *ReceiveReply, err error)
	RedPacketShare(ctx context.Context, req *RedPacketRequest, opts ...http.CallOption) (rsp *RedPacketReply, err error)
}

type RedPacketHTTPClientImpl struct {
	cc *http.Client
}

func NewRedPacketHTTPClient(client *http.Client) RedPacketHTTPClient {
	return &RedPacketHTTPClientImpl{client}
}

func (c *RedPacketHTTPClientImpl) GetShareConf(ctx context.Context, in *GetShareConfRequest, opts ...http.CallOption) (*GetShareConfReply, error) {
	var out GetShareConfReply
	pattern := "/st-games/v1/activity/red_packet/share_config/detail"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRedPacketGetShareConf))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *RedPacketHTTPClientImpl) Receive(ctx context.Context, in *ReceiveRequest, opts ...http.CallOption) (*ReceiveReply, error) {
	var out ReceiveReply
	pattern := "/st-games/v1/activity/red_packet/receive"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRedPacketReceive))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *RedPacketHTTPClientImpl) RedPacketShare(ctx context.Context, in *RedPacketRequest, opts ...http.CallOption) (*RedPacketReply, error) {
	var out RedPacketReply
	pattern := "/st-games/v1/activity/red_packet/share"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationRedPacketRedPacketShare))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
