// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.31.0
// 	protoc        v4.24.4
// source: ware/v1/ware.proto

package v1

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	v1 "github.com/lulu-ls/st-api/api/common/v1"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ExchangeStatus int32

const (
	ExchangeStatus__         ExchangeStatus = 0 // 1=待发货，2=已发货，3=已完成，4=发货失败，5=已取消
	ExchangeStatus_WAIT      ExchangeStatus = 1
	ExchangeStatus_SEND      ExchangeStatus = 2
	ExchangeStatus_SUCCESS   ExchangeStatus = 3
	ExchangeStatus_SEND_FAIL ExchangeStatus = 4
	ExchangeStatus_CANCEL    ExchangeStatus = 6
)

// Enum value maps for ExchangeStatus.
var (
	ExchangeStatus_name = map[int32]string{
		0: "_",
		1: "WAIT",
		2: "SEND",
		3: "SUCCESS",
		4: "SEND_FAIL",
		6: "CANCEL",
	}
	ExchangeStatus_value = map[string]int32{
		"_":         0,
		"WAIT":      1,
		"SEND":      2,
		"SUCCESS":   3,
		"SEND_FAIL": 4,
		"CANCEL":    6,
	}
)

func (x ExchangeStatus) Enum() *ExchangeStatus {
	p := new(ExchangeStatus)
	*p = x
	return p
}

func (x ExchangeStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ExchangeStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_ware_v1_ware_proto_enumTypes[0].Descriptor()
}

func (ExchangeStatus) Type() protoreflect.EnumType {
	return &file_ware_v1_ware_proto_enumTypes[0]
}

func (x ExchangeStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ExchangeStatus.Descriptor instead.
func (ExchangeStatus) EnumDescriptor() ([]byte, []int) {
	return file_ware_v1_ware_proto_rawDescGZIP(), []int{0}
}

type PhoneType int32

const (
	PhoneType__1       PhoneType = 0
	PhoneType_YiDong   PhoneType = 1
	PhoneType_LianTong PhoneType = 2
	PhoneType_DianXin  PhoneType = 3
)

// Enum value maps for PhoneType.
var (
	PhoneType_name = map[int32]string{
		0: "_1",
		1: "YiDong",
		2: "LianTong",
		3: "DianXin",
	}
	PhoneType_value = map[string]int32{
		"_1":       0,
		"YiDong":   1,
		"LianTong": 2,
		"DianXin":  3,
	}
)

func (x PhoneType) Enum() *PhoneType {
	p := new(PhoneType)
	*p = x
	return p
}

func (x PhoneType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PhoneType) Descriptor() protoreflect.EnumDescriptor {
	return file_ware_v1_ware_proto_enumTypes[1].Descriptor()
}

func (PhoneType) Type() protoreflect.EnumType {
	return &file_ware_v1_ware_proto_enumTypes[1]
}

func (x PhoneType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PhoneType.Descriptor instead.
func (PhoneType) EnumDescriptor() ([]byte, []int) {
	return file_ware_v1_ware_proto_rawDescGZIP(), []int{1}
}

type GetWareRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WareId int32 `protobuf:"varint,1,opt,name=ware_id,json=wareId,proto3" json:"ware_id,omitempty"`
}

func (x *GetWareRequest) Reset() {
	*x = GetWareRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ware_v1_ware_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWareRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWareRequest) ProtoMessage() {}

func (x *GetWareRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ware_v1_ware_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWareRequest.ProtoReflect.Descriptor instead.
func (*GetWareRequest) Descriptor() ([]byte, []int) {
	return file_ware_v1_ware_proto_rawDescGZIP(), []int{0}
}

func (x *GetWareRequest) GetWareId() int32 {
	if x != nil {
		return x.WareId
	}
	return 0
}

type GetWareReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WareId               int32   `protobuf:"varint,1,opt,name=ware_id,json=wareId,proto3" json:"ware_id,omitempty"`                                             // 商品 id
	Name                 string  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                                                // 商品名称
	Image                string  `protobuf:"bytes,3,opt,name=image,proto3" json:"image,omitempty"`                                                              // 商品图片
	ExternalUrl          string  `protobuf:"bytes,4,opt,name=external_url,json=externalUrl,proto3" json:"external_url,omitempty"`                               // 封面图
	Information          string  `protobuf:"bytes,5,opt,name=information,proto3" json:"information,omitempty"`                                                  // 介绍
	Price                float64 `protobuf:"fixed64,6,opt,name=price,proto3" json:"price,omitempty"`                                                            // 价格
	Point                int32   `protobuf:"varint,7,opt,name=point,proto3" json:"point,omitempty"`                                                             // 积分
	SettlePrice          float64 `protobuf:"fixed64,9,opt,name=settle_price,json=settlePrice,proto3" json:"settle_price,omitempty"`                             // 结算价
	ExchangeItemId       int32   `protobuf:"varint,10,opt,name=exchange_item_id,json=exchangeItemId,proto3" json:"exchange_item_id,omitempty"`                  // 兑换的商品 id
	ExchangeItemName     string  `protobuf:"bytes,11,opt,name=exchange_item_name,json=exchangeItemName,proto3" json:"exchange_item_name,omitempty"`             // 兑换的商品名称
	ExchangeItemQuantity string  `protobuf:"bytes,12,opt,name=exchange_item_quantity,json=exchangeItemQuantity,proto3" json:"exchange_item_quantity,omitempty"` // 兑换物品需要的数量
	ExchangeItemImage    string  `protobuf:"bytes,13,opt,name=exchange_item_image,json=exchangeItemImage,proto3" json:"exchange_item_image,omitempty"`          // 兑换物品图片
}

func (x *GetWareReply) Reset() {
	*x = GetWareReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ware_v1_ware_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetWareReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetWareReply) ProtoMessage() {}

func (x *GetWareReply) ProtoReflect() protoreflect.Message {
	mi := &file_ware_v1_ware_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetWareReply.ProtoReflect.Descriptor instead.
func (*GetWareReply) Descriptor() ([]byte, []int) {
	return file_ware_v1_ware_proto_rawDescGZIP(), []int{1}
}

func (x *GetWareReply) GetWareId() int32 {
	if x != nil {
		return x.WareId
	}
	return 0
}

func (x *GetWareReply) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetWareReply) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *GetWareReply) GetExternalUrl() string {
	if x != nil {
		return x.ExternalUrl
	}
	return ""
}

func (x *GetWareReply) GetInformation() string {
	if x != nil {
		return x.Information
	}
	return ""
}

func (x *GetWareReply) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *GetWareReply) GetPoint() int32 {
	if x != nil {
		return x.Point
	}
	return 0
}

func (x *GetWareReply) GetSettlePrice() float64 {
	if x != nil {
		return x.SettlePrice
	}
	return 0
}

func (x *GetWareReply) GetExchangeItemId() int32 {
	if x != nil {
		return x.ExchangeItemId
	}
	return 0
}

func (x *GetWareReply) GetExchangeItemName() string {
	if x != nil {
		return x.ExchangeItemName
	}
	return ""
}

func (x *GetWareReply) GetExchangeItemQuantity() string {
	if x != nil {
		return x.ExchangeItemQuantity
	}
	return ""
}

func (x *GetWareReply) GetExchangeItemImage() string {
	if x != nil {
		return x.ExchangeItemImage
	}
	return ""
}

type ListWareRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Page           *v1.Paginate `protobuf:"bytes,1,opt,name=page,proto3" json:"page,omitempty"`                                              // 分页
	AppId          int32        `protobuf:"varint,2,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`                              // app id
	WareId         []int32      `protobuf:"varint,3,rep,packed,name=ware_id,json=wareId,proto3" json:"ware_id,omitempty"`                    // 商品 id
	WareType       []int32      `protobuf:"varint,4,rep,packed,name=ware_type,json=wareType,proto3" json:"ware_type,omitempty"`              // 商品类型 1:实物商品 2:电子卡券 3:外部商品
	Name           string       `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`                                              // 名称 模糊匹配
	WareCategoryId int32        `protobuf:"varint,6,opt,name=ware_category_id,json=wareCategoryId,proto3" json:"ware_category_id,omitempty"` // 商品类别 id
	ItemIds        []int32      `protobuf:"varint,7,rep,packed,name=item_ids,json=itemIds,proto3" json:"item_ids,omitempty"`                 // 可兑换道具配置 id
}

func (x *ListWareRequest) Reset() {
	*x = ListWareRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ware_v1_ware_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWareRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWareRequest) ProtoMessage() {}

func (x *ListWareRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ware_v1_ware_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWareRequest.ProtoReflect.Descriptor instead.
func (*ListWareRequest) Descriptor() ([]byte, []int) {
	return file_ware_v1_ware_proto_rawDescGZIP(), []int{2}
}

func (x *ListWareRequest) GetPage() *v1.Paginate {
	if x != nil {
		return x.Page
	}
	return nil
}

func (x *ListWareRequest) GetAppId() int32 {
	if x != nil {
		return x.AppId
	}
	return 0
}

func (x *ListWareRequest) GetWareId() []int32 {
	if x != nil {
		return x.WareId
	}
	return nil
}

func (x *ListWareRequest) GetWareType() []int32 {
	if x != nil {
		return x.WareType
	}
	return nil
}

func (x *ListWareRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListWareRequest) GetWareCategoryId() int32 {
	if x != nil {
		return x.WareCategoryId
	}
	return 0
}

func (x *ListWareRequest) GetItemIds() []int32 {
	if x != nil {
		return x.ItemIds
	}
	return nil
}

type ListWareReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List  []*ListWareItem `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`    // 商品列表
	Total int32           `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"` // 合计
}

func (x *ListWareReply) Reset() {
	*x = ListWareReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ware_v1_ware_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWareReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWareReply) ProtoMessage() {}

func (x *ListWareReply) ProtoReflect() protoreflect.Message {
	mi := &file_ware_v1_ware_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWareReply.ProtoReflect.Descriptor instead.
func (*ListWareReply) Descriptor() ([]byte, []int) {
	return file_ware_v1_ware_proto_rawDescGZIP(), []int{3}
}

func (x *ListWareReply) GetList() []*ListWareItem {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *ListWareReply) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type ListWareItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WareId           int32           `protobuf:"varint,1,opt,name=ware_id,json=wareId,proto3" json:"ware_id,omitempty"`                                // 商品 id
	WareType         int32           `protobuf:"varint,2,opt,name=ware_type,json=wareType,proto3" json:"ware_type,omitempty"`                          // 商品类型 1:实物商品 2:电子卡券 3:外部商品
	WareTypeName     string          `protobuf:"bytes,3,opt,name=ware_type_name,json=wareTypeName,proto3" json:"ware_type_name,omitempty"`             // 商品类型名称
	WareCategoryId   int32           `protobuf:"varint,4,opt,name=ware_category_id,json=wareCategoryId,proto3" json:"ware_category_id,omitempty"`      // 商品类型 id
	WareCategoryName string          `protobuf:"bytes,5,opt,name=ware_category_name,json=wareCategoryName,proto3" json:"ware_category_name,omitempty"` // 商品类型 名称
	Name             string          `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`                                                   // 商品名称
	Image            string          `protobuf:"bytes,7,opt,name=image,proto3" json:"image,omitempty"`                                                 // 商品图片
	ExternalUrl      string          `protobuf:"bytes,8,opt,name=external_url,json=externalUrl,proto3" json:"external_url,omitempty"`                  // 封面图
	Information      string          `protobuf:"bytes,9,opt,name=information,proto3" json:"information,omitempty"`                                     // 介绍
	Price            float64         `protobuf:"fixed64,10,opt,name=price,proto3" json:"price,omitempty"`                                              // 价格
	Point            int32           `protobuf:"varint,11,opt,name=point,proto3" json:"point,omitempty"`                                               // 积分
	SettlePrice      float64         `protobuf:"fixed64,12,opt,name=settle_price,json=settlePrice,proto3" json:"settle_price,omitempty"`               // 结算价
	ExchangeItem     []*ExchangeItem `protobuf:"bytes,13,rep,name=exchange_item,json=exchangeItem,proto3" json:"exchange_item,omitempty"`              // 兑换配置
}

func (x *ListWareItem) Reset() {
	*x = ListWareItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ware_v1_ware_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListWareItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListWareItem) ProtoMessage() {}

func (x *ListWareItem) ProtoReflect() protoreflect.Message {
	mi := &file_ware_v1_ware_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListWareItem.ProtoReflect.Descriptor instead.
func (*ListWareItem) Descriptor() ([]byte, []int) {
	return file_ware_v1_ware_proto_rawDescGZIP(), []int{4}
}

func (x *ListWareItem) GetWareId() int32 {
	if x != nil {
		return x.WareId
	}
	return 0
}

func (x *ListWareItem) GetWareType() int32 {
	if x != nil {
		return x.WareType
	}
	return 0
}

func (x *ListWareItem) GetWareTypeName() string {
	if x != nil {
		return x.WareTypeName
	}
	return ""
}

func (x *ListWareItem) GetWareCategoryId() int32 {
	if x != nil {
		return x.WareCategoryId
	}
	return 0
}

func (x *ListWareItem) GetWareCategoryName() string {
	if x != nil {
		return x.WareCategoryName
	}
	return ""
}

func (x *ListWareItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ListWareItem) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *ListWareItem) GetExternalUrl() string {
	if x != nil {
		return x.ExternalUrl
	}
	return ""
}

func (x *ListWareItem) GetInformation() string {
	if x != nil {
		return x.Information
	}
	return ""
}

func (x *ListWareItem) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *ListWareItem) GetPoint() int32 {
	if x != nil {
		return x.Point
	}
	return 0
}

func (x *ListWareItem) GetSettlePrice() float64 {
	if x != nil {
		return x.SettlePrice
	}
	return 0
}

func (x *ListWareItem) GetExchangeItem() []*ExchangeItem {
	if x != nil {
		return x.ExchangeItem
	}
	return nil
}

type ExchangeItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WareId             int32  `protobuf:"varint,1,opt,name=ware_id,json=wareId,proto3" json:"ware_id,omitempty"`                                         // 兑换的商品 id
	ItemId             int32  `protobuf:"varint,2,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`                                         // 兑换的道具 id
	ItemName           string `protobuf:"bytes,3,opt,name=item_name,json=itemName,proto3" json:"item_name,omitempty"`                                    // 兑换的道具名称
	ItemImage          string `protobuf:"bytes,4,opt,name=item_image,json=itemImage,proto3" json:"item_image,omitempty"`                                 // 兑换的道具图片
	ItemQuantity       int32  `protobuf:"varint,5,opt,name=item_quantity,json=itemQuantity,proto3" json:"item_quantity,omitempty"`                       // 兑换物品需要的数量
	ItemExchangeWareId int32  `protobuf:"varint,6,opt,name=item_exchange_ware_id,json=itemExchangeWareId,proto3" json:"item_exchange_ware_id,omitempty"` // 兑换的配置 id
}

func (x *ExchangeItem) Reset() {
	*x = ExchangeItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ware_v1_ware_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeItem) ProtoMessage() {}

func (x *ExchangeItem) ProtoReflect() protoreflect.Message {
	mi := &file_ware_v1_ware_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeItem.ProtoReflect.Descriptor instead.
func (*ExchangeItem) Descriptor() ([]byte, []int) {
	return file_ware_v1_ware_proto_rawDescGZIP(), []int{5}
}

func (x *ExchangeItem) GetWareId() int32 {
	if x != nil {
		return x.WareId
	}
	return 0
}

func (x *ExchangeItem) GetItemId() int32 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *ExchangeItem) GetItemName() string {
	if x != nil {
		return x.ItemName
	}
	return ""
}

func (x *ExchangeItem) GetItemImage() string {
	if x != nil {
		return x.ItemImage
	}
	return ""
}

func (x *ExchangeItem) GetItemQuantity() int32 {
	if x != nil {
		return x.ItemQuantity
	}
	return 0
}

func (x *ExchangeItem) GetItemExchangeWareId() int32 {
	if x != nil {
		return x.ItemExchangeWareId
	}
	return 0
}

type ExchangeVirtualRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId              int32     `protobuf:"varint,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`                                            // app id
	ChannelId          int32     `protobuf:"varint,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`                                // channel id
	UserId             int64     `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                         // 用户 id
	ItemExchangeWareId int32     `protobuf:"varint,4,opt,name=item_exchange_ware_id,json=itemExchangeWareId,proto3" json:"item_exchange_ware_id,omitempty"` // 商品 id
	PhoneType          PhoneType `protobuf:"varint,5,opt,name=phone_type,json=phoneType,proto3,enum=api.ware.v1.PhoneType" json:"phone_type,omitempty"`     // 手机号类型 1：电信 2：联通 3：移动  [(validate.rules).int32 = {in: [1,2,3]}]
	Phone              string    `protobuf:"bytes,6,opt,name=phone,proto3" json:"phone,omitempty"`                                                          // 手机号
}

func (x *ExchangeVirtualRequest) Reset() {
	*x = ExchangeVirtualRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ware_v1_ware_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeVirtualRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeVirtualRequest) ProtoMessage() {}

func (x *ExchangeVirtualRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ware_v1_ware_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeVirtualRequest.ProtoReflect.Descriptor instead.
func (*ExchangeVirtualRequest) Descriptor() ([]byte, []int) {
	return file_ware_v1_ware_proto_rawDescGZIP(), []int{6}
}

func (x *ExchangeVirtualRequest) GetAppId() int32 {
	if x != nil {
		return x.AppId
	}
	return 0
}

func (x *ExchangeVirtualRequest) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ExchangeVirtualRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ExchangeVirtualRequest) GetItemExchangeWareId() int32 {
	if x != nil {
		return x.ItemExchangeWareId
	}
	return 0
}

func (x *ExchangeVirtualRequest) GetPhoneType() PhoneType {
	if x != nil {
		return x.PhoneType
	}
	return PhoneType__1
}

func (x *ExchangeVirtualRequest) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

type ExchangeVirtualReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ExchangeVirtualReply) Reset() {
	*x = ExchangeVirtualReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ware_v1_ware_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeVirtualReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeVirtualReply) ProtoMessage() {}

func (x *ExchangeVirtualReply) ProtoReflect() protoreflect.Message {
	mi := &file_ware_v1_ware_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeVirtualReply.ProtoReflect.Descriptor instead.
func (*ExchangeVirtualReply) Descriptor() ([]byte, []int) {
	return file_ware_v1_ware_proto_rawDescGZIP(), []int{7}
}

type ExchangeMatterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId              int32  `protobuf:"varint,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`                                            // app id
	ChannelId          int32  `protobuf:"varint,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`                                // channel id
	UserId             int64  `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`                                         // 用户 id
	ItemExchangeWareId int32  `protobuf:"varint,4,opt,name=item_exchange_ware_id,json=itemExchangeWareId,proto3" json:"item_exchange_ware_id,omitempty"` // 商品 id
	Phone              string `protobuf:"bytes,6,opt,name=phone,proto3" json:"phone,omitempty"`                                                          // 手机号
	Name               string `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`                                                            // 姓名
	Address            string `protobuf:"bytes,8,opt,name=address,proto3" json:"address,omitempty"`                                                      // 地址
}

func (x *ExchangeMatterRequest) Reset() {
	*x = ExchangeMatterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ware_v1_ware_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeMatterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeMatterRequest) ProtoMessage() {}

func (x *ExchangeMatterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ware_v1_ware_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeMatterRequest.ProtoReflect.Descriptor instead.
func (*ExchangeMatterRequest) Descriptor() ([]byte, []int) {
	return file_ware_v1_ware_proto_rawDescGZIP(), []int{8}
}

func (x *ExchangeMatterRequest) GetAppId() int32 {
	if x != nil {
		return x.AppId
	}
	return 0
}

func (x *ExchangeMatterRequest) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ExchangeMatterRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ExchangeMatterRequest) GetItemExchangeWareId() int32 {
	if x != nil {
		return x.ItemExchangeWareId
	}
	return 0
}

func (x *ExchangeMatterRequest) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *ExchangeMatterRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ExchangeMatterRequest) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type ExchangeMatterReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ExchangeMatterReply) Reset() {
	*x = ExchangeMatterReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ware_v1_ware_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeMatterReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeMatterReply) ProtoMessage() {}

func (x *ExchangeMatterReply) ProtoReflect() protoreflect.Message {
	mi := &file_ware_v1_ware_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeMatterReply.ProtoReflect.Descriptor instead.
func (*ExchangeMatterReply) Descriptor() ([]byte, []int) {
	return file_ware_v1_ware_proto_rawDescGZIP(), []int{9}
}

type CategoryWareRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId int32 `protobuf:"varint,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"` // app id
}

func (x *CategoryWareRequest) Reset() {
	*x = CategoryWareRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ware_v1_ware_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CategoryWareRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategoryWareRequest) ProtoMessage() {}

func (x *CategoryWareRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ware_v1_ware_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategoryWareRequest.ProtoReflect.Descriptor instead.
func (*CategoryWareRequest) Descriptor() ([]byte, []int) {
	return file_ware_v1_ware_proto_rawDescGZIP(), []int{10}
}

func (x *CategoryWareRequest) GetAppId() int32 {
	if x != nil {
		return x.AppId
	}
	return 0
}

type CategoryWareReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*CategoryWareItem `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *CategoryWareReply) Reset() {
	*x = CategoryWareReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ware_v1_ware_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CategoryWareReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategoryWareReply) ProtoMessage() {}

func (x *CategoryWareReply) ProtoReflect() protoreflect.Message {
	mi := &file_ware_v1_ware_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategoryWareReply.ProtoReflect.Descriptor instead.
func (*CategoryWareReply) Descriptor() ([]byte, []int) {
	return file_ware_v1_ware_proto_rawDescGZIP(), []int{11}
}

func (x *CategoryWareReply) GetList() []*CategoryWareItem {
	if x != nil {
		return x.List
	}
	return nil
}

type CategoryWareItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WareCategoryId int32               `protobuf:"varint,1,opt,name=ware_category_id,json=wareCategoryId,proto3" json:"ware_category_id,omitempty"` // 分类 id
	Name           string              `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                              // 分类名称
	Children       []*CategoryWareItem `protobuf:"bytes,3,rep,name=children,proto3" json:"children,omitempty"`                                      // 子集
}

func (x *CategoryWareItem) Reset() {
	*x = CategoryWareItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ware_v1_ware_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CategoryWareItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategoryWareItem) ProtoMessage() {}

func (x *CategoryWareItem) ProtoReflect() protoreflect.Message {
	mi := &file_ware_v1_ware_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategoryWareItem.ProtoReflect.Descriptor instead.
func (*CategoryWareItem) Descriptor() ([]byte, []int) {
	return file_ware_v1_ware_proto_rawDescGZIP(), []int{12}
}

func (x *CategoryWareItem) GetWareCategoryId() int32 {
	if x != nil {
		return x.WareCategoryId
	}
	return 0
}

func (x *CategoryWareItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CategoryWareItem) GetChildren() []*CategoryWareItem {
	if x != nil {
		return x.Children
	}
	return nil
}

type ExchangeResultRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ExchangeId  int32          `protobuf:"varint,1,opt,name=exchange_id,json=exchangeId,proto3" json:"exchange_id,omitempty"`       // 兑换记录 id
	Status      ExchangeStatus `protobuf:"varint,2,opt,name=status,proto3,enum=api.ware.v1.ExchangeStatus" json:"status,omitempty"` // 1=待发货，2=已发货，3=已完成，4=发货失败，5=已取消
	Remark      string         `protobuf:"bytes,3,opt,name=remark,proto3" json:"remark,omitempty"`                                  // 备注
	ExpressTime int64          `protobuf:"varint,4,opt,name=express_time,json=expressTime,proto3" json:"express_time,omitempty"`    // 时间戳 发货时间 time.RFC3339
}

func (x *ExchangeResultRequest) Reset() {
	*x = ExchangeResultRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ware_v1_ware_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeResultRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeResultRequest) ProtoMessage() {}

func (x *ExchangeResultRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ware_v1_ware_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeResultRequest.ProtoReflect.Descriptor instead.
func (*ExchangeResultRequest) Descriptor() ([]byte, []int) {
	return file_ware_v1_ware_proto_rawDescGZIP(), []int{13}
}

func (x *ExchangeResultRequest) GetExchangeId() int32 {
	if x != nil {
		return x.ExchangeId
	}
	return 0
}

func (x *ExchangeResultRequest) GetStatus() ExchangeStatus {
	if x != nil {
		return x.Status
	}
	return ExchangeStatus__
}

func (x *ExchangeResultRequest) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *ExchangeResultRequest) GetExpressTime() int64 {
	if x != nil {
		return x.ExpressTime
	}
	return 0
}

type ExchangeResultReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ExchangeResultReply) Reset() {
	*x = ExchangeResultReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ware_v1_ware_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeResultReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeResultReply) ProtoMessage() {}

func (x *ExchangeResultReply) ProtoReflect() protoreflect.Message {
	mi := &file_ware_v1_ware_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeResultReply.ProtoReflect.Descriptor instead.
func (*ExchangeResultReply) Descriptor() ([]byte, []int) {
	return file_ware_v1_ware_proto_rawDescGZIP(), []int{14}
}

type ExchangeInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    int64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`          // 用户 id
	ChannelId int32 `protobuf:"varint,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"` // 渠道 id
	WareType  int32 `protobuf:"varint,3,opt,name=ware_type,json=wareType,proto3" json:"ware_type,omitempty"`    // 商品类型 1:实物商品 2:电子卡券 3:外部商品
}

func (x *ExchangeInfoRequest) Reset() {
	*x = ExchangeInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ware_v1_ware_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeInfoRequest) ProtoMessage() {}

func (x *ExchangeInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ware_v1_ware_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeInfoRequest.ProtoReflect.Descriptor instead.
func (*ExchangeInfoRequest) Descriptor() ([]byte, []int) {
	return file_ware_v1_ware_proto_rawDescGZIP(), []int{15}
}

func (x *ExchangeInfoRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ExchangeInfoRequest) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ExchangeInfoRequest) GetWareType() int32 {
	if x != nil {
		return x.WareType
	}
	return 0
}

type ExchangeInfoReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`       // 姓名
	Phone   string `protobuf:"bytes,2,opt,name=phone,proto3" json:"phone,omitempty"`     // 手机号
	Address string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"` // 地址
}

func (x *ExchangeInfoReply) Reset() {
	*x = ExchangeInfoReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ware_v1_ware_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeInfoReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeInfoReply) ProtoMessage() {}

func (x *ExchangeInfoReply) ProtoReflect() protoreflect.Message {
	mi := &file_ware_v1_ware_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeInfoReply.ProtoReflect.Descriptor instead.
func (*ExchangeInfoReply) Descriptor() ([]byte, []int) {
	return file_ware_v1_ware_proto_rawDescGZIP(), []int{16}
}

func (x *ExchangeInfoReply) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ExchangeInfoReply) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *ExchangeInfoReply) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

type ExchangeListRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChannelId int32 `protobuf:"varint,1,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"` // 渠道 id
	UserId    int64 `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`          // 用户 id
}

func (x *ExchangeListRequest) Reset() {
	*x = ExchangeListRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ware_v1_ware_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeListRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeListRequest) ProtoMessage() {}

func (x *ExchangeListRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ware_v1_ware_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeListRequest.ProtoReflect.Descriptor instead.
func (*ExchangeListRequest) Descriptor() ([]byte, []int) {
	return file_ware_v1_ware_proto_rawDescGZIP(), []int{17}
}

func (x *ExchangeListRequest) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ExchangeListRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

type ExchangeListReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List  []*ExchangeListItem `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	Total int32               `protobuf:"varint,2,opt,name=total,proto3" json:"total,omitempty"`
}

func (x *ExchangeListReply) Reset() {
	*x = ExchangeListReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ware_v1_ware_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeListReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeListReply) ProtoMessage() {}

func (x *ExchangeListReply) ProtoReflect() protoreflect.Message {
	mi := &file_ware_v1_ware_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeListReply.ProtoReflect.Descriptor instead.
func (*ExchangeListReply) Descriptor() ([]byte, []int) {
	return file_ware_v1_ware_proto_rawDescGZIP(), []int{18}
}

func (x *ExchangeListReply) GetList() []*ExchangeListItem {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *ExchangeListReply) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

type ExchangeListItem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id           int32  `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`                                          // 订单号
	WareId       int32  `protobuf:"varint,4,opt,name=ware_id,json=wareId,proto3" json:"ware_id,omitempty"`                    // 商品 id
	WareType     int32  `protobuf:"varint,5,opt,name=ware_type,json=wareType,proto3" json:"ware_type,omitempty"`              // 商品类型 1:实物商品 2:电子卡券
	WareName     string `protobuf:"bytes,6,opt,name=ware_name,json=wareName,proto3" json:"ware_name,omitempty"`               // 商品名称
	WareImage    string `protobuf:"bytes,7,opt,name=ware_image,json=wareImage,proto3" json:"ware_image,omitempty"`            // 商品图片
	ItemId       int32  `protobuf:"varint,8,opt,name=item_id,json=itemId,proto3" json:"item_id,omitempty"`                    // 道具 id
	ItemImage    string `protobuf:"bytes,9,opt,name=item_image,json=itemImage,proto3" json:"item_image,omitempty"`            // 道具图片
	ItemQuantity int32  `protobuf:"varint,10,opt,name=item_quantity,json=itemQuantity,proto3" json:"item_quantity,omitempty"` // 道具数量
	CreatedTime  int64  `protobuf:"varint,11,opt,name=created_time,json=createdTime,proto3" json:"created_time,omitempty"`    // 兑换时间
	ExpressTime  int64  `protobuf:"varint,12,opt,name=express_time,json=expressTime,proto3" json:"express_time,omitempty"`    // 发货时间
	Name         string `protobuf:"bytes,13,opt,name=name,proto3" json:"name,omitempty"`                                      // 兑换姓名
	Phone        string `protobuf:"bytes,14,opt,name=phone,proto3" json:"phone,omitempty"`                                    // 兑换手机号
	Address      string `protobuf:"bytes,15,opt,name=address,proto3" json:"address,omitempty"`                                // 兑换地址
	Quantity     int32  `protobuf:"varint,16,opt,name=quantity,proto3" json:"quantity,omitempty"`                             // 兑换件数
	Status       int32  `protobuf:"varint,17,opt,name=status,proto3" json:"status,omitempty"`                                 // 订单状态 1=待发货，2=已发货，3=已完成，4=发货失败，5=已取消
	StatusName   string `protobuf:"bytes,18,opt,name=status_name,json=statusName,proto3" json:"status_name,omitempty"`        // 订单状态
}

func (x *ExchangeListItem) Reset() {
	*x = ExchangeListItem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ware_v1_ware_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeListItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeListItem) ProtoMessage() {}

func (x *ExchangeListItem) ProtoReflect() protoreflect.Message {
	mi := &file_ware_v1_ware_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeListItem.ProtoReflect.Descriptor instead.
func (*ExchangeListItem) Descriptor() ([]byte, []int) {
	return file_ware_v1_ware_proto_rawDescGZIP(), []int{19}
}

func (x *ExchangeListItem) GetId() int32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ExchangeListItem) GetWareId() int32 {
	if x != nil {
		return x.WareId
	}
	return 0
}

func (x *ExchangeListItem) GetWareType() int32 {
	if x != nil {
		return x.WareType
	}
	return 0
}

func (x *ExchangeListItem) GetWareName() string {
	if x != nil {
		return x.WareName
	}
	return ""
}

func (x *ExchangeListItem) GetWareImage() string {
	if x != nil {
		return x.WareImage
	}
	return ""
}

func (x *ExchangeListItem) GetItemId() int32 {
	if x != nil {
		return x.ItemId
	}
	return 0
}

func (x *ExchangeListItem) GetItemImage() string {
	if x != nil {
		return x.ItemImage
	}
	return ""
}

func (x *ExchangeListItem) GetItemQuantity() int32 {
	if x != nil {
		return x.ItemQuantity
	}
	return 0
}

func (x *ExchangeListItem) GetCreatedTime() int64 {
	if x != nil {
		return x.CreatedTime
	}
	return 0
}

func (x *ExchangeListItem) GetExpressTime() int64 {
	if x != nil {
		return x.ExpressTime
	}
	return 0
}

func (x *ExchangeListItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ExchangeListItem) GetPhone() string {
	if x != nil {
		return x.Phone
	}
	return ""
}

func (x *ExchangeListItem) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *ExchangeListItem) GetQuantity() int32 {
	if x != nil {
		return x.Quantity
	}
	return 0
}

func (x *ExchangeListItem) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *ExchangeListItem) GetStatusName() string {
	if x != nil {
		return x.StatusName
	}
	return ""
}

type ExchangeItemRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AppId     int32 `protobuf:"varint,1,opt,name=app_id,json=appId,proto3" json:"app_id,omitempty"`             // app id
	ChannelId int32 `protobuf:"varint,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"` // channel id
	UserId    int64 `protobuf:"varint,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`          // 用户 id
	WareId    int32 `protobuf:"varint,4,opt,name=ware_id,json=wareId,proto3" json:"ware_id,omitempty"`          // 商品 id
}

func (x *ExchangeItemRequest) Reset() {
	*x = ExchangeItemRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ware_v1_ware_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeItemRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeItemRequest) ProtoMessage() {}

func (x *ExchangeItemRequest) ProtoReflect() protoreflect.Message {
	mi := &file_ware_v1_ware_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeItemRequest.ProtoReflect.Descriptor instead.
func (*ExchangeItemRequest) Descriptor() ([]byte, []int) {
	return file_ware_v1_ware_proto_rawDescGZIP(), []int{20}
}

func (x *ExchangeItemRequest) GetAppId() int32 {
	if x != nil {
		return x.AppId
	}
	return 0
}

func (x *ExchangeItemRequest) GetChannelId() int32 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *ExchangeItemRequest) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ExchangeItemRequest) GetWareId() int32 {
	if x != nil {
		return x.WareId
	}
	return 0
}

type ExchangeItemReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ExchangeItemReply) Reset() {
	*x = ExchangeItemReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_ware_v1_ware_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExchangeItemReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExchangeItemReply) ProtoMessage() {}

func (x *ExchangeItemReply) ProtoReflect() protoreflect.Message {
	mi := &file_ware_v1_ware_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExchangeItemReply.ProtoReflect.Descriptor instead.
func (*ExchangeItemReply) Descriptor() ([]byte, []int) {
	return file_ware_v1_ware_proto_rawDescGZIP(), []int{21}
}

var File_ware_v1_ware_proto protoreflect.FileDescriptor

var file_ware_v1_ware_proto_rawDesc = []byte{
	0x0a, 0x12, 0x77, 0x61, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x2f, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x16, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x32, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x57, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x20, 0x0a, 0x07, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x20, 0x00, 0x52, 0x06, 0x77, 0x61,
	0x72, 0x65, 0x49, 0x64, 0x22, 0xa3, 0x03, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x57, 0x61, 0x72, 0x65,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x17, 0x0a, 0x07, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x77, 0x61, 0x72, 0x65, 0x49, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x78, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x72, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x69,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x74,
	0x74, 0x6c, 0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0b, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x28, 0x0a, 0x10,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x2c, 0x0a, 0x12, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x74, 0x65, 0x6d,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x16, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x14, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x2e, 0x0a, 0x13, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x49, 0x74, 0x65, 0x6d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x22, 0xe4, 0x01, 0x0a, 0x0f, 0x4c,
	0x69, 0x73, 0x74, 0x57, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2b,
	0x0a, 0x04, 0x70, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x61, 0x67,
	0x69, 0x6e, 0x61, 0x74, 0x65, 0x52, 0x04, 0x70, 0x61, 0x67, 0x65, 0x12, 0x15, 0x0a, 0x06, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x61, 0x70, 0x70,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x05, 0x52, 0x06, 0x77, 0x61, 0x72, 0x65, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x77,
	0x61, 0x72, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08,
	0x77, 0x61, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10,
	0x77, 0x61, 0x72, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x77, 0x61, 0x72, 0x65, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69,
	0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x05, 0x52, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64,
	0x73, 0x22, 0x54, 0x0a, 0x0d, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x61, 0x72, 0x65, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x2d, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x57, 0x61, 0x72, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x22, 0xc0, 0x03, 0x0a, 0x0c, 0x4c, 0x69, 0x73, 0x74,
	0x57, 0x61, 0x72, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x77, 0x61, 0x72, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x77, 0x61, 0x72, 0x65, 0x49,
	0x64, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x77, 0x61, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24,
	0x0a, 0x0e, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x77, 0x61, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e,
	0x77, 0x61, 0x72, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x2c,
	0x0a, 0x12, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x77, 0x61, 0x72, 0x65,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78,
	0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x55, 0x72, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x74, 0x74, 0x6c,
	0x65, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x73,
	0x65, 0x74, 0x74, 0x6c, 0x65, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x3e, 0x0a, 0x0d, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x0d, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x0c, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x22, 0xd4, 0x01, 0x0a, 0x0c, 0x45,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x77,
	0x61, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x77, 0x61,
	0x72, 0x65, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x69, 0x74, 0x65, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x74,
	0x65, 0x6d, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x69, 0x74, 0x65, 0x6d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x74, 0x65,
	0x6d, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0c, 0x69, 0x74, 0x65, 0x6d, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x31,
	0x0a, 0x15, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f,
	0x77, 0x61, 0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x69,
	0x74, 0x65, 0x6d, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x57, 0x61, 0x72, 0x65, 0x49,
	0x64, 0x22, 0x94, 0x02, 0x0a, 0x16, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x56, 0x69,
	0x72, 0x74, 0x75, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06,
	0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x61, 0x70,
	0x70, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x15, 0x69,
	0x74, 0x65, 0x6d, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x77, 0x61, 0x72,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a,
	0x02, 0x20, 0x00, 0x52, 0x12, 0x69, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x57, 0x61, 0x72, 0x65, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x0a, 0x70, 0x68, 0x6f, 0x6e, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x42, 0x0c, 0xfa, 0x42, 0x09, 0x82, 0x01, 0x06, 0x18, 0x01, 0x18, 0x02, 0x18,
	0x03, 0x52, 0x09, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2a, 0x0a, 0x05,
	0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xfa, 0x42, 0x11,
	0x72, 0x0f, 0x32, 0x0d, 0x5e, 0x31, 0x5b, 0x33, 0x2d, 0x39, 0x5d, 0x5c, 0x64, 0x7b, 0x39, 0x7d,
	0x24, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x22, 0x16, 0x0a, 0x14, 0x45, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x22, 0x8e, 0x02, 0x0a, 0x15, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70,
	0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x61, 0x70, 0x70, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x3a, 0x0a, 0x15, 0x69, 0x74, 0x65,
	0x6d, 0x5f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x77, 0x61, 0x72, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x20,
	0x00, 0x52, 0x12, 0x69, 0x74, 0x65, 0x6d, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x57,
	0x61, 0x72, 0x65, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xfa, 0x42, 0x11, 0x72, 0x0f, 0x32, 0x0d, 0x5e, 0x31, 0x5b,
	0x33, 0x2d, 0x39, 0x5d, 0x5c, 0x64, 0x7b, 0x39, 0x7d, 0x24, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x12, 0x1b, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x02, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21,
	0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x07, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x02, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x22, 0x15, 0x0a, 0x13, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x2c, 0x0a, 0x13, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x57, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x15, 0x0a, 0x06, 0x61, 0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x61, 0x70, 0x70, 0x49, 0x64, 0x22, 0x46, 0x0a, 0x11, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x57, 0x61, 0x72, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x31, 0x0a, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x77, 0x61, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x57, 0x61, 0x72, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x8b,
	0x01, 0x0a, 0x10, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x57, 0x61, 0x72, 0x65, 0x49,
	0x74, 0x65, 0x6d, 0x12, 0x28, 0x0a, 0x10, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x77,
	0x61, 0x72, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x39, 0x0a, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x57, 0x61, 0x72, 0x65, 0x49, 0x74,
	0x65, 0x6d, 0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x22, 0xa8, 0x01, 0x0a,
	0x15, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x64, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x61,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65,
	0x6d, 0x61, 0x72, 0x6b, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x65, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x15, 0x0a, 0x13, 0x45, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x6a,
	0x0a, 0x13, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d,
	0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1b, 0x0a,
	0x09, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x77, 0x61, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x22, 0x57, 0x0a, 0x11, 0x45, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x22, 0x4d, 0x0a, 0x13, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x22, 0x5c, 0x0a, 0x11, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x31, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x61, 0x72, 0x65,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x22, 0xd0, 0x03, 0x0a, 0x10, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x77, 0x61, 0x72, 0x65, 0x49, 0x64, 0x12, 0x1b,
	0x0a, 0x09, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x77, 0x61, 0x72, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x77,
	0x61, 0x72, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x77, 0x61, 0x72, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x77, 0x61, 0x72, 0x65,
	0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x77, 0x61,
	0x72, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x74, 0x65, 0x6d, 0x5f,
	0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x69, 0x74, 0x65, 0x6d, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12,
	0x23, 0x0a, 0x0d, 0x69, 0x74, 0x65, 0x6d, 0x5f, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x69, 0x74, 0x65, 0x6d, 0x51, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x78, 0x70, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x65,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70,
	0x68, 0x6f, 0x6e, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x1a,
	0x0a, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x71, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x11, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x5f, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4e,
	0x61, 0x6d, 0x65, 0x22, 0x86, 0x01, 0x0a, 0x13, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x61,
	0x70, 0x70, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x61, 0x70, 0x70,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x07, 0x77, 0x61,
	0x72, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x42, 0x07, 0xfa, 0x42, 0x04,
	0x1a, 0x02, 0x20, 0x00, 0x52, 0x06, 0x77, 0x61, 0x72, 0x65, 0x49, 0x64, 0x22, 0x13, 0x0a, 0x11,
	0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x2a, 0x53, 0x0a, 0x0e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x05, 0x0a, 0x01, 0x5f, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x57, 0x41,
	0x49, 0x54, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x45, 0x4e, 0x44, 0x10, 0x02, 0x12, 0x0b,
	0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x53,
	0x45, 0x4e, 0x44, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x41,
	0x4e, 0x43, 0x45, 0x4c, 0x10, 0x06, 0x2a, 0x3a, 0x0a, 0x09, 0x50, 0x68, 0x6f, 0x6e, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x06, 0x0a, 0x02, 0x5f, 0x31, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x59,
	0x69, 0x44, 0x6f, 0x6e, 0x67, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x4c, 0x69, 0x61, 0x6e, 0x54,
	0x6f, 0x6e, 0x67, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x69, 0x61, 0x6e, 0x58, 0x69, 0x6e,
	0x10, 0x03, 0x32, 0xb1, 0x08, 0x0a, 0x04, 0x57, 0x61, 0x72, 0x65, 0x12, 0x63, 0x0a, 0x07, 0x47,
	0x65, 0x74, 0x57, 0x61, 0x72, 0x65, 0x12, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x61, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x57, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x61, 0x72, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x22, 0x20,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x3a, 0x01, 0x2a, 0x22, 0x15, 0x2f, 0x73, 0x74, 0x2d, 0x67,
	0x61, 0x6d, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x77, 0x61, 0x72, 0x65, 0x2f, 0x67, 0x65, 0x74,
	0x12, 0x67, 0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x61, 0x72, 0x65, 0x12, 0x1c, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x57,
	0x61, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1a, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x57, 0x61, 0x72,
	0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x21, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1b, 0x3a, 0x01,
	0x2a, 0x22, 0x16, 0x2f, 0x73, 0x74, 0x2d, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f,
	0x77, 0x61, 0x72, 0x65, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x77, 0x0a, 0x0c, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x57, 0x61, 0x72, 0x65, 0x12, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x77, 0x61, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x57, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x57, 0x61, 0x72, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x25, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1f, 0x3a, 0x01, 0x2a, 0x22, 0x1a, 0x2f, 0x73, 0x74, 0x2d, 0x67, 0x61, 0x6d, 0x65,
	0x73, 0x2f, 0x76, 0x31, 0x2f, 0x77, 0x61, 0x72, 0x65, 0x2f, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x12, 0x88, 0x01, 0x0a, 0x0f, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x56,
	0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x12, 0x23, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x61, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x56, 0x69, 0x72,
	0x74, 0x75, 0x61, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x56, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x2d,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x27, 0x3a, 0x01, 0x2a, 0x22, 0x22, 0x2f, 0x73, 0x74, 0x2d, 0x67,
	0x61, 0x6d, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x77, 0x61, 0x72, 0x65, 0x2f, 0x65, 0x78, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x2f, 0x76, 0x69, 0x72, 0x74, 0x75, 0x61, 0x6c, 0x12, 0x84, 0x01,
	0x0a, 0x0e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x61, 0x74, 0x74, 0x65, 0x72,
	0x12, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x61, 0x74, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x61, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4d, 0x61, 0x74, 0x74, 0x65,
	0x72, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x2c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x26, 0x3a, 0x01,
	0x2a, 0x22, 0x21, 0x2f, 0x73, 0x74, 0x2d, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f,
	0x77, 0x61, 0x72, 0x65, 0x2f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2f, 0x6d, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x12, 0x7c, 0x0a, 0x0c, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x49, 0x74, 0x65, 0x6d, 0x12, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x61, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x61, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x3a, 0x01,
	0x2a, 0x22, 0x1f, 0x2f, 0x73, 0x74, 0x2d, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f,
	0x77, 0x61, 0x72, 0x65, 0x2f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2f, 0x69, 0x74,
	0x65, 0x6d, 0x12, 0x7c, 0x0a, 0x0c, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x61, 0x72, 0x65, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x65, 0x70, 0x6c, 0x79, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x24, 0x3a, 0x01, 0x2a, 0x22,
	0x1f, 0x2f, 0x73, 0x74, 0x2d, 0x67, 0x61, 0x6d, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x77, 0x61,
	0x72, 0x65, 0x2f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x2f, 0x69, 0x6e, 0x66, 0x6f,
	0x12, 0x56, 0x0a, 0x0e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x22, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x76, 0x31,
	0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x61, 0x72,
	0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x7c, 0x0a, 0x0c, 0x45, 0x78, 0x63, 0x68,
	0x61, 0x6e, 0x67, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x20, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x77,
	0x61, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1e, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x77, 0x61, 0x72, 0x65, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x22, 0x2a, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x24, 0x3a, 0x01, 0x2a, 0x22, 0x1f, 0x2f, 0x73, 0x74, 0x2d, 0x67, 0x61, 0x6d, 0x65, 0x73,
	0x2f, 0x76, 0x31, 0x2f, 0x77, 0x61, 0x72, 0x65, 0x2f, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x2f, 0x6c, 0x69, 0x73, 0x74, 0x42, 0x39, 0x0a, 0x0b, 0x61, 0x70, 0x69, 0x2e, 0x77, 0x61,
	0x72, 0x65, 0x2e, 0x76, 0x31, 0x50, 0x01, 0x5a, 0x28, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x6c, 0x75, 0x6c, 0x75, 0x2d, 0x6c, 0x73, 0x2f, 0x73, 0x74, 0x2d, 0x61,
	0x70, 0x69, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x77, 0x61, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x3b, 0x76,
	0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_ware_v1_ware_proto_rawDescOnce sync.Once
	file_ware_v1_ware_proto_rawDescData = file_ware_v1_ware_proto_rawDesc
)

func file_ware_v1_ware_proto_rawDescGZIP() []byte {
	file_ware_v1_ware_proto_rawDescOnce.Do(func() {
		file_ware_v1_ware_proto_rawDescData = protoimpl.X.CompressGZIP(file_ware_v1_ware_proto_rawDescData)
	})
	return file_ware_v1_ware_proto_rawDescData
}

var file_ware_v1_ware_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_ware_v1_ware_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_ware_v1_ware_proto_goTypes = []interface{}{
	(ExchangeStatus)(0),            // 0: api.ware.v1.ExchangeStatus
	(PhoneType)(0),                 // 1: api.ware.v1.PhoneType
	(*GetWareRequest)(nil),         // 2: api.ware.v1.GetWareRequest
	(*GetWareReply)(nil),           // 3: api.ware.v1.GetWareReply
	(*ListWareRequest)(nil),        // 4: api.ware.v1.ListWareRequest
	(*ListWareReply)(nil),          // 5: api.ware.v1.ListWareReply
	(*ListWareItem)(nil),           // 6: api.ware.v1.ListWareItem
	(*ExchangeItem)(nil),           // 7: api.ware.v1.ExchangeItem
	(*ExchangeVirtualRequest)(nil), // 8: api.ware.v1.ExchangeVirtualRequest
	(*ExchangeVirtualReply)(nil),   // 9: api.ware.v1.ExchangeVirtualReply
	(*ExchangeMatterRequest)(nil),  // 10: api.ware.v1.ExchangeMatterRequest
	(*ExchangeMatterReply)(nil),    // 11: api.ware.v1.ExchangeMatterReply
	(*CategoryWareRequest)(nil),    // 12: api.ware.v1.CategoryWareRequest
	(*CategoryWareReply)(nil),      // 13: api.ware.v1.CategoryWareReply
	(*CategoryWareItem)(nil),       // 14: api.ware.v1.CategoryWareItem
	(*ExchangeResultRequest)(nil),  // 15: api.ware.v1.ExchangeResultRequest
	(*ExchangeResultReply)(nil),    // 16: api.ware.v1.ExchangeResultReply
	(*ExchangeInfoRequest)(nil),    // 17: api.ware.v1.ExchangeInfoRequest
	(*ExchangeInfoReply)(nil),      // 18: api.ware.v1.ExchangeInfoReply
	(*ExchangeListRequest)(nil),    // 19: api.ware.v1.ExchangeListRequest
	(*ExchangeListReply)(nil),      // 20: api.ware.v1.ExchangeListReply
	(*ExchangeListItem)(nil),       // 21: api.ware.v1.ExchangeListItem
	(*ExchangeItemRequest)(nil),    // 22: api.ware.v1.ExchangeItemRequest
	(*ExchangeItemReply)(nil),      // 23: api.ware.v1.ExchangeItemReply
	(*v1.Paginate)(nil),            // 24: api.common.v1.Paginate
}
var file_ware_v1_ware_proto_depIdxs = []int32{
	24, // 0: api.ware.v1.ListWareRequest.page:type_name -> api.common.v1.Paginate
	6,  // 1: api.ware.v1.ListWareReply.list:type_name -> api.ware.v1.ListWareItem
	7,  // 2: api.ware.v1.ListWareItem.exchange_item:type_name -> api.ware.v1.ExchangeItem
	1,  // 3: api.ware.v1.ExchangeVirtualRequest.phone_type:type_name -> api.ware.v1.PhoneType
	14, // 4: api.ware.v1.CategoryWareReply.list:type_name -> api.ware.v1.CategoryWareItem
	14, // 5: api.ware.v1.CategoryWareItem.children:type_name -> api.ware.v1.CategoryWareItem
	0,  // 6: api.ware.v1.ExchangeResultRequest.status:type_name -> api.ware.v1.ExchangeStatus
	21, // 7: api.ware.v1.ExchangeListReply.list:type_name -> api.ware.v1.ExchangeListItem
	2,  // 8: api.ware.v1.Ware.GetWare:input_type -> api.ware.v1.GetWareRequest
	4,  // 9: api.ware.v1.Ware.ListWare:input_type -> api.ware.v1.ListWareRequest
	12, // 10: api.ware.v1.Ware.CategoryWare:input_type -> api.ware.v1.CategoryWareRequest
	8,  // 11: api.ware.v1.Ware.ExchangeVirtual:input_type -> api.ware.v1.ExchangeVirtualRequest
	10, // 12: api.ware.v1.Ware.ExchangeMatter:input_type -> api.ware.v1.ExchangeMatterRequest
	22, // 13: api.ware.v1.Ware.ExchangeItem:input_type -> api.ware.v1.ExchangeItemRequest
	17, // 14: api.ware.v1.Ware.ExchangeInfo:input_type -> api.ware.v1.ExchangeInfoRequest
	15, // 15: api.ware.v1.Ware.ExchangeResult:input_type -> api.ware.v1.ExchangeResultRequest
	19, // 16: api.ware.v1.Ware.ExchangeList:input_type -> api.ware.v1.ExchangeListRequest
	6,  // 17: api.ware.v1.Ware.GetWare:output_type -> api.ware.v1.ListWareItem
	5,  // 18: api.ware.v1.Ware.ListWare:output_type -> api.ware.v1.ListWareReply
	13, // 19: api.ware.v1.Ware.CategoryWare:output_type -> api.ware.v1.CategoryWareReply
	9,  // 20: api.ware.v1.Ware.ExchangeVirtual:output_type -> api.ware.v1.ExchangeVirtualReply
	11, // 21: api.ware.v1.Ware.ExchangeMatter:output_type -> api.ware.v1.ExchangeMatterReply
	23, // 22: api.ware.v1.Ware.ExchangeItem:output_type -> api.ware.v1.ExchangeItemReply
	18, // 23: api.ware.v1.Ware.ExchangeInfo:output_type -> api.ware.v1.ExchangeInfoReply
	16, // 24: api.ware.v1.Ware.ExchangeResult:output_type -> api.ware.v1.ExchangeResultReply
	20, // 25: api.ware.v1.Ware.ExchangeList:output_type -> api.ware.v1.ExchangeListReply
	17, // [17:26] is the sub-list for method output_type
	8,  // [8:17] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_ware_v1_ware_proto_init() }
func file_ware_v1_ware_proto_init() {
	if File_ware_v1_ware_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_ware_v1_ware_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWareRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ware_v1_ware_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetWareReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ware_v1_ware_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWareRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ware_v1_ware_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWareReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ware_v1_ware_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListWareItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ware_v1_ware_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ware_v1_ware_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeVirtualRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ware_v1_ware_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeVirtualReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ware_v1_ware_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeMatterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ware_v1_ware_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeMatterReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ware_v1_ware_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CategoryWareRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ware_v1_ware_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CategoryWareReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ware_v1_ware_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CategoryWareItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ware_v1_ware_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeResultRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ware_v1_ware_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeResultReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ware_v1_ware_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ware_v1_ware_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeInfoReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ware_v1_ware_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeListRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ware_v1_ware_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeListReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ware_v1_ware_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeListItem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ware_v1_ware_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeItemRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_ware_v1_ware_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExchangeItemReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_ware_v1_ware_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_ware_v1_ware_proto_goTypes,
		DependencyIndexes: file_ware_v1_ware_proto_depIdxs,
		EnumInfos:         file_ware_v1_ware_proto_enumTypes,
		MessageInfos:      file_ware_v1_ware_proto_msgTypes,
	}.Build()
	File_ware_v1_ware_proto = out.File
	file_ware_v1_ware_proto_rawDesc = nil
	file_ware_v1_ware_proto_goTypes = nil
	file_ware_v1_ware_proto_depIdxs = nil
}
