// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: ware/v1/ware.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetWareRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetWareRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetWareRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetWareRequestMultiError,
// or nil if none found.
func (m *GetWareRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetWareRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetWareId() <= 0 {
		err := GetWareRequestValidationError{
			field:  "WareId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetWareRequestMultiError(errors)
	}

	return nil
}

// GetWareRequestMultiError is an error wrapping multiple validation errors
// returned by GetWareRequest.ValidateAll() if the designated constraints
// aren't met.
type GetWareRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetWareRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetWareRequestMultiError) AllErrors() []error { return m }

// GetWareRequestValidationError is the validation error returned by
// GetWareRequest.Validate if the designated constraints aren't met.
type GetWareRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWareRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWareRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWareRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWareRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWareRequestValidationError) ErrorName() string { return "GetWareRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetWareRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWareRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWareRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWareRequestValidationError{}

// Validate checks the field values on GetWareReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetWareReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetWareReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetWareReplyMultiError, or
// nil if none found.
func (m *GetWareReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetWareReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for WareId

	// no validation rules for Name

	// no validation rules for Image

	// no validation rules for ExternalUrl

	// no validation rules for Information

	// no validation rules for Price

	// no validation rules for Point

	// no validation rules for SettlePrice

	// no validation rules for ExchangeItemId

	// no validation rules for ExchangeItemName

	// no validation rules for ExchangeItemQuantity

	// no validation rules for ExchangeItemImage

	if len(errors) > 0 {
		return GetWareReplyMultiError(errors)
	}

	return nil
}

// GetWareReplyMultiError is an error wrapping multiple validation errors
// returned by GetWareReply.ValidateAll() if the designated constraints aren't met.
type GetWareReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetWareReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetWareReplyMultiError) AllErrors() []error { return m }

// GetWareReplyValidationError is the validation error returned by
// GetWareReply.Validate if the designated constraints aren't met.
type GetWareReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetWareReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetWareReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetWareReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetWareReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetWareReplyValidationError) ErrorName() string { return "GetWareReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetWareReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetWareReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetWareReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetWareReplyValidationError{}

// Validate checks the field values on ListWareRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListWareRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListWareRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListWareRequestMultiError, or nil if none found.
func (m *ListWareRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListWareRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListWareRequestValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListWareRequestValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListWareRequestValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for AppId

	// no validation rules for Name

	// no validation rules for WareCategoryId

	if len(errors) > 0 {
		return ListWareRequestMultiError(errors)
	}

	return nil
}

// ListWareRequestMultiError is an error wrapping multiple validation errors
// returned by ListWareRequest.ValidateAll() if the designated constraints
// aren't met.
type ListWareRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListWareRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListWareRequestMultiError) AllErrors() []error { return m }

// ListWareRequestValidationError is the validation error returned by
// ListWareRequest.Validate if the designated constraints aren't met.
type ListWareRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWareRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWareRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWareRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWareRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWareRequestValidationError) ErrorName() string { return "ListWareRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListWareRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWareRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWareRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWareRequestValidationError{}

// Validate checks the field values on ListWareReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListWareReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListWareReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListWareReplyMultiError, or
// nil if none found.
func (m *ListWareReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListWareReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListWareReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListWareReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListWareReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return ListWareReplyMultiError(errors)
	}

	return nil
}

// ListWareReplyMultiError is an error wrapping multiple validation errors
// returned by ListWareReply.ValidateAll() if the designated constraints
// aren't met.
type ListWareReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListWareReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListWareReplyMultiError) AllErrors() []error { return m }

// ListWareReplyValidationError is the validation error returned by
// ListWareReply.Validate if the designated constraints aren't met.
type ListWareReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWareReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWareReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWareReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWareReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWareReplyValidationError) ErrorName() string { return "ListWareReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListWareReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWareReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWareReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWareReplyValidationError{}

// Validate checks the field values on ListWareItem with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListWareItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListWareItem with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListWareItemMultiError, or
// nil if none found.
func (m *ListWareItem) ValidateAll() error {
	return m.validate(true)
}

func (m *ListWareItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for WareId

	// no validation rules for WareType

	// no validation rules for WareTypeName

	// no validation rules for WareCategoryId

	// no validation rules for WareCategoryName

	// no validation rules for Name

	// no validation rules for Image

	// no validation rules for ExternalUrl

	// no validation rules for Information

	// no validation rules for Price

	// no validation rules for Point

	// no validation rules for SettlePrice

	for idx, item := range m.GetExchangeItem() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListWareItemValidationError{
						field:  fmt.Sprintf("ExchangeItem[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListWareItemValidationError{
						field:  fmt.Sprintf("ExchangeItem[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListWareItemValidationError{
					field:  fmt.Sprintf("ExchangeItem[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListWareItemMultiError(errors)
	}

	return nil
}

// ListWareItemMultiError is an error wrapping multiple validation errors
// returned by ListWareItem.ValidateAll() if the designated constraints aren't met.
type ListWareItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListWareItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListWareItemMultiError) AllErrors() []error { return m }

// ListWareItemValidationError is the validation error returned by
// ListWareItem.Validate if the designated constraints aren't met.
type ListWareItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWareItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWareItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWareItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWareItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWareItemValidationError) ErrorName() string { return "ListWareItemValidationError" }

// Error satisfies the builtin error interface
func (e ListWareItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWareItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWareItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWareItemValidationError{}

// Validate checks the field values on ExchangeItem with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ExchangeItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExchangeItem with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ExchangeItemMultiError, or
// nil if none found.
func (m *ExchangeItem) ValidateAll() error {
	return m.validate(true)
}

func (m *ExchangeItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for WareId

	// no validation rules for ItemId

	// no validation rules for ItemName

	// no validation rules for ItemImage

	// no validation rules for ItemQuantity

	// no validation rules for ItemExchangeWareId

	if len(errors) > 0 {
		return ExchangeItemMultiError(errors)
	}

	return nil
}

// ExchangeItemMultiError is an error wrapping multiple validation errors
// returned by ExchangeItem.ValidateAll() if the designated constraints aren't met.
type ExchangeItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExchangeItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExchangeItemMultiError) AllErrors() []error { return m }

// ExchangeItemValidationError is the validation error returned by
// ExchangeItem.Validate if the designated constraints aren't met.
type ExchangeItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExchangeItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExchangeItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExchangeItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExchangeItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExchangeItemValidationError) ErrorName() string { return "ExchangeItemValidationError" }

// Error satisfies the builtin error interface
func (e ExchangeItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExchangeItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExchangeItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExchangeItemValidationError{}

// Validate checks the field values on ExchangeVirtualRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExchangeVirtualRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExchangeVirtualRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExchangeVirtualRequestMultiError, or nil if none found.
func (m *ExchangeVirtualRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ExchangeVirtualRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AppId

	// no validation rules for ChannelId

	// no validation rules for UserId

	if m.GetItemExchangeWareId() <= 0 {
		err := ExchangeVirtualRequestValidationError{
			field:  "ItemExchangeWareId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _ExchangeVirtualRequest_PhoneType_InLookup[m.GetPhoneType()]; !ok {
		err := ExchangeVirtualRequestValidationError{
			field:  "PhoneType",
			reason: "value must be in list [YiDong LianTong DianXin]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ExchangeVirtualRequest_Phone_Pattern.MatchString(m.GetPhone()) {
		err := ExchangeVirtualRequestValidationError{
			field:  "Phone",
			reason: "value does not match regex pattern \"^1[3-9]\\\\d{9}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ExchangeVirtualRequestMultiError(errors)
	}

	return nil
}

// ExchangeVirtualRequestMultiError is an error wrapping multiple validation
// errors returned by ExchangeVirtualRequest.ValidateAll() if the designated
// constraints aren't met.
type ExchangeVirtualRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExchangeVirtualRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExchangeVirtualRequestMultiError) AllErrors() []error { return m }

// ExchangeVirtualRequestValidationError is the validation error returned by
// ExchangeVirtualRequest.Validate if the designated constraints aren't met.
type ExchangeVirtualRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExchangeVirtualRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExchangeVirtualRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExchangeVirtualRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExchangeVirtualRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExchangeVirtualRequestValidationError) ErrorName() string {
	return "ExchangeVirtualRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ExchangeVirtualRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExchangeVirtualRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExchangeVirtualRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExchangeVirtualRequestValidationError{}

var _ExchangeVirtualRequest_PhoneType_InLookup = map[PhoneType]struct{}{
	1: {},
	2: {},
	3: {},
}

var _ExchangeVirtualRequest_Phone_Pattern = regexp.MustCompile("^1[3-9]\\d{9}$")

// Validate checks the field values on ExchangeVirtualReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExchangeVirtualReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExchangeVirtualReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExchangeVirtualReplyMultiError, or nil if none found.
func (m *ExchangeVirtualReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ExchangeVirtualReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ExchangeVirtualReplyMultiError(errors)
	}

	return nil
}

// ExchangeVirtualReplyMultiError is an error wrapping multiple validation
// errors returned by ExchangeVirtualReply.ValidateAll() if the designated
// constraints aren't met.
type ExchangeVirtualReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExchangeVirtualReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExchangeVirtualReplyMultiError) AllErrors() []error { return m }

// ExchangeVirtualReplyValidationError is the validation error returned by
// ExchangeVirtualReply.Validate if the designated constraints aren't met.
type ExchangeVirtualReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExchangeVirtualReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExchangeVirtualReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExchangeVirtualReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExchangeVirtualReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExchangeVirtualReplyValidationError) ErrorName() string {
	return "ExchangeVirtualReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ExchangeVirtualReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExchangeVirtualReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExchangeVirtualReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExchangeVirtualReplyValidationError{}

// Validate checks the field values on ExchangeMatterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExchangeMatterRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExchangeMatterRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExchangeMatterRequestMultiError, or nil if none found.
func (m *ExchangeMatterRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ExchangeMatterRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AppId

	// no validation rules for ChannelId

	// no validation rules for UserId

	if m.GetItemExchangeWareId() <= 0 {
		err := ExchangeMatterRequestValidationError{
			field:  "ItemExchangeWareId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if !_ExchangeMatterRequest_Phone_Pattern.MatchString(m.GetPhone()) {
		err := ExchangeMatterRequestValidationError{
			field:  "Phone",
			reason: "value does not match regex pattern \"^1[3-9]\\\\d{9}$\"",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 2 {
		err := ExchangeMatterRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 2 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetAddress()) < 2 {
		err := ExchangeMatterRequestValidationError{
			field:  "Address",
			reason: "value length must be at least 2 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ExchangeMatterRequestMultiError(errors)
	}

	return nil
}

// ExchangeMatterRequestMultiError is an error wrapping multiple validation
// errors returned by ExchangeMatterRequest.ValidateAll() if the designated
// constraints aren't met.
type ExchangeMatterRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExchangeMatterRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExchangeMatterRequestMultiError) AllErrors() []error { return m }

// ExchangeMatterRequestValidationError is the validation error returned by
// ExchangeMatterRequest.Validate if the designated constraints aren't met.
type ExchangeMatterRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExchangeMatterRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExchangeMatterRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExchangeMatterRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExchangeMatterRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExchangeMatterRequestValidationError) ErrorName() string {
	return "ExchangeMatterRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ExchangeMatterRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExchangeMatterRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExchangeMatterRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExchangeMatterRequestValidationError{}

var _ExchangeMatterRequest_Phone_Pattern = regexp.MustCompile("^1[3-9]\\d{9}$")

// Validate checks the field values on ExchangeMatterReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExchangeMatterReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExchangeMatterReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExchangeMatterReplyMultiError, or nil if none found.
func (m *ExchangeMatterReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ExchangeMatterReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ExchangeMatterReplyMultiError(errors)
	}

	return nil
}

// ExchangeMatterReplyMultiError is an error wrapping multiple validation
// errors returned by ExchangeMatterReply.ValidateAll() if the designated
// constraints aren't met.
type ExchangeMatterReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExchangeMatterReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExchangeMatterReplyMultiError) AllErrors() []error { return m }

// ExchangeMatterReplyValidationError is the validation error returned by
// ExchangeMatterReply.Validate if the designated constraints aren't met.
type ExchangeMatterReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExchangeMatterReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExchangeMatterReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExchangeMatterReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExchangeMatterReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExchangeMatterReplyValidationError) ErrorName() string {
	return "ExchangeMatterReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ExchangeMatterReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExchangeMatterReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExchangeMatterReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExchangeMatterReplyValidationError{}

// Validate checks the field values on CategoryWareRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CategoryWareRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CategoryWareRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CategoryWareRequestMultiError, or nil if none found.
func (m *CategoryWareRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CategoryWareRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AppId

	if len(errors) > 0 {
		return CategoryWareRequestMultiError(errors)
	}

	return nil
}

// CategoryWareRequestMultiError is an error wrapping multiple validation
// errors returned by CategoryWareRequest.ValidateAll() if the designated
// constraints aren't met.
type CategoryWareRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CategoryWareRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CategoryWareRequestMultiError) AllErrors() []error { return m }

// CategoryWareRequestValidationError is the validation error returned by
// CategoryWareRequest.Validate if the designated constraints aren't met.
type CategoryWareRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CategoryWareRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CategoryWareRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CategoryWareRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CategoryWareRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CategoryWareRequestValidationError) ErrorName() string {
	return "CategoryWareRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CategoryWareRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCategoryWareRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CategoryWareRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CategoryWareRequestValidationError{}

// Validate checks the field values on CategoryWareReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CategoryWareReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CategoryWareReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CategoryWareReplyMultiError, or nil if none found.
func (m *CategoryWareReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CategoryWareReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CategoryWareReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CategoryWareReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CategoryWareReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CategoryWareReplyMultiError(errors)
	}

	return nil
}

// CategoryWareReplyMultiError is an error wrapping multiple validation errors
// returned by CategoryWareReply.ValidateAll() if the designated constraints
// aren't met.
type CategoryWareReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CategoryWareReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CategoryWareReplyMultiError) AllErrors() []error { return m }

// CategoryWareReplyValidationError is the validation error returned by
// CategoryWareReply.Validate if the designated constraints aren't met.
type CategoryWareReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CategoryWareReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CategoryWareReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CategoryWareReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CategoryWareReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CategoryWareReplyValidationError) ErrorName() string {
	return "CategoryWareReplyValidationError"
}

// Error satisfies the builtin error interface
func (e CategoryWareReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCategoryWareReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CategoryWareReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CategoryWareReplyValidationError{}

// Validate checks the field values on CategoryWareItem with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CategoryWareItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CategoryWareItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CategoryWareItemMultiError, or nil if none found.
func (m *CategoryWareItem) ValidateAll() error {
	return m.validate(true)
}

func (m *CategoryWareItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for WareCategoryId

	// no validation rules for Name

	for idx, item := range m.GetChildren() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CategoryWareItemValidationError{
						field:  fmt.Sprintf("Children[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CategoryWareItemValidationError{
						field:  fmt.Sprintf("Children[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CategoryWareItemValidationError{
					field:  fmt.Sprintf("Children[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CategoryWareItemMultiError(errors)
	}

	return nil
}

// CategoryWareItemMultiError is an error wrapping multiple validation errors
// returned by CategoryWareItem.ValidateAll() if the designated constraints
// aren't met.
type CategoryWareItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CategoryWareItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CategoryWareItemMultiError) AllErrors() []error { return m }

// CategoryWareItemValidationError is the validation error returned by
// CategoryWareItem.Validate if the designated constraints aren't met.
type CategoryWareItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CategoryWareItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CategoryWareItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CategoryWareItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CategoryWareItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CategoryWareItemValidationError) ErrorName() string { return "CategoryWareItemValidationError" }

// Error satisfies the builtin error interface
func (e CategoryWareItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCategoryWareItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CategoryWareItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CategoryWareItemValidationError{}

// Validate checks the field values on ExchangeResultRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExchangeResultRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExchangeResultRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExchangeResultRequestMultiError, or nil if none found.
func (m *ExchangeResultRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ExchangeResultRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ExchangeId

	// no validation rules for Status

	// no validation rules for Remark

	// no validation rules for ExpressTime

	if len(errors) > 0 {
		return ExchangeResultRequestMultiError(errors)
	}

	return nil
}

// ExchangeResultRequestMultiError is an error wrapping multiple validation
// errors returned by ExchangeResultRequest.ValidateAll() if the designated
// constraints aren't met.
type ExchangeResultRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExchangeResultRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExchangeResultRequestMultiError) AllErrors() []error { return m }

// ExchangeResultRequestValidationError is the validation error returned by
// ExchangeResultRequest.Validate if the designated constraints aren't met.
type ExchangeResultRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExchangeResultRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExchangeResultRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExchangeResultRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExchangeResultRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExchangeResultRequestValidationError) ErrorName() string {
	return "ExchangeResultRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ExchangeResultRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExchangeResultRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExchangeResultRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExchangeResultRequestValidationError{}

// Validate checks the field values on ExchangeResultReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExchangeResultReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExchangeResultReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExchangeResultReplyMultiError, or nil if none found.
func (m *ExchangeResultReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ExchangeResultReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ExchangeResultReplyMultiError(errors)
	}

	return nil
}

// ExchangeResultReplyMultiError is an error wrapping multiple validation
// errors returned by ExchangeResultReply.ValidateAll() if the designated
// constraints aren't met.
type ExchangeResultReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExchangeResultReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExchangeResultReplyMultiError) AllErrors() []error { return m }

// ExchangeResultReplyValidationError is the validation error returned by
// ExchangeResultReply.Validate if the designated constraints aren't met.
type ExchangeResultReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExchangeResultReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExchangeResultReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExchangeResultReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExchangeResultReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExchangeResultReplyValidationError) ErrorName() string {
	return "ExchangeResultReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ExchangeResultReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExchangeResultReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExchangeResultReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExchangeResultReplyValidationError{}

// Validate checks the field values on ExchangeInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExchangeInfoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExchangeInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExchangeInfoRequestMultiError, or nil if none found.
func (m *ExchangeInfoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ExchangeInfoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for ChannelId

	// no validation rules for WareType

	if len(errors) > 0 {
		return ExchangeInfoRequestMultiError(errors)
	}

	return nil
}

// ExchangeInfoRequestMultiError is an error wrapping multiple validation
// errors returned by ExchangeInfoRequest.ValidateAll() if the designated
// constraints aren't met.
type ExchangeInfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExchangeInfoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExchangeInfoRequestMultiError) AllErrors() []error { return m }

// ExchangeInfoRequestValidationError is the validation error returned by
// ExchangeInfoRequest.Validate if the designated constraints aren't met.
type ExchangeInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExchangeInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExchangeInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExchangeInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExchangeInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExchangeInfoRequestValidationError) ErrorName() string {
	return "ExchangeInfoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ExchangeInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExchangeInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExchangeInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExchangeInfoRequestValidationError{}

// Validate checks the field values on ExchangeInfoReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ExchangeInfoReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExchangeInfoReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExchangeInfoReplyMultiError, or nil if none found.
func (m *ExchangeInfoReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ExchangeInfoReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Phone

	// no validation rules for Address

	// no validation rules for PhoneType

	if len(errors) > 0 {
		return ExchangeInfoReplyMultiError(errors)
	}

	return nil
}

// ExchangeInfoReplyMultiError is an error wrapping multiple validation errors
// returned by ExchangeInfoReply.ValidateAll() if the designated constraints
// aren't met.
type ExchangeInfoReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExchangeInfoReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExchangeInfoReplyMultiError) AllErrors() []error { return m }

// ExchangeInfoReplyValidationError is the validation error returned by
// ExchangeInfoReply.Validate if the designated constraints aren't met.
type ExchangeInfoReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExchangeInfoReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExchangeInfoReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExchangeInfoReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExchangeInfoReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExchangeInfoReplyValidationError) ErrorName() string {
	return "ExchangeInfoReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ExchangeInfoReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExchangeInfoReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExchangeInfoReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExchangeInfoReplyValidationError{}

// Validate checks the field values on ExchangeListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExchangeListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExchangeListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExchangeListRequestMultiError, or nil if none found.
func (m *ExchangeListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ExchangeListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ChannelId

	// no validation rules for UserId

	if len(errors) > 0 {
		return ExchangeListRequestMultiError(errors)
	}

	return nil
}

// ExchangeListRequestMultiError is an error wrapping multiple validation
// errors returned by ExchangeListRequest.ValidateAll() if the designated
// constraints aren't met.
type ExchangeListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExchangeListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExchangeListRequestMultiError) AllErrors() []error { return m }

// ExchangeListRequestValidationError is the validation error returned by
// ExchangeListRequest.Validate if the designated constraints aren't met.
type ExchangeListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExchangeListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExchangeListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExchangeListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExchangeListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExchangeListRequestValidationError) ErrorName() string {
	return "ExchangeListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ExchangeListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExchangeListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExchangeListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExchangeListRequestValidationError{}

// Validate checks the field values on ExchangeListReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ExchangeListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExchangeListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExchangeListReplyMultiError, or nil if none found.
func (m *ExchangeListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ExchangeListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ExchangeListReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ExchangeListReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ExchangeListReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return ExchangeListReplyMultiError(errors)
	}

	return nil
}

// ExchangeListReplyMultiError is an error wrapping multiple validation errors
// returned by ExchangeListReply.ValidateAll() if the designated constraints
// aren't met.
type ExchangeListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExchangeListReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExchangeListReplyMultiError) AllErrors() []error { return m }

// ExchangeListReplyValidationError is the validation error returned by
// ExchangeListReply.Validate if the designated constraints aren't met.
type ExchangeListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExchangeListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExchangeListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExchangeListReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExchangeListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExchangeListReplyValidationError) ErrorName() string {
	return "ExchangeListReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ExchangeListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExchangeListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExchangeListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExchangeListReplyValidationError{}

// Validate checks the field values on ExchangeListItem with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ExchangeListItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExchangeListItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExchangeListItemMultiError, or nil if none found.
func (m *ExchangeListItem) ValidateAll() error {
	return m.validate(true)
}

func (m *ExchangeListItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for WareId

	// no validation rules for WareType

	// no validation rules for WareName

	// no validation rules for WareImage

	// no validation rules for ItemId

	// no validation rules for ItemImage

	// no validation rules for ItemQuantity

	// no validation rules for CreatedTime

	// no validation rules for ExpressTime

	// no validation rules for Name

	// no validation rules for Phone

	// no validation rules for Address

	// no validation rules for Quantity

	// no validation rules for Status

	// no validation rules for StatusName

	if len(errors) > 0 {
		return ExchangeListItemMultiError(errors)
	}

	return nil
}

// ExchangeListItemMultiError is an error wrapping multiple validation errors
// returned by ExchangeListItem.ValidateAll() if the designated constraints
// aren't met.
type ExchangeListItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExchangeListItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExchangeListItemMultiError) AllErrors() []error { return m }

// ExchangeListItemValidationError is the validation error returned by
// ExchangeListItem.Validate if the designated constraints aren't met.
type ExchangeListItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExchangeListItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExchangeListItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExchangeListItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExchangeListItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExchangeListItemValidationError) ErrorName() string { return "ExchangeListItemValidationError" }

// Error satisfies the builtin error interface
func (e ExchangeListItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExchangeListItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExchangeListItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExchangeListItemValidationError{}

// Validate checks the field values on ExchangeItemRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ExchangeItemRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExchangeItemRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExchangeItemRequestMultiError, or nil if none found.
func (m *ExchangeItemRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ExchangeItemRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AppId

	// no validation rules for ChannelId

	// no validation rules for UserId

	if m.GetItemExchangeWareId() <= 0 {
		err := ExchangeItemRequestValidationError{
			field:  "ItemExchangeWareId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ExchangeItemRequestMultiError(errors)
	}

	return nil
}

// ExchangeItemRequestMultiError is an error wrapping multiple validation
// errors returned by ExchangeItemRequest.ValidateAll() if the designated
// constraints aren't met.
type ExchangeItemRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExchangeItemRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExchangeItemRequestMultiError) AllErrors() []error { return m }

// ExchangeItemRequestValidationError is the validation error returned by
// ExchangeItemRequest.Validate if the designated constraints aren't met.
type ExchangeItemRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExchangeItemRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExchangeItemRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExchangeItemRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExchangeItemRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExchangeItemRequestValidationError) ErrorName() string {
	return "ExchangeItemRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ExchangeItemRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExchangeItemRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExchangeItemRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExchangeItemRequestValidationError{}

// Validate checks the field values on ExchangeItemReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ExchangeItemReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ExchangeItemReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ExchangeItemReplyMultiError, or nil if none found.
func (m *ExchangeItemReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ExchangeItemReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ExchangeItemReplyMultiError(errors)
	}

	return nil
}

// ExchangeItemReplyMultiError is an error wrapping multiple validation errors
// returned by ExchangeItemReply.ValidateAll() if the designated constraints
// aren't met.
type ExchangeItemReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ExchangeItemReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ExchangeItemReplyMultiError) AllErrors() []error { return m }

// ExchangeItemReplyValidationError is the validation error returned by
// ExchangeItemReply.Validate if the designated constraints aren't met.
type ExchangeItemReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ExchangeItemReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ExchangeItemReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ExchangeItemReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ExchangeItemReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ExchangeItemReplyValidationError) ErrorName() string {
	return "ExchangeItemReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ExchangeItemReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sExchangeItemReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ExchangeItemReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ExchangeItemReplyValidationError{}
