// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.1
// - protoc             v4.25.0
// source: ware/v1/ware.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationWareCategoryWare = "/api.ware.v1.Ware/CategoryWare"
const OperationWareExchangeInfo = "/api.ware.v1.Ware/ExchangeInfo"
const OperationWareExchangeList = "/api.ware.v1.Ware/ExchangeList"
const OperationWareExchangeMatter = "/api.ware.v1.Ware/ExchangeMatter"
const OperationWareExchangeVirtual = "/api.ware.v1.Ware/ExchangeVirtual"
const OperationWareGetWare = "/api.ware.v1.Ware/GetWare"
const OperationWareListWare = "/api.ware.v1.Ware/ListWare"

type WareHTTPServer interface {
	// CategoryWare 商品分类
	CategoryWare(context.Context, *CategoryWareRequest) (*CategoryWareReply, error)
	// ExchangeInfo 获取兑换信息
	ExchangeInfo(context.Context, *ExchangeInfoRequest) (*ExchangeInfoReply, error)
	// ExchangeList 兑换记录
	ExchangeList(context.Context, *ExchangeListRequest) (*ExchangeListReply, error)
	// ExchangeMatter 兑换实物
	ExchangeMatter(context.Context, *ExchangeMatterRequest) (*ExchangeMatterReply, error)
	// ExchangeVirtual 兑换虚拟商品
	ExchangeVirtual(context.Context, *ExchangeVirtualRequest) (*ExchangeVirtualReply, error)
	// GetWare 获取商品
	GetWare(context.Context, *GetWareRequest) (*ListWareItem, error)
	// ListWare 商品列表
	ListWare(context.Context, *ListWareRequest) (*ListWareReply, error)
}

func RegisterWareHTTPServer(s *http.Server, srv WareHTTPServer) {
	r := s.Route("/")
	r.POST("/st-games/v1/ware/get", _Ware_GetWare0_HTTP_Handler(srv))
	r.POST("/st-games/v1/ware/list", _Ware_ListWare0_HTTP_Handler(srv))
	r.POST("/st-games/v1/ware/category", _Ware_CategoryWare0_HTTP_Handler(srv))
	r.POST("/st-games/v1/ware/exchange/virtual", _Ware_ExchangeVirtual0_HTTP_Handler(srv))
	r.POST("/st-games/v1/ware/exchange/matter", _Ware_ExchangeMatter0_HTTP_Handler(srv))
	r.POST("/st-games/v1/ware/exchange/info", _Ware_ExchangeInfo0_HTTP_Handler(srv))
	r.POST("/st-games/v1/ware/exchange/list", _Ware_ExchangeList0_HTTP_Handler(srv))
}

func _Ware_GetWare0_HTTP_Handler(srv WareHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetWareRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWareGetWare)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetWare(ctx, req.(*GetWareRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListWareItem)
		return ctx.Result(200, reply)
	}
}

func _Ware_ListWare0_HTTP_Handler(srv WareHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListWareRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWareListWare)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListWare(ctx, req.(*ListWareRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListWareReply)
		return ctx.Result(200, reply)
	}
}

func _Ware_CategoryWare0_HTTP_Handler(srv WareHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CategoryWareRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWareCategoryWare)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CategoryWare(ctx, req.(*CategoryWareRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CategoryWareReply)
		return ctx.Result(200, reply)
	}
}

func _Ware_ExchangeVirtual0_HTTP_Handler(srv WareHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ExchangeVirtualRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWareExchangeVirtual)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ExchangeVirtual(ctx, req.(*ExchangeVirtualRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ExchangeVirtualReply)
		return ctx.Result(200, reply)
	}
}

func _Ware_ExchangeMatter0_HTTP_Handler(srv WareHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ExchangeMatterRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWareExchangeMatter)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ExchangeMatter(ctx, req.(*ExchangeMatterRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ExchangeMatterReply)
		return ctx.Result(200, reply)
	}
}

func _Ware_ExchangeInfo0_HTTP_Handler(srv WareHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ExchangeInfoRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWareExchangeInfo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ExchangeInfo(ctx, req.(*ExchangeInfoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ExchangeInfoReply)
		return ctx.Result(200, reply)
	}
}

func _Ware_ExchangeList0_HTTP_Handler(srv WareHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ExchangeListRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationWareExchangeList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ExchangeList(ctx, req.(*ExchangeListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ExchangeListReply)
		return ctx.Result(200, reply)
	}
}

type WareHTTPClient interface {
	CategoryWare(ctx context.Context, req *CategoryWareRequest, opts ...http.CallOption) (rsp *CategoryWareReply, err error)
	ExchangeInfo(ctx context.Context, req *ExchangeInfoRequest, opts ...http.CallOption) (rsp *ExchangeInfoReply, err error)
	ExchangeList(ctx context.Context, req *ExchangeListRequest, opts ...http.CallOption) (rsp *ExchangeListReply, err error)
	ExchangeMatter(ctx context.Context, req *ExchangeMatterRequest, opts ...http.CallOption) (rsp *ExchangeMatterReply, err error)
	ExchangeVirtual(ctx context.Context, req *ExchangeVirtualRequest, opts ...http.CallOption) (rsp *ExchangeVirtualReply, err error)
	GetWare(ctx context.Context, req *GetWareRequest, opts ...http.CallOption) (rsp *ListWareItem, err error)
	ListWare(ctx context.Context, req *ListWareRequest, opts ...http.CallOption) (rsp *ListWareReply, err error)
}

type WareHTTPClientImpl struct {
	cc *http.Client
}

func NewWareHTTPClient(client *http.Client) WareHTTPClient {
	return &WareHTTPClientImpl{client}
}

func (c *WareHTTPClientImpl) CategoryWare(ctx context.Context, in *CategoryWareRequest, opts ...http.CallOption) (*CategoryWareReply, error) {
	var out CategoryWareReply
	pattern := "/st-games/v1/ware/category"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationWareCategoryWare))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *WareHTTPClientImpl) ExchangeInfo(ctx context.Context, in *ExchangeInfoRequest, opts ...http.CallOption) (*ExchangeInfoReply, error) {
	var out ExchangeInfoReply
	pattern := "/st-games/v1/ware/exchange/info"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationWareExchangeInfo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *WareHTTPClientImpl) ExchangeList(ctx context.Context, in *ExchangeListRequest, opts ...http.CallOption) (*ExchangeListReply, error) {
	var out ExchangeListReply
	pattern := "/st-games/v1/ware/exchange/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationWareExchangeList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *WareHTTPClientImpl) ExchangeMatter(ctx context.Context, in *ExchangeMatterRequest, opts ...http.CallOption) (*ExchangeMatterReply, error) {
	var out ExchangeMatterReply
	pattern := "/st-games/v1/ware/exchange/matter"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationWareExchangeMatter))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *WareHTTPClientImpl) ExchangeVirtual(ctx context.Context, in *ExchangeVirtualRequest, opts ...http.CallOption) (*ExchangeVirtualReply, error) {
	var out ExchangeVirtualReply
	pattern := "/st-games/v1/ware/exchange/virtual"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationWareExchangeVirtual))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *WareHTTPClientImpl) GetWare(ctx context.Context, in *GetWareRequest, opts ...http.CallOption) (*ListWareItem, error) {
	var out ListWareItem
	pattern := "/st-games/v1/ware/get"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationWareGetWare))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *WareHTTPClientImpl) ListWare(ctx context.Context, in *ListWareRequest, opts ...http.CallOption) (*ListWareReply, error) {
	var out ListWareReply
	pattern := "/st-games/v1/ware/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationWareListWare))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
