// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: ware/v1/ware.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Ware_GetWare_FullMethodName         = "/api.ware.v1.Ware/GetWare"
	Ware_ListWare_FullMethodName        = "/api.ware.v1.Ware/ListWare"
	Ware_CategoryWare_FullMethodName    = "/api.ware.v1.Ware/CategoryWare"
	Ware_ExchangeVirtual_FullMethodName = "/api.ware.v1.Ware/ExchangeVirtual"
	Ware_ExchangeMatter_FullMethodName  = "/api.ware.v1.Ware/ExchangeMatter"
	Ware_ExchangeItem_FullMethodName    = "/api.ware.v1.Ware/ExchangeItem"
	Ware_ExchangeInfo_FullMethodName    = "/api.ware.v1.Ware/ExchangeInfo"
	Ware_ExchangeResult_FullMethodName  = "/api.ware.v1.Ware/ExchangeResult"
	Ware_ExchangeList_FullMethodName    = "/api.ware.v1.Ware/ExchangeList"
)

// WareClient is the client API for Ware service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WareClient interface {
	// 获取商品
	GetWare(ctx context.Context, in *GetWareRequest, opts ...grpc.CallOption) (*ListWareItem, error)
	// 商品列表
	ListWare(ctx context.Context, in *ListWareRequest, opts ...grpc.CallOption) (*ListWareReply, error)
	// 商品分类
	CategoryWare(ctx context.Context, in *CategoryWareRequest, opts ...grpc.CallOption) (*CategoryWareReply, error)
	// 兑换虚拟商品
	ExchangeVirtual(ctx context.Context, in *ExchangeVirtualRequest, opts ...grpc.CallOption) (*ExchangeVirtualReply, error)
	// 兑换实物
	ExchangeMatter(ctx context.Context, in *ExchangeMatterRequest, opts ...grpc.CallOption) (*ExchangeMatterReply, error)
	// 兑换道具
	ExchangeItem(ctx context.Context, in *ExchangeItemRequest, opts ...grpc.CallOption) (*ExchangeItemReply, error)
	// 获取兑换信息
	ExchangeInfo(ctx context.Context, in *ExchangeInfoRequest, opts ...grpc.CallOption) (*ExchangeInfoReply, error)
	// 充值结果通知
	ExchangeResult(ctx context.Context, in *ExchangeResultRequest, opts ...grpc.CallOption) (*ExchangeResultReply, error)
	// 兑换记录
	ExchangeList(ctx context.Context, in *ExchangeListRequest, opts ...grpc.CallOption) (*ExchangeListReply, error)
}

type wareClient struct {
	cc grpc.ClientConnInterface
}

func NewWareClient(cc grpc.ClientConnInterface) WareClient {
	return &wareClient{cc}
}

func (c *wareClient) GetWare(ctx context.Context, in *GetWareRequest, opts ...grpc.CallOption) (*ListWareItem, error) {
	out := new(ListWareItem)
	err := c.cc.Invoke(ctx, Ware_GetWare_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wareClient) ListWare(ctx context.Context, in *ListWareRequest, opts ...grpc.CallOption) (*ListWareReply, error) {
	out := new(ListWareReply)
	err := c.cc.Invoke(ctx, Ware_ListWare_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wareClient) CategoryWare(ctx context.Context, in *CategoryWareRequest, opts ...grpc.CallOption) (*CategoryWareReply, error) {
	out := new(CategoryWareReply)
	err := c.cc.Invoke(ctx, Ware_CategoryWare_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wareClient) ExchangeVirtual(ctx context.Context, in *ExchangeVirtualRequest, opts ...grpc.CallOption) (*ExchangeVirtualReply, error) {
	out := new(ExchangeVirtualReply)
	err := c.cc.Invoke(ctx, Ware_ExchangeVirtual_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wareClient) ExchangeMatter(ctx context.Context, in *ExchangeMatterRequest, opts ...grpc.CallOption) (*ExchangeMatterReply, error) {
	out := new(ExchangeMatterReply)
	err := c.cc.Invoke(ctx, Ware_ExchangeMatter_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wareClient) ExchangeItem(ctx context.Context, in *ExchangeItemRequest, opts ...grpc.CallOption) (*ExchangeItemReply, error) {
	out := new(ExchangeItemReply)
	err := c.cc.Invoke(ctx, Ware_ExchangeItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wareClient) ExchangeInfo(ctx context.Context, in *ExchangeInfoRequest, opts ...grpc.CallOption) (*ExchangeInfoReply, error) {
	out := new(ExchangeInfoReply)
	err := c.cc.Invoke(ctx, Ware_ExchangeInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wareClient) ExchangeResult(ctx context.Context, in *ExchangeResultRequest, opts ...grpc.CallOption) (*ExchangeResultReply, error) {
	out := new(ExchangeResultReply)
	err := c.cc.Invoke(ctx, Ware_ExchangeResult_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wareClient) ExchangeList(ctx context.Context, in *ExchangeListRequest, opts ...grpc.CallOption) (*ExchangeListReply, error) {
	out := new(ExchangeListReply)
	err := c.cc.Invoke(ctx, Ware_ExchangeList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WareServer is the server API for Ware service.
// All implementations must embed UnimplementedWareServer
// for forward compatibility
type WareServer interface {
	// 获取商品
	GetWare(context.Context, *GetWareRequest) (*ListWareItem, error)
	// 商品列表
	ListWare(context.Context, *ListWareRequest) (*ListWareReply, error)
	// 商品分类
	CategoryWare(context.Context, *CategoryWareRequest) (*CategoryWareReply, error)
	// 兑换虚拟商品
	ExchangeVirtual(context.Context, *ExchangeVirtualRequest) (*ExchangeVirtualReply, error)
	// 兑换实物
	ExchangeMatter(context.Context, *ExchangeMatterRequest) (*ExchangeMatterReply, error)
	// 兑换道具
	ExchangeItem(context.Context, *ExchangeItemRequest) (*ExchangeItemReply, error)
	// 获取兑换信息
	ExchangeInfo(context.Context, *ExchangeInfoRequest) (*ExchangeInfoReply, error)
	// 充值结果通知
	ExchangeResult(context.Context, *ExchangeResultRequest) (*ExchangeResultReply, error)
	// 兑换记录
	ExchangeList(context.Context, *ExchangeListRequest) (*ExchangeListReply, error)
	mustEmbedUnimplementedWareServer()
}

// UnimplementedWareServer must be embedded to have forward compatible implementations.
type UnimplementedWareServer struct {
}

func (UnimplementedWareServer) GetWare(context.Context, *GetWareRequest) (*ListWareItem, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWare not implemented")
}
func (UnimplementedWareServer) ListWare(context.Context, *ListWareRequest) (*ListWareReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListWare not implemented")
}
func (UnimplementedWareServer) CategoryWare(context.Context, *CategoryWareRequest) (*CategoryWareReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CategoryWare not implemented")
}
func (UnimplementedWareServer) ExchangeVirtual(context.Context, *ExchangeVirtualRequest) (*ExchangeVirtualReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExchangeVirtual not implemented")
}
func (UnimplementedWareServer) ExchangeMatter(context.Context, *ExchangeMatterRequest) (*ExchangeMatterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExchangeMatter not implemented")
}
func (UnimplementedWareServer) ExchangeItem(context.Context, *ExchangeItemRequest) (*ExchangeItemReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExchangeItem not implemented")
}
func (UnimplementedWareServer) ExchangeInfo(context.Context, *ExchangeInfoRequest) (*ExchangeInfoReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExchangeInfo not implemented")
}
func (UnimplementedWareServer) ExchangeResult(context.Context, *ExchangeResultRequest) (*ExchangeResultReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExchangeResult not implemented")
}
func (UnimplementedWareServer) ExchangeList(context.Context, *ExchangeListRequest) (*ExchangeListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExchangeList not implemented")
}
func (UnimplementedWareServer) mustEmbedUnimplementedWareServer() {}

// UnsafeWareServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WareServer will
// result in compilation errors.
type UnsafeWareServer interface {
	mustEmbedUnimplementedWareServer()
}

func RegisterWareServer(s grpc.ServiceRegistrar, srv WareServer) {
	s.RegisterService(&Ware_ServiceDesc, srv)
}

func _Ware_GetWare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetWareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WareServer).GetWare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ware_GetWare_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WareServer).GetWare(ctx, req.(*GetWareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ware_ListWare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListWareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WareServer).ListWare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ware_ListWare_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WareServer).ListWare(ctx, req.(*ListWareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ware_CategoryWare_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CategoryWareRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WareServer).CategoryWare(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ware_CategoryWare_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WareServer).CategoryWare(ctx, req.(*CategoryWareRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ware_ExchangeVirtual_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExchangeVirtualRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WareServer).ExchangeVirtual(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ware_ExchangeVirtual_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WareServer).ExchangeVirtual(ctx, req.(*ExchangeVirtualRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ware_ExchangeMatter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExchangeMatterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WareServer).ExchangeMatter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ware_ExchangeMatter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WareServer).ExchangeMatter(ctx, req.(*ExchangeMatterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ware_ExchangeItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExchangeItemRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WareServer).ExchangeItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ware_ExchangeItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WareServer).ExchangeItem(ctx, req.(*ExchangeItemRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ware_ExchangeInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExchangeInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WareServer).ExchangeInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ware_ExchangeInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WareServer).ExchangeInfo(ctx, req.(*ExchangeInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ware_ExchangeResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExchangeResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WareServer).ExchangeResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ware_ExchangeResult_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WareServer).ExchangeResult(ctx, req.(*ExchangeResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ware_ExchangeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExchangeListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WareServer).ExchangeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ware_ExchangeList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WareServer).ExchangeList(ctx, req.(*ExchangeListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Ware_ServiceDesc is the grpc.ServiceDesc for Ware service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Ware_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.ware.v1.Ware",
	HandlerType: (*WareServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetWare",
			Handler:    _Ware_GetWare_Handler,
		},
		{
			MethodName: "ListWare",
			Handler:    _Ware_ListWare_Handler,
		},
		{
			MethodName: "CategoryWare",
			Handler:    _Ware_CategoryWare_Handler,
		},
		{
			MethodName: "ExchangeVirtual",
			Handler:    _Ware_ExchangeVirtual_Handler,
		},
		{
			MethodName: "ExchangeMatter",
			Handler:    _Ware_ExchangeMatter_Handler,
		},
		{
			MethodName: "ExchangeItem",
			Handler:    _Ware_ExchangeItem_Handler,
		},
		{
			MethodName: "ExchangeInfo",
			Handler:    _Ware_ExchangeInfo_Handler,
		},
		{
			MethodName: "ExchangeResult",
			Handler:    _Ware_ExchangeResult_Handler,
		},
		{
			MethodName: "ExchangeList",
			Handler:    _Ware_ExchangeList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ware/v1/ware.proto",
}
