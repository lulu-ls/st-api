// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.1
// - protoc             v4.25.1
// source: game/v1/game.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationGameAnnouncementList = "/api.game.v1.Game/AnnouncementList"
const OperationGameCheckSignup = "/api.game.v1.Game/CheckSignup"
const OperationGameGameInfo = "/api.game.v1.Game/GameInfo"
const OperationGameGetAppConfig = "/api.game.v1.Game/GetAppConfig"
const OperationGameGetGameNotify = "/api.game.v1.Game/GetGameNotify"
const OperationGameReadGameNotify = "/api.game.v1.Game/ReadGameNotify"
const OperationGameTaskList = "/api.game.v1.Game/TaskList"
const OperationGameTaskReward = "/api.game.v1.Game/TaskReward"

type GameHTTPServer interface {
	// AnnouncementList 公告列表
	AnnouncementList(context.Context, *AnnouncementListRequest) (*AnnouncementListReply, error)
	// CheckSignup 检查报名
	CheckSignup(context.Context, *CheckSignupRequest) (*CheckSignupReply, error)
	// GameInfo 获取房间信息
	GameInfo(context.Context, *GameInfoRequest) (*GameInfoReply, error)
	// GetAppConfig 获取 app 功能配置
	GetAppConfig(context.Context, *GetAppConfigRequest) (*GetAppConfigReply, error)
	// GetGameNotify 获取提示
	GetGameNotify(context.Context, *GetGameNotifyRequest) (*GetGameNotifyReply, error)
	// ReadGameNotify 阅读提示
	ReadGameNotify(context.Context, *ReadGameNotifyRequest) (*ReadGameNotifyReply, error)
	// TaskList 任务列表
	TaskList(context.Context, *TaskListRequest) (*TaskListReply, error)
	// TaskReward 兑换任务奖励
	TaskReward(context.Context, *TaskRewardRequest) (*TaskRewardReply, error)
}

func RegisterGameHTTPServer(s *http.Server, srv GameHTTPServer) {
	r := s.Route("/")
	r.POST("/st-games/v1/game/announcement/list", _Game_AnnouncementList0_HTTP_Handler(srv))
	r.POST("/st-games/v1/game/task/list", _Game_TaskList0_HTTP_Handler(srv))
	r.POST("/st-games/v1/game/task/reward", _Game_TaskReward0_HTTP_Handler(srv))
	r.POST("/st-games/v1/game/info", _Game_GameInfo0_HTTP_Handler(srv))
	r.POST("/st-games/v1/game/notify/get", _Game_GetGameNotify0_HTTP_Handler(srv))
	r.POST("/st-games/v1/game/notify/read", _Game_ReadGameNotify0_HTTP_Handler(srv))
	r.POST("/st-games/v1/game/dict/list", _Game_GetAppConfig0_HTTP_Handler(srv))
	r.POST("/st-games/v1/game/check/signup", _Game_CheckSignup0_HTTP_Handler(srv))
}

func _Game_AnnouncementList0_HTTP_Handler(srv GameHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in AnnouncementListRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGameAnnouncementList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.AnnouncementList(ctx, req.(*AnnouncementListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*AnnouncementListReply)
		return ctx.Result(200, reply)
	}
}

func _Game_TaskList0_HTTP_Handler(srv GameHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in TaskListRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGameTaskList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.TaskList(ctx, req.(*TaskListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*TaskListReply)
		return ctx.Result(200, reply)
	}
}

func _Game_TaskReward0_HTTP_Handler(srv GameHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in TaskRewardRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGameTaskReward)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.TaskReward(ctx, req.(*TaskRewardRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*TaskRewardReply)
		return ctx.Result(200, reply)
	}
}

func _Game_GameInfo0_HTTP_Handler(srv GameHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GameInfoRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGameGameInfo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GameInfo(ctx, req.(*GameInfoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GameInfoReply)
		return ctx.Result(200, reply)
	}
}

func _Game_GetGameNotify0_HTTP_Handler(srv GameHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetGameNotifyRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGameGetGameNotify)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetGameNotify(ctx, req.(*GetGameNotifyRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetGameNotifyReply)
		return ctx.Result(200, reply)
	}
}

func _Game_ReadGameNotify0_HTTP_Handler(srv GameHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ReadGameNotifyRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGameReadGameNotify)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ReadGameNotify(ctx, req.(*ReadGameNotifyRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ReadGameNotifyReply)
		return ctx.Result(200, reply)
	}
}

func _Game_GetAppConfig0_HTTP_Handler(srv GameHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetAppConfigRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGameGetAppConfig)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetAppConfig(ctx, req.(*GetAppConfigRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetAppConfigReply)
		return ctx.Result(200, reply)
	}
}

func _Game_CheckSignup0_HTTP_Handler(srv GameHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CheckSignupRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationGameCheckSignup)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CheckSignup(ctx, req.(*CheckSignupRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CheckSignupReply)
		return ctx.Result(200, reply)
	}
}

type GameHTTPClient interface {
	AnnouncementList(ctx context.Context, req *AnnouncementListRequest, opts ...http.CallOption) (rsp *AnnouncementListReply, err error)
	CheckSignup(ctx context.Context, req *CheckSignupRequest, opts ...http.CallOption) (rsp *CheckSignupReply, err error)
	GameInfo(ctx context.Context, req *GameInfoRequest, opts ...http.CallOption) (rsp *GameInfoReply, err error)
	GetAppConfig(ctx context.Context, req *GetAppConfigRequest, opts ...http.CallOption) (rsp *GetAppConfigReply, err error)
	GetGameNotify(ctx context.Context, req *GetGameNotifyRequest, opts ...http.CallOption) (rsp *GetGameNotifyReply, err error)
	ReadGameNotify(ctx context.Context, req *ReadGameNotifyRequest, opts ...http.CallOption) (rsp *ReadGameNotifyReply, err error)
	TaskList(ctx context.Context, req *TaskListRequest, opts ...http.CallOption) (rsp *TaskListReply, err error)
	TaskReward(ctx context.Context, req *TaskRewardRequest, opts ...http.CallOption) (rsp *TaskRewardReply, err error)
}

type GameHTTPClientImpl struct {
	cc *http.Client
}

func NewGameHTTPClient(client *http.Client) GameHTTPClient {
	return &GameHTTPClientImpl{client}
}

func (c *GameHTTPClientImpl) AnnouncementList(ctx context.Context, in *AnnouncementListRequest, opts ...http.CallOption) (*AnnouncementListReply, error) {
	var out AnnouncementListReply
	pattern := "/st-games/v1/game/announcement/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGameAnnouncementList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *GameHTTPClientImpl) CheckSignup(ctx context.Context, in *CheckSignupRequest, opts ...http.CallOption) (*CheckSignupReply, error) {
	var out CheckSignupReply
	pattern := "/st-games/v1/game/check/signup"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGameCheckSignup))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *GameHTTPClientImpl) GameInfo(ctx context.Context, in *GameInfoRequest, opts ...http.CallOption) (*GameInfoReply, error) {
	var out GameInfoReply
	pattern := "/st-games/v1/game/info"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGameGameInfo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *GameHTTPClientImpl) GetAppConfig(ctx context.Context, in *GetAppConfigRequest, opts ...http.CallOption) (*GetAppConfigReply, error) {
	var out GetAppConfigReply
	pattern := "/st-games/v1/game/dict/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGameGetAppConfig))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *GameHTTPClientImpl) GetGameNotify(ctx context.Context, in *GetGameNotifyRequest, opts ...http.CallOption) (*GetGameNotifyReply, error) {
	var out GetGameNotifyReply
	pattern := "/st-games/v1/game/notify/get"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGameGetGameNotify))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *GameHTTPClientImpl) ReadGameNotify(ctx context.Context, in *ReadGameNotifyRequest, opts ...http.CallOption) (*ReadGameNotifyReply, error) {
	var out ReadGameNotifyReply
	pattern := "/st-games/v1/game/notify/read"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGameReadGameNotify))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *GameHTTPClientImpl) TaskList(ctx context.Context, in *TaskListRequest, opts ...http.CallOption) (*TaskListReply, error) {
	var out TaskListReply
	pattern := "/st-games/v1/game/task/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGameTaskList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *GameHTTPClientImpl) TaskReward(ctx context.Context, in *TaskRewardRequest, opts ...http.CallOption) (*TaskRewardReply, error) {
	var out TaskRewardReply
	pattern := "/st-games/v1/game/task/reward"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationGameTaskReward))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
