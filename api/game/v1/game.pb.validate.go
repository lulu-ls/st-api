// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: game/v1/game.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AnnouncementListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AnnouncementListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AnnouncementListRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AnnouncementListRequestMultiError, or nil if none found.
func (m *AnnouncementListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AnnouncementListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AnnouncementListRequestValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AnnouncementListRequestValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AnnouncementListRequestValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for AppId

	// no validation rules for ChannelId

	if len(errors) > 0 {
		return AnnouncementListRequestMultiError(errors)
	}

	return nil
}

// AnnouncementListRequestMultiError is an error wrapping multiple validation
// errors returned by AnnouncementListRequest.ValidateAll() if the designated
// constraints aren't met.
type AnnouncementListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AnnouncementListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AnnouncementListRequestMultiError) AllErrors() []error { return m }

// AnnouncementListRequestValidationError is the validation error returned by
// AnnouncementListRequest.Validate if the designated constraints aren't met.
type AnnouncementListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AnnouncementListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AnnouncementListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AnnouncementListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AnnouncementListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AnnouncementListRequestValidationError) ErrorName() string {
	return "AnnouncementListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AnnouncementListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAnnouncementListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AnnouncementListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AnnouncementListRequestValidationError{}

// Validate checks the field values on AnnouncementListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AnnouncementListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AnnouncementListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AnnouncementListReplyMultiError, or nil if none found.
func (m *AnnouncementListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *AnnouncementListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AnnouncementListReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AnnouncementListReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AnnouncementListReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return AnnouncementListReplyMultiError(errors)
	}

	return nil
}

// AnnouncementListReplyMultiError is an error wrapping multiple validation
// errors returned by AnnouncementListReply.ValidateAll() if the designated
// constraints aren't met.
type AnnouncementListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AnnouncementListReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AnnouncementListReplyMultiError) AllErrors() []error { return m }

// AnnouncementListReplyValidationError is the validation error returned by
// AnnouncementListReply.Validate if the designated constraints aren't met.
type AnnouncementListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AnnouncementListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AnnouncementListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AnnouncementListReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AnnouncementListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AnnouncementListReplyValidationError) ErrorName() string {
	return "AnnouncementListReplyValidationError"
}

// Error satisfies the builtin error interface
func (e AnnouncementListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAnnouncementListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AnnouncementListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AnnouncementListReplyValidationError{}

// Validate checks the field values on AnnouncementListItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AnnouncementListItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AnnouncementListItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AnnouncementListItemMultiError, or nil if none found.
func (m *AnnouncementListItem) ValidateAll() error {
	return m.validate(true)
}

func (m *AnnouncementListItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Title

	// no validation rules for Information

	// no validation rules for Image

	// no validation rules for Type

	// no validation rules for Subtitle

	if len(errors) > 0 {
		return AnnouncementListItemMultiError(errors)
	}

	return nil
}

// AnnouncementListItemMultiError is an error wrapping multiple validation
// errors returned by AnnouncementListItem.ValidateAll() if the designated
// constraints aren't met.
type AnnouncementListItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AnnouncementListItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AnnouncementListItemMultiError) AllErrors() []error { return m }

// AnnouncementListItemValidationError is the validation error returned by
// AnnouncementListItem.Validate if the designated constraints aren't met.
type AnnouncementListItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AnnouncementListItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AnnouncementListItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AnnouncementListItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AnnouncementListItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AnnouncementListItemValidationError) ErrorName() string {
	return "AnnouncementListItemValidationError"
}

// Error satisfies the builtin error interface
func (e AnnouncementListItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAnnouncementListItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AnnouncementListItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AnnouncementListItemValidationError{}

// Validate checks the field values on ActivityListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ActivityListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ActivityListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ActivityListRequestMultiError, or nil if none found.
func (m *ActivityListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ActivityListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ActivityListRequestValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ActivityListRequestValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ActivityListRequestValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for AppId

	// no validation rules for ChannelId

	// no validation rules for UserId

	if len(errors) > 0 {
		return ActivityListRequestMultiError(errors)
	}

	return nil
}

// ActivityListRequestMultiError is an error wrapping multiple validation
// errors returned by ActivityListRequest.ValidateAll() if the designated
// constraints aren't met.
type ActivityListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ActivityListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ActivityListRequestMultiError) AllErrors() []error { return m }

// ActivityListRequestValidationError is the validation error returned by
// ActivityListRequest.Validate if the designated constraints aren't met.
type ActivityListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ActivityListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ActivityListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ActivityListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ActivityListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ActivityListRequestValidationError) ErrorName() string {
	return "ActivityListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ActivityListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sActivityListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ActivityListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ActivityListRequestValidationError{}

// Validate checks the field values on ActivityListReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ActivityListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ActivityListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ActivityListReplyMultiError, or nil if none found.
func (m *ActivityListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ActivityListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ActivityListReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ActivityListReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ActivityListReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return ActivityListReplyMultiError(errors)
	}

	return nil
}

// ActivityListReplyMultiError is an error wrapping multiple validation errors
// returned by ActivityListReply.ValidateAll() if the designated constraints
// aren't met.
type ActivityListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ActivityListReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ActivityListReplyMultiError) AllErrors() []error { return m }

// ActivityListReplyValidationError is the validation error returned by
// ActivityListReply.Validate if the designated constraints aren't met.
type ActivityListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ActivityListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ActivityListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ActivityListReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ActivityListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ActivityListReplyValidationError) ErrorName() string {
	return "ActivityListReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ActivityListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sActivityListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ActivityListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ActivityListReplyValidationError{}

// Validate checks the field values on ActivityListItem with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ActivityListItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ActivityListItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ActivityListItemMultiError, or nil if none found.
func (m *ActivityListItem) ValidateAll() error {
	return m.validate(true)
}

func (m *ActivityListItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ActivityId

	// no validation rules for Title

	// no validation rules for Subtitle

	// no validation rules for Information

	// no validation rules for Image

	// no validation rules for Type

	// no validation rules for Action

	// no validation rules for Name

	if len(errors) > 0 {
		return ActivityListItemMultiError(errors)
	}

	return nil
}

// ActivityListItemMultiError is an error wrapping multiple validation errors
// returned by ActivityListItem.ValidateAll() if the designated constraints
// aren't met.
type ActivityListItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ActivityListItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ActivityListItemMultiError) AllErrors() []error { return m }

// ActivityListItemValidationError is the validation error returned by
// ActivityListItem.Validate if the designated constraints aren't met.
type ActivityListItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ActivityListItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ActivityListItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ActivityListItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ActivityListItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ActivityListItemValidationError) ErrorName() string { return "ActivityListItemValidationError" }

// Error satisfies the builtin error interface
func (e ActivityListItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sActivityListItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ActivityListItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ActivityListItemValidationError{}

// Validate checks the field values on TaskDetailRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TaskDetailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TaskDetailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TaskDetailRequestMultiError, or nil if none found.
func (m *TaskDetailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TaskDetailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AppId

	// no validation rules for ChannelId

	// no validation rules for UserId

	if m.GetActivityId() <= 0 {
		err := TaskDetailRequestValidationError{
			field:  "ActivityId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return TaskDetailRequestMultiError(errors)
	}

	return nil
}

// TaskDetailRequestMultiError is an error wrapping multiple validation errors
// returned by TaskDetailRequest.ValidateAll() if the designated constraints
// aren't met.
type TaskDetailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TaskDetailRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TaskDetailRequestMultiError) AllErrors() []error { return m }

// TaskDetailRequestValidationError is the validation error returned by
// TaskDetailRequest.Validate if the designated constraints aren't met.
type TaskDetailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TaskDetailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TaskDetailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TaskDetailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TaskDetailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TaskDetailRequestValidationError) ErrorName() string {
	return "TaskDetailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TaskDetailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTaskDetailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TaskDetailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TaskDetailRequestValidationError{}

// Validate checks the field values on TaskDetailReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TaskDetailReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TaskDetailReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TaskDetailReplyMultiError, or nil if none found.
func (m *TaskDetailReply) ValidateAll() error {
	return m.validate(true)
}

func (m *TaskDetailReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TaskDetailReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TaskDetailReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TaskDetailReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TaskDetailReplyMultiError(errors)
	}

	return nil
}

// TaskDetailReplyMultiError is an error wrapping multiple validation errors
// returned by TaskDetailReply.ValidateAll() if the designated constraints
// aren't met.
type TaskDetailReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TaskDetailReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TaskDetailReplyMultiError) AllErrors() []error { return m }

// TaskDetailReplyValidationError is the validation error returned by
// TaskDetailReply.Validate if the designated constraints aren't met.
type TaskDetailReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TaskDetailReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TaskDetailReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TaskDetailReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TaskDetailReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TaskDetailReplyValidationError) ErrorName() string { return "TaskDetailReplyValidationError" }

// Error satisfies the builtin error interface
func (e TaskDetailReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTaskDetailReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TaskDetailReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TaskDetailReplyValidationError{}

// Validate checks the field values on TaskListItem with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TaskListItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TaskListItem with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TaskListItemMultiError, or
// nil if none found.
func (m *TaskListItem) ValidateAll() error {
	return m.validate(true)
}

func (m *TaskListItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TaskId

	// no validation rules for Title

	// no validation rules for Action

	// no validation rules for Url

	// no validation rules for Number

	// no validation rules for Process

	// no validation rules for Status

	for idx, item := range m.GetAward() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TaskListItemValidationError{
						field:  fmt.Sprintf("Award[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TaskListItemValidationError{
						field:  fmt.Sprintf("Award[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TaskListItemValidationError{
					field:  fmt.Sprintf("Award[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TaskListItemMultiError(errors)
	}

	return nil
}

// TaskListItemMultiError is an error wrapping multiple validation errors
// returned by TaskListItem.ValidateAll() if the designated constraints aren't met.
type TaskListItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TaskListItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TaskListItemMultiError) AllErrors() []error { return m }

// TaskListItemValidationError is the validation error returned by
// TaskListItem.Validate if the designated constraints aren't met.
type TaskListItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TaskListItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TaskListItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TaskListItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TaskListItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TaskListItemValidationError) ErrorName() string { return "TaskListItemValidationError" }

// Error satisfies the builtin error interface
func (e TaskListItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTaskListItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TaskListItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TaskListItemValidationError{}

// Validate checks the field values on TaskListAwardItem with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TaskListAwardItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TaskListAwardItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TaskListAwardItemMultiError, or nil if none found.
func (m *TaskListAwardItem) ValidateAll() error {
	return m.validate(true)
}

func (m *TaskListAwardItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ItemId

	// no validation rules for Name

	// no validation rules for Image

	// no validation rules for Quantity

	if len(errors) > 0 {
		return TaskListAwardItemMultiError(errors)
	}

	return nil
}

// TaskListAwardItemMultiError is an error wrapping multiple validation errors
// returned by TaskListAwardItem.ValidateAll() if the designated constraints
// aren't met.
type TaskListAwardItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TaskListAwardItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TaskListAwardItemMultiError) AllErrors() []error { return m }

// TaskListAwardItemValidationError is the validation error returned by
// TaskListAwardItem.Validate if the designated constraints aren't met.
type TaskListAwardItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TaskListAwardItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TaskListAwardItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TaskListAwardItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TaskListAwardItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TaskListAwardItemValidationError) ErrorName() string {
	return "TaskListAwardItemValidationError"
}

// Error satisfies the builtin error interface
func (e TaskListAwardItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTaskListAwardItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TaskListAwardItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TaskListAwardItemValidationError{}

// Validate checks the field values on TaskRewardRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TaskRewardRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TaskRewardRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TaskRewardRequestMultiError, or nil if none found.
func (m *TaskRewardRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TaskRewardRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if len(m.GetTaskIds()) < 1 {
		err := TaskRewardRequestValidationError{
			field:  "TaskIds",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetTaskIds() {
		_, _ = idx, item

		if item <= 0 {
			err := TaskRewardRequestValidationError{
				field:  fmt.Sprintf("TaskIds[%v]", idx),
				reason: "value must be greater than 0",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	if len(errors) > 0 {
		return TaskRewardRequestMultiError(errors)
	}

	return nil
}

// TaskRewardRequestMultiError is an error wrapping multiple validation errors
// returned by TaskRewardRequest.ValidateAll() if the designated constraints
// aren't met.
type TaskRewardRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TaskRewardRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TaskRewardRequestMultiError) AllErrors() []error { return m }

// TaskRewardRequestValidationError is the validation error returned by
// TaskRewardRequest.Validate if the designated constraints aren't met.
type TaskRewardRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TaskRewardRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TaskRewardRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TaskRewardRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TaskRewardRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TaskRewardRequestValidationError) ErrorName() string {
	return "TaskRewardRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TaskRewardRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTaskRewardRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TaskRewardRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TaskRewardRequestValidationError{}

// Validate checks the field values on TaskRewardReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TaskRewardReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TaskRewardReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TaskRewardReplyMultiError, or nil if none found.
func (m *TaskRewardReply) ValidateAll() error {
	return m.validate(true)
}

func (m *TaskRewardReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return TaskRewardReplyMultiError(errors)
	}

	return nil
}

// TaskRewardReplyMultiError is an error wrapping multiple validation errors
// returned by TaskRewardReply.ValidateAll() if the designated constraints
// aren't met.
type TaskRewardReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TaskRewardReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TaskRewardReplyMultiError) AllErrors() []error { return m }

// TaskRewardReplyValidationError is the validation error returned by
// TaskRewardReply.Validate if the designated constraints aren't met.
type TaskRewardReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TaskRewardReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TaskRewardReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TaskRewardReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TaskRewardReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TaskRewardReplyValidationError) ErrorName() string { return "TaskRewardReplyValidationError" }

// Error satisfies the builtin error interface
func (e TaskRewardReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTaskRewardReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TaskRewardReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TaskRewardReplyValidationError{}

// Validate checks the field values on GameInfoRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GameInfoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GameInfoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GameInfoRequestMultiError, or nil if none found.
func (m *GameInfoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GameInfoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AppId

	// no validation rules for ChannelId

	// no validation rules for UserId

	if len(errors) > 0 {
		return GameInfoRequestMultiError(errors)
	}

	return nil
}

// GameInfoRequestMultiError is an error wrapping multiple validation errors
// returned by GameInfoRequest.ValidateAll() if the designated constraints
// aren't met.
type GameInfoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GameInfoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GameInfoRequestMultiError) AllErrors() []error { return m }

// GameInfoRequestValidationError is the validation error returned by
// GameInfoRequest.Validate if the designated constraints aren't met.
type GameInfoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GameInfoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GameInfoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GameInfoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GameInfoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GameInfoRequestValidationError) ErrorName() string { return "GameInfoRequestValidationError" }

// Error satisfies the builtin error interface
func (e GameInfoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGameInfoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GameInfoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GameInfoRequestValidationError{}

// Validate checks the field values on GameInfoReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GameInfoReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GameInfoReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GameInfoReplyMultiError, or
// nil if none found.
func (m *GameInfoReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GameInfoReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for InGame

	// no validation rules for GameId

	// no validation rules for GameType

	// no validation rules for GameCategory

	// no validation rules for TableId

	if len(errors) > 0 {
		return GameInfoReplyMultiError(errors)
	}

	return nil
}

// GameInfoReplyMultiError is an error wrapping multiple validation errors
// returned by GameInfoReply.ValidateAll() if the designated constraints
// aren't met.
type GameInfoReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GameInfoReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GameInfoReplyMultiError) AllErrors() []error { return m }

// GameInfoReplyValidationError is the validation error returned by
// GameInfoReply.Validate if the designated constraints aren't met.
type GameInfoReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GameInfoReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GameInfoReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GameInfoReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GameInfoReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GameInfoReplyValidationError) ErrorName() string { return "GameInfoReplyValidationError" }

// Error satisfies the builtin error interface
func (e GameInfoReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGameInfoReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GameInfoReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GameInfoReplyValidationError{}

// Validate checks the field values on GetGameNotifyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGameNotifyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGameNotifyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGameNotifyRequestMultiError, or nil if none found.
func (m *GetGameNotifyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGameNotifyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AppId

	// no validation rules for ChannelId

	// no validation rules for UserId

	// no validation rules for NotifyType

	if len(errors) > 0 {
		return GetGameNotifyRequestMultiError(errors)
	}

	return nil
}

// GetGameNotifyRequestMultiError is an error wrapping multiple validation
// errors returned by GetGameNotifyRequest.ValidateAll() if the designated
// constraints aren't met.
type GetGameNotifyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGameNotifyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGameNotifyRequestMultiError) AllErrors() []error { return m }

// GetGameNotifyRequestValidationError is the validation error returned by
// GetGameNotifyRequest.Validate if the designated constraints aren't met.
type GetGameNotifyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGameNotifyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGameNotifyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGameNotifyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGameNotifyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGameNotifyRequestValidationError) ErrorName() string {
	return "GetGameNotifyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetGameNotifyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGameNotifyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGameNotifyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGameNotifyRequestValidationError{}

// Validate checks the field values on GetGameNotifyReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGameNotifyReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGameNotifyReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGameNotifyReplyMultiError, or nil if none found.
func (m *GetGameNotifyReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGameNotifyReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsShow

	if len(errors) > 0 {
		return GetGameNotifyReplyMultiError(errors)
	}

	return nil
}

// GetGameNotifyReplyMultiError is an error wrapping multiple validation errors
// returned by GetGameNotifyReply.ValidateAll() if the designated constraints
// aren't met.
type GetGameNotifyReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGameNotifyReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGameNotifyReplyMultiError) AllErrors() []error { return m }

// GetGameNotifyReplyValidationError is the validation error returned by
// GetGameNotifyReply.Validate if the designated constraints aren't met.
type GetGameNotifyReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGameNotifyReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGameNotifyReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGameNotifyReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGameNotifyReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGameNotifyReplyValidationError) ErrorName() string {
	return "GetGameNotifyReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetGameNotifyReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGameNotifyReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGameNotifyReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGameNotifyReplyValidationError{}

// Validate checks the field values on ReadGameNotifyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReadGameNotifyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadGameNotifyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReadGameNotifyRequestMultiError, or nil if none found.
func (m *ReadGameNotifyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadGameNotifyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AppId

	// no validation rules for ChannelId

	// no validation rules for UserId

	// no validation rules for NotifyType

	if len(errors) > 0 {
		return ReadGameNotifyRequestMultiError(errors)
	}

	return nil
}

// ReadGameNotifyRequestMultiError is an error wrapping multiple validation
// errors returned by ReadGameNotifyRequest.ValidateAll() if the designated
// constraints aren't met.
type ReadGameNotifyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadGameNotifyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadGameNotifyRequestMultiError) AllErrors() []error { return m }

// ReadGameNotifyRequestValidationError is the validation error returned by
// ReadGameNotifyRequest.Validate if the designated constraints aren't met.
type ReadGameNotifyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadGameNotifyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadGameNotifyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadGameNotifyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadGameNotifyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadGameNotifyRequestValidationError) ErrorName() string {
	return "ReadGameNotifyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ReadGameNotifyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadGameNotifyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadGameNotifyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadGameNotifyRequestValidationError{}

// Validate checks the field values on ReadGameNotifyReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReadGameNotifyReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReadGameNotifyReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReadGameNotifyReplyMultiError, or nil if none found.
func (m *ReadGameNotifyReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ReadGameNotifyReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ReadGameNotifyReplyMultiError(errors)
	}

	return nil
}

// ReadGameNotifyReplyMultiError is an error wrapping multiple validation
// errors returned by ReadGameNotifyReply.ValidateAll() if the designated
// constraints aren't met.
type ReadGameNotifyReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReadGameNotifyReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReadGameNotifyReplyMultiError) AllErrors() []error { return m }

// ReadGameNotifyReplyValidationError is the validation error returned by
// ReadGameNotifyReply.Validate if the designated constraints aren't met.
type ReadGameNotifyReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReadGameNotifyReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReadGameNotifyReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReadGameNotifyReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReadGameNotifyReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReadGameNotifyReplyValidationError) ErrorName() string {
	return "ReadGameNotifyReplyValidationError"
}

// Error satisfies the builtin error interface
func (e ReadGameNotifyReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReadGameNotifyReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReadGameNotifyReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReadGameNotifyReplyValidationError{}

// Validate checks the field values on GetAppConfigRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetAppConfigRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAppConfigRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAppConfigRequestMultiError, or nil if none found.
func (m *GetAppConfigRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAppConfigRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AppId

	// no validation rules for ChannelId

	// no validation rules for Version

	// no validation rules for Device

	// no validation rules for VersionType

	if len(errors) > 0 {
		return GetAppConfigRequestMultiError(errors)
	}

	return nil
}

// GetAppConfigRequestMultiError is an error wrapping multiple validation
// errors returned by GetAppConfigRequest.ValidateAll() if the designated
// constraints aren't met.
type GetAppConfigRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAppConfigRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAppConfigRequestMultiError) AllErrors() []error { return m }

// GetAppConfigRequestValidationError is the validation error returned by
// GetAppConfigRequest.Validate if the designated constraints aren't met.
type GetAppConfigRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAppConfigRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAppConfigRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAppConfigRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAppConfigRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAppConfigRequestValidationError) ErrorName() string {
	return "GetAppConfigRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetAppConfigRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAppConfigRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAppConfigRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAppConfigRequestValidationError{}

// Validate checks the field values on GetAppConfigReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetAppConfigReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAppConfigReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAppConfigReplyMultiError, or nil if none found.
func (m *GetAppConfigReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAppConfigReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetAppConfigReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetAppConfigReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetAppConfigReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetAppConfigReplyMultiError(errors)
	}

	return nil
}

// GetAppConfigReplyMultiError is an error wrapping multiple validation errors
// returned by GetAppConfigReply.ValidateAll() if the designated constraints
// aren't met.
type GetAppConfigReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAppConfigReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAppConfigReplyMultiError) AllErrors() []error { return m }

// GetAppConfigReplyValidationError is the validation error returned by
// GetAppConfigReply.Validate if the designated constraints aren't met.
type GetAppConfigReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAppConfigReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAppConfigReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAppConfigReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAppConfigReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAppConfigReplyValidationError) ErrorName() string {
	return "GetAppConfigReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetAppConfigReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAppConfigReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAppConfigReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAppConfigReplyValidationError{}

// Validate checks the field values on GetAppConfigItem with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetAppConfigItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetAppConfigItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetAppConfigItemMultiError, or nil if none found.
func (m *GetAppConfigItem) ValidateAll() error {
	return m.validate(true)
}

func (m *GetAppConfigItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AppConfigId

	// no validation rules for Key

	// no validation rules for Value

	if len(errors) > 0 {
		return GetAppConfigItemMultiError(errors)
	}

	return nil
}

// GetAppConfigItemMultiError is an error wrapping multiple validation errors
// returned by GetAppConfigItem.ValidateAll() if the designated constraints
// aren't met.
type GetAppConfigItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetAppConfigItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetAppConfigItemMultiError) AllErrors() []error { return m }

// GetAppConfigItemValidationError is the validation error returned by
// GetAppConfigItem.Validate if the designated constraints aren't met.
type GetAppConfigItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetAppConfigItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetAppConfigItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetAppConfigItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetAppConfigItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetAppConfigItemValidationError) ErrorName() string { return "GetAppConfigItemValidationError" }

// Error satisfies the builtin error interface
func (e GetAppConfigItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetAppConfigItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetAppConfigItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetAppConfigItemValidationError{}

// Validate checks the field values on CheckSignupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CheckSignupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckSignupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckSignupRequestMultiError, or nil if none found.
func (m *CheckSignupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckSignupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for GameConfigId

	if len(errors) > 0 {
		return CheckSignupRequestMultiError(errors)
	}

	return nil
}

// CheckSignupRequestMultiError is an error wrapping multiple validation errors
// returned by CheckSignupRequest.ValidateAll() if the designated constraints
// aren't met.
type CheckSignupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckSignupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckSignupRequestMultiError) AllErrors() []error { return m }

// CheckSignupRequestValidationError is the validation error returned by
// CheckSignupRequest.Validate if the designated constraints aren't met.
type CheckSignupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckSignupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckSignupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckSignupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckSignupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckSignupRequestValidationError) ErrorName() string {
	return "CheckSignupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CheckSignupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckSignupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckSignupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckSignupRequestValidationError{}

// Validate checks the field values on CheckSignupReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CheckSignupReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CheckSignupReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CheckSignupReplyMultiError, or nil if none found.
func (m *CheckSignupReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CheckSignupReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CheckSignupReplyMultiError(errors)
	}

	return nil
}

// CheckSignupReplyMultiError is an error wrapping multiple validation errors
// returned by CheckSignupReply.ValidateAll() if the designated constraints
// aren't met.
type CheckSignupReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CheckSignupReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CheckSignupReplyMultiError) AllErrors() []error { return m }

// CheckSignupReplyValidationError is the validation error returned by
// CheckSignupReply.Validate if the designated constraints aren't met.
type CheckSignupReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CheckSignupReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CheckSignupReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CheckSignupReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CheckSignupReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CheckSignupReplyValidationError) ErrorName() string { return "CheckSignupReplyValidationError" }

// Error satisfies the builtin error interface
func (e CheckSignupReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCheckSignupReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CheckSignupReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CheckSignupReplyValidationError{}

// Validate checks the field values on SignListRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *SignListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SignListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SignListRequestMultiError, or nil if none found.
func (m *SignListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SignListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AppId

	// no validation rules for ChannelId

	// no validation rules for UserId

	if len(errors) > 0 {
		return SignListRequestMultiError(errors)
	}

	return nil
}

// SignListRequestMultiError is an error wrapping multiple validation errors
// returned by SignListRequest.ValidateAll() if the designated constraints
// aren't met.
type SignListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SignListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SignListRequestMultiError) AllErrors() []error { return m }

// SignListRequestValidationError is the validation error returned by
// SignListRequest.Validate if the designated constraints aren't met.
type SignListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SignListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SignListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SignListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SignListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SignListRequestValidationError) ErrorName() string { return "SignListRequestValidationError" }

// Error satisfies the builtin error interface
func (e SignListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSignListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SignListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SignListRequestValidationError{}

// Validate checks the field values on SignListReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SignListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SignListReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SignListReplyMultiError, or
// nil if none found.
func (m *SignListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SignListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SignListReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SignListReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SignListReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return SignListReplyMultiError(errors)
	}

	return nil
}

// SignListReplyMultiError is an error wrapping multiple validation errors
// returned by SignListReply.ValidateAll() if the designated constraints
// aren't met.
type SignListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SignListReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SignListReplyMultiError) AllErrors() []error { return m }

// SignListReplyValidationError is the validation error returned by
// SignListReply.Validate if the designated constraints aren't met.
type SignListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SignListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SignListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SignListReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SignListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SignListReplyValidationError) ErrorName() string { return "SignListReplyValidationError" }

// Error satisfies the builtin error interface
func (e SignListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSignListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SignListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SignListReplyValidationError{}

// Validate checks the field values on SignListItem with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SignListItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SignListItem with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SignListItemMultiError, or
// nil if none found.
func (m *SignListItem) ValidateAll() error {
	return m.validate(true)
}

func (m *SignListItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SignConfigId

	// no validation rules for Type

	// no validation rules for Title

	// no validation rules for Image

	// no validation rules for Day

	// no validation rules for DayName

	// no validation rules for Status

	for idx, item := range m.GetAward() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SignListItemValidationError{
						field:  fmt.Sprintf("Award[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SignListItemValidationError{
						field:  fmt.Sprintf("Award[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SignListItemValidationError{
					field:  fmt.Sprintf("Award[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SignListItemMultiError(errors)
	}

	return nil
}

// SignListItemMultiError is an error wrapping multiple validation errors
// returned by SignListItem.ValidateAll() if the designated constraints aren't met.
type SignListItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SignListItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SignListItemMultiError) AllErrors() []error { return m }

// SignListItemValidationError is the validation error returned by
// SignListItem.Validate if the designated constraints aren't met.
type SignListItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SignListItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SignListItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SignListItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SignListItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SignListItemValidationError) ErrorName() string { return "SignListItemValidationError" }

// Error satisfies the builtin error interface
func (e SignListItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSignListItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SignListItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SignListItemValidationError{}

// Validate checks the field values on SignAwardItem with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SignAwardItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SignAwardItem with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SignAwardItemMultiError, or
// nil if none found.
func (m *SignAwardItem) ValidateAll() error {
	return m.validate(true)
}

func (m *SignAwardItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ItemId

	// no validation rules for Name

	// no validation rules for Image

	// no validation rules for Quantity

	// no validation rules for ItemType

	if len(errors) > 0 {
		return SignAwardItemMultiError(errors)
	}

	return nil
}

// SignAwardItemMultiError is an error wrapping multiple validation errors
// returned by SignAwardItem.ValidateAll() if the designated constraints
// aren't met.
type SignAwardItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SignAwardItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SignAwardItemMultiError) AllErrors() []error { return m }

// SignAwardItemValidationError is the validation error returned by
// SignAwardItem.Validate if the designated constraints aren't met.
type SignAwardItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SignAwardItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SignAwardItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SignAwardItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SignAwardItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SignAwardItemValidationError) ErrorName() string { return "SignAwardItemValidationError" }

// Error satisfies the builtin error interface
func (e SignAwardItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSignAwardItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SignAwardItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SignAwardItemValidationError{}

// Validate checks the field values on SignInRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SignInRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SignInRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SignInRequestMultiError, or
// nil if none found.
func (m *SignInRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SignInRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetSignConfigId() <= 0 {
		err := SignInRequestValidationError{
			field:  "SignConfigId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for SignType

	// no validation rules for UserId

	if len(errors) > 0 {
		return SignInRequestMultiError(errors)
	}

	return nil
}

// SignInRequestMultiError is an error wrapping multiple validation errors
// returned by SignInRequest.ValidateAll() if the designated constraints
// aren't met.
type SignInRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SignInRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SignInRequestMultiError) AllErrors() []error { return m }

// SignInRequestValidationError is the validation error returned by
// SignInRequest.Validate if the designated constraints aren't met.
type SignInRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SignInRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SignInRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SignInRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SignInRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SignInRequestValidationError) ErrorName() string { return "SignInRequestValidationError" }

// Error satisfies the builtin error interface
func (e SignInRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSignInRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SignInRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SignInRequestValidationError{}

// Validate checks the field values on SignInReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SignInReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SignInReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SignInReplyMultiError, or
// nil if none found.
func (m *SignInReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SignInReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SignInReplyMultiError(errors)
	}

	return nil
}

// SignInReplyMultiError is an error wrapping multiple validation errors
// returned by SignInReply.ValidateAll() if the designated constraints aren't met.
type SignInReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SignInReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SignInReplyMultiError) AllErrors() []error { return m }

// SignInReplyValidationError is the validation error returned by
// SignInReply.Validate if the designated constraints aren't met.
type SignInReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SignInReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SignInReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SignInReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SignInReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SignInReplyValidationError) ErrorName() string { return "SignInReplyValidationError" }

// Error satisfies the builtin error interface
func (e SignInReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSignInReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SignInReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SignInReplyValidationError{}

// Validate checks the field values on RedListRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RedListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RedListRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RedListRequestMultiError,
// or nil if none found.
func (m *RedListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RedListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for AppId

	// no validation rules for ChannelId

	if len(errors) > 0 {
		return RedListRequestMultiError(errors)
	}

	return nil
}

// RedListRequestMultiError is an error wrapping multiple validation errors
// returned by RedListRequest.ValidateAll() if the designated constraints
// aren't met.
type RedListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RedListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RedListRequestMultiError) AllErrors() []error { return m }

// RedListRequestValidationError is the validation error returned by
// RedListRequest.Validate if the designated constraints aren't met.
type RedListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RedListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RedListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RedListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RedListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RedListRequestValidationError) ErrorName() string { return "RedListRequestValidationError" }

// Error satisfies the builtin error interface
func (e RedListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRedListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RedListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RedListRequestValidationError{}

// Validate checks the field values on RedListReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RedListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RedListReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RedListReplyMultiError, or
// nil if none found.
func (m *RedListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *RedListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSignIn()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RedListReplyValidationError{
					field:  "SignIn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RedListReplyValidationError{
					field:  "SignIn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSignIn()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RedListReplyValidationError{
				field:  "SignIn",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetActivity() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RedListReplyValidationError{
						field:  fmt.Sprintf("Activity[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RedListReplyValidationError{
						field:  fmt.Sprintf("Activity[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RedListReplyValidationError{
					field:  fmt.Sprintf("Activity[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetAnnouncement() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RedListReplyValidationError{
						field:  fmt.Sprintf("Announcement[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RedListReplyValidationError{
						field:  fmt.Sprintf("Announcement[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RedListReplyValidationError{
					field:  fmt.Sprintf("Announcement[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RedListReplyMultiError(errors)
	}

	return nil
}

// RedListReplyMultiError is an error wrapping multiple validation errors
// returned by RedListReply.ValidateAll() if the designated constraints aren't met.
type RedListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RedListReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RedListReplyMultiError) AllErrors() []error { return m }

// RedListReplyValidationError is the validation error returned by
// RedListReply.Validate if the designated constraints aren't met.
type RedListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RedListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RedListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RedListReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RedListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RedListReplyValidationError) ErrorName() string { return "RedListReplyValidationError" }

// Error satisfies the builtin error interface
func (e RedListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRedListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RedListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RedListReplyValidationError{}

// Validate checks the field values on SignIn with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SignIn) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SignIn with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SignInMultiError, or nil if none found.
func (m *SignIn) ValidateAll() error {
	return m.validate(true)
}

func (m *SignIn) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Red

	if len(errors) > 0 {
		return SignInMultiError(errors)
	}

	return nil
}

// SignInMultiError is an error wrapping multiple validation errors returned by
// SignIn.ValidateAll() if the designated constraints aren't met.
type SignInMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SignInMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SignInMultiError) AllErrors() []error { return m }

// SignInValidationError is the validation error returned by SignIn.Validate if
// the designated constraints aren't met.
type SignInValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SignInValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SignInValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SignInValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SignInValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SignInValidationError) ErrorName() string { return "SignInValidationError" }

// Error satisfies the builtin error interface
func (e SignInValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSignIn.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SignInValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SignInValidationError{}

// Validate checks the field values on Activity with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Activity) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Activity with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ActivityMultiError, or nil
// if none found.
func (m *Activity) ValidateAll() error {
	return m.validate(true)
}

func (m *Activity) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ActivityId

	// no validation rules for Red

	if len(errors) > 0 {
		return ActivityMultiError(errors)
	}

	return nil
}

// ActivityMultiError is an error wrapping multiple validation errors returned
// by Activity.ValidateAll() if the designated constraints aren't met.
type ActivityMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ActivityMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ActivityMultiError) AllErrors() []error { return m }

// ActivityValidationError is the validation error returned by
// Activity.Validate if the designated constraints aren't met.
type ActivityValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ActivityValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ActivityValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ActivityValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ActivityValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ActivityValidationError) ErrorName() string { return "ActivityValidationError" }

// Error satisfies the builtin error interface
func (e ActivityValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sActivity.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ActivityValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ActivityValidationError{}

// Validate checks the field values on Announcement with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Announcement) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Announcement with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AnnouncementMultiError, or
// nil if none found.
func (m *Announcement) ValidateAll() error {
	return m.validate(true)
}

func (m *Announcement) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return AnnouncementMultiError(errors)
	}

	return nil
}

// AnnouncementMultiError is an error wrapping multiple validation errors
// returned by Announcement.ValidateAll() if the designated constraints aren't met.
type AnnouncementMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AnnouncementMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AnnouncementMultiError) AllErrors() []error { return m }

// AnnouncementValidationError is the validation error returned by
// Announcement.Validate if the designated constraints aren't met.
type AnnouncementValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AnnouncementValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AnnouncementValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AnnouncementValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AnnouncementValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AnnouncementValidationError) ErrorName() string { return "AnnouncementValidationError" }

// Error satisfies the builtin error interface
func (e AnnouncementValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAnnouncement.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AnnouncementValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AnnouncementValidationError{}
