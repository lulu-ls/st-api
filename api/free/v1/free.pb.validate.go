// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: free/v1/free.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on FreeTypeRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *FreeTypeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FreeTypeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FreeTypeRequestMultiError, or nil if none found.
func (m *FreeTypeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FreeTypeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AppId

	// no validation rules for GameTypeId

	if len(errors) > 0 {
		return FreeTypeRequestMultiError(errors)
	}

	return nil
}

// FreeTypeRequestMultiError is an error wrapping multiple validation errors
// returned by FreeTypeRequest.ValidateAll() if the designated constraints
// aren't met.
type FreeTypeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FreeTypeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FreeTypeRequestMultiError) AllErrors() []error { return m }

// FreeTypeRequestValidationError is the validation error returned by
// FreeTypeRequest.Validate if the designated constraints aren't met.
type FreeTypeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FreeTypeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FreeTypeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FreeTypeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FreeTypeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FreeTypeRequestValidationError) ErrorName() string { return "FreeTypeRequestValidationError" }

// Error satisfies the builtin error interface
func (e FreeTypeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFreeTypeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FreeTypeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FreeTypeRequestValidationError{}

// Validate checks the field values on FreeTypeReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FreeTypeReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FreeTypeReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FreeTypeReplyMultiError, or
// nil if none found.
func (m *FreeTypeReply) ValidateAll() error {
	return m.validate(true)
}

func (m *FreeTypeReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FreeTypeReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FreeTypeReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FreeTypeReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return FreeTypeReplyMultiError(errors)
	}

	return nil
}

// FreeTypeReplyMultiError is an error wrapping multiple validation errors
// returned by FreeTypeReply.ValidateAll() if the designated constraints
// aren't met.
type FreeTypeReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FreeTypeReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FreeTypeReplyMultiError) AllErrors() []error { return m }

// FreeTypeReplyValidationError is the validation error returned by
// FreeTypeReply.Validate if the designated constraints aren't met.
type FreeTypeReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FreeTypeReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FreeTypeReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FreeTypeReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FreeTypeReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FreeTypeReplyValidationError) ErrorName() string { return "FreeTypeReplyValidationError" }

// Error satisfies the builtin error interface
func (e FreeTypeReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFreeTypeReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FreeTypeReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FreeTypeReplyValidationError{}

// Validate checks the field values on FreeTypeItem with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FreeTypeItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FreeTypeItem with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FreeTypeItemMultiError, or
// nil if none found.
func (m *FreeTypeItem) ValidateAll() error {
	return m.validate(true)
}

func (m *FreeTypeItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GameSeriesId

	// no validation rules for Name

	if len(errors) > 0 {
		return FreeTypeItemMultiError(errors)
	}

	return nil
}

// FreeTypeItemMultiError is an error wrapping multiple validation errors
// returned by FreeTypeItem.ValidateAll() if the designated constraints aren't met.
type FreeTypeItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FreeTypeItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FreeTypeItemMultiError) AllErrors() []error { return m }

// FreeTypeItemValidationError is the validation error returned by
// FreeTypeItem.Validate if the designated constraints aren't met.
type FreeTypeItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FreeTypeItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FreeTypeItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FreeTypeItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FreeTypeItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FreeTypeItemValidationError) ErrorName() string { return "FreeTypeItemValidationError" }

// Error satisfies the builtin error interface
func (e FreeTypeItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFreeTypeItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FreeTypeItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FreeTypeItemValidationError{}

// Validate checks the field values on FreeListRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *FreeListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FreeListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FreeListRequestMultiError, or nil if none found.
func (m *FreeListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FreeListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AppId

	if m.GetGameSeriesId() <= 0 {
		err := FreeListRequestValidationError{
			field:  "GameSeriesId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return FreeListRequestMultiError(errors)
	}

	return nil
}

// FreeListRequestMultiError is an error wrapping multiple validation errors
// returned by FreeListRequest.ValidateAll() if the designated constraints
// aren't met.
type FreeListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FreeListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FreeListRequestMultiError) AllErrors() []error { return m }

// FreeListRequestValidationError is the validation error returned by
// FreeListRequest.Validate if the designated constraints aren't met.
type FreeListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FreeListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FreeListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FreeListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FreeListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FreeListRequestValidationError) ErrorName() string { return "FreeListRequestValidationError" }

// Error satisfies the builtin error interface
func (e FreeListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFreeListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FreeListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FreeListRequestValidationError{}

// Validate checks the field values on FreeListReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FreeListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FreeListReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FreeListReplyMultiError, or
// nil if none found.
func (m *FreeListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *FreeListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FreeListReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FreeListReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FreeListReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return FreeListReplyMultiError(errors)
	}

	return nil
}

// FreeListReplyMultiError is an error wrapping multiple validation errors
// returned by FreeListReply.ValidateAll() if the designated constraints
// aren't met.
type FreeListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FreeListReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FreeListReplyMultiError) AllErrors() []error { return m }

// FreeListReplyValidationError is the validation error returned by
// FreeListReply.Validate if the designated constraints aren't met.
type FreeListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FreeListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FreeListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FreeListReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FreeListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FreeListReplyValidationError) ErrorName() string { return "FreeListReplyValidationError" }

// Error satisfies the builtin error interface
func (e FreeListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFreeListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FreeListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FreeListReplyValidationError{}

// Validate checks the field values on FreeListItem with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *FreeListItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FreeListItem with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in FreeListItemMultiError, or
// nil if none found.
func (m *FreeListItem) ValidateAll() error {
	return m.validate(true)
}

func (m *FreeListItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GameFreeConfigId

	// no validation rules for GameTypeId

	// no validation rules for GameTypeName

	// no validation rules for Name

	// no validation rules for Title

	// no validation rules for Image

	// no validation rules for Desc

	// no validation rules for ItemId

	// no validation rules for ItemName

	// no validation rules for ItemImage

	// no validation rules for Quantity

	// no validation rules for MinQuantity

	// no validation rules for MaxQuantity

	// no validation rules for MaxMultiple

	// no validation rules for Robot

	// no validation rules for BaseScore

	// no validation rules for PeopleNo

	// no validation rules for Bomb

	if len(errors) > 0 {
		return FreeListItemMultiError(errors)
	}

	return nil
}

// FreeListItemMultiError is an error wrapping multiple validation errors
// returned by FreeListItem.ValidateAll() if the designated constraints aren't met.
type FreeListItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FreeListItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FreeListItemMultiError) AllErrors() []error { return m }

// FreeListItemValidationError is the validation error returned by
// FreeListItem.Validate if the designated constraints aren't met.
type FreeListItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FreeListItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FreeListItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FreeListItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FreeListItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FreeListItemValidationError) ErrorName() string { return "FreeListItemValidationError" }

// Error satisfies the builtin error interface
func (e FreeListItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFreeListItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FreeListItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FreeListItemValidationError{}

// Validate checks the field values on FreeSignupRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *FreeSignupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FreeSignupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FreeSignupRequestMultiError, or nil if none found.
func (m *FreeSignupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FreeSignupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	if m.GetGameFreeConfigId() <= 0 {
		err := FreeSignupRequestValidationError{
			field:  "GameFreeConfigId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return FreeSignupRequestMultiError(errors)
	}

	return nil
}

// FreeSignupRequestMultiError is an error wrapping multiple validation errors
// returned by FreeSignupRequest.ValidateAll() if the designated constraints
// aren't met.
type FreeSignupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FreeSignupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FreeSignupRequestMultiError) AllErrors() []error { return m }

// FreeSignupRequestValidationError is the validation error returned by
// FreeSignupRequest.Validate if the designated constraints aren't met.
type FreeSignupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FreeSignupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FreeSignupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FreeSignupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FreeSignupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FreeSignupRequestValidationError) ErrorName() string {
	return "FreeSignupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FreeSignupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFreeSignupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FreeSignupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FreeSignupRequestValidationError{}

// Validate checks the field values on FreeSignupReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *FreeSignupReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FreeSignupReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FreeSignupReplyMultiError, or nil if none found.
func (m *FreeSignupReply) ValidateAll() error {
	return m.validate(true)
}

func (m *FreeSignupReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return FreeSignupReplyMultiError(errors)
	}

	return nil
}

// FreeSignupReplyMultiError is an error wrapping multiple validation errors
// returned by FreeSignupReply.ValidateAll() if the designated constraints
// aren't met.
type FreeSignupReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FreeSignupReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FreeSignupReplyMultiError) AllErrors() []error { return m }

// FreeSignupReplyValidationError is the validation error returned by
// FreeSignupReply.Validate if the designated constraints aren't met.
type FreeSignupReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FreeSignupReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FreeSignupReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FreeSignupReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FreeSignupReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FreeSignupReplyValidationError) ErrorName() string { return "FreeSignupReplyValidationError" }

// Error satisfies the builtin error interface
func (e FreeSignupReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFreeSignupReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FreeSignupReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FreeSignupReplyValidationError{}
