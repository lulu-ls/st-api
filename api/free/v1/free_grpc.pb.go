// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: free/v1/free.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Free_FreeType_FullMethodName   = "/api.race.v1.Free/FreeType"
	Free_FreeList_FullMethodName   = "/api.race.v1.Free/FreeList"
	Free_FreeSignup_FullMethodName = "/api.race.v1.Free/FreeSignup"
)

// FreeClient is the client API for Free service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FreeClient interface {
	FreeType(ctx context.Context, in *FreeTypeRequest, opts ...grpc.CallOption) (*FreeTypeReply, error)
	FreeList(ctx context.Context, in *FreeListRequest, opts ...grpc.CallOption) (*FreeListReply, error)
	FreeSignup(ctx context.Context, in *FreeSignupRequest, opts ...grpc.CallOption) (*FreeSignupReply, error)
}

type freeClient struct {
	cc grpc.ClientConnInterface
}

func NewFreeClient(cc grpc.ClientConnInterface) FreeClient {
	return &freeClient{cc}
}

func (c *freeClient) FreeType(ctx context.Context, in *FreeTypeRequest, opts ...grpc.CallOption) (*FreeTypeReply, error) {
	out := new(FreeTypeReply)
	err := c.cc.Invoke(ctx, Free_FreeType_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *freeClient) FreeList(ctx context.Context, in *FreeListRequest, opts ...grpc.CallOption) (*FreeListReply, error) {
	out := new(FreeListReply)
	err := c.cc.Invoke(ctx, Free_FreeList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *freeClient) FreeSignup(ctx context.Context, in *FreeSignupRequest, opts ...grpc.CallOption) (*FreeSignupReply, error) {
	out := new(FreeSignupReply)
	err := c.cc.Invoke(ctx, Free_FreeSignup_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FreeServer is the server API for Free service.
// All implementations must embed UnimplementedFreeServer
// for forward compatibility
type FreeServer interface {
	FreeType(context.Context, *FreeTypeRequest) (*FreeTypeReply, error)
	FreeList(context.Context, *FreeListRequest) (*FreeListReply, error)
	FreeSignup(context.Context, *FreeSignupRequest) (*FreeSignupReply, error)
	mustEmbedUnimplementedFreeServer()
}

// UnimplementedFreeServer must be embedded to have forward compatible implementations.
type UnimplementedFreeServer struct {
}

func (UnimplementedFreeServer) FreeType(context.Context, *FreeTypeRequest) (*FreeTypeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FreeType not implemented")
}
func (UnimplementedFreeServer) FreeList(context.Context, *FreeListRequest) (*FreeListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FreeList not implemented")
}
func (UnimplementedFreeServer) FreeSignup(context.Context, *FreeSignupRequest) (*FreeSignupReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FreeSignup not implemented")
}
func (UnimplementedFreeServer) mustEmbedUnimplementedFreeServer() {}

// UnsafeFreeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FreeServer will
// result in compilation errors.
type UnsafeFreeServer interface {
	mustEmbedUnimplementedFreeServer()
}

func RegisterFreeServer(s grpc.ServiceRegistrar, srv FreeServer) {
	s.RegisterService(&Free_ServiceDesc, srv)
}

func _Free_FreeType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FreeTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FreeServer).FreeType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Free_FreeType_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FreeServer).FreeType(ctx, req.(*FreeTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Free_FreeList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FreeListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FreeServer).FreeList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Free_FreeList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FreeServer).FreeList(ctx, req.(*FreeListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Free_FreeSignup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FreeSignupRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FreeServer).FreeSignup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Free_FreeSignup_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FreeServer).FreeSignup(ctx, req.(*FreeSignupRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Free_ServiceDesc is the grpc.ServiceDesc for Free service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Free_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.race.v1.Free",
	HandlerType: (*FreeServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FreeType",
			Handler:    _Free_FreeType_Handler,
		},
		{
			MethodName: "FreeList",
			Handler:    _Free_FreeList_Handler,
		},
		{
			MethodName: "FreeSignup",
			Handler:    _Free_FreeSignup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "free/v1/free.proto",
}
