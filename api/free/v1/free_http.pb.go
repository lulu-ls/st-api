// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.0
// - protoc             v4.24.4
// source: free/v1/free.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationFreeFreeList = "/api.race.v1.Free/FreeList"
const OperationFreeFreeSignup = "/api.race.v1.Free/FreeSignup"
const OperationFreeFreeType = "/api.race.v1.Free/FreeType"

type FreeHTTPServer interface {
	FreeList(context.Context, *FreeListRequest) (*FreeListReply, error)
	FreeSignup(context.Context, *FreeSignupRequest) (*FreeSignupReply, error)
	FreeType(context.Context, *FreeTypeRequest) (*FreeTypeReply, error)
}

func RegisterFreeHTTPServer(s *http.Server, srv FreeHTTPServer) {
	r := s.Route("/")
	r.POST("/st-games/v1/free/sub_type", _Free_FreeType0_HTTP_Handler(srv))
	r.POST("/st-games/v1/free/list", _Free_FreeList0_HTTP_Handler(srv))
	r.POST("/st-games/v1/free/signup", _Free_FreeSignup0_HTTP_Handler(srv))
}

func _Free_FreeType0_HTTP_Handler(srv FreeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in FreeTypeRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationFreeFreeType)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FreeType(ctx, req.(*FreeTypeRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*FreeTypeReply)
		return ctx.Result(200, reply)
	}
}

func _Free_FreeList0_HTTP_Handler(srv FreeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in FreeListRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationFreeFreeList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FreeList(ctx, req.(*FreeListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*FreeListReply)
		return ctx.Result(200, reply)
	}
}

func _Free_FreeSignup0_HTTP_Handler(srv FreeHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in FreeSignupRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationFreeFreeSignup)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FreeSignup(ctx, req.(*FreeSignupRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*FreeSignupReply)
		return ctx.Result(200, reply)
	}
}

type FreeHTTPClient interface {
	FreeList(ctx context.Context, req *FreeListRequest, opts ...http.CallOption) (rsp *FreeListReply, err error)
	FreeSignup(ctx context.Context, req *FreeSignupRequest, opts ...http.CallOption) (rsp *FreeSignupReply, err error)
	FreeType(ctx context.Context, req *FreeTypeRequest, opts ...http.CallOption) (rsp *FreeTypeReply, err error)
}

type FreeHTTPClientImpl struct {
	cc *http.Client
}

func NewFreeHTTPClient(client *http.Client) FreeHTTPClient {
	return &FreeHTTPClientImpl{client}
}

func (c *FreeHTTPClientImpl) FreeList(ctx context.Context, in *FreeListRequest, opts ...http.CallOption) (*FreeListReply, error) {
	var out FreeListReply
	pattern := "/st-games/v1/free/list"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationFreeFreeList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *FreeHTTPClientImpl) FreeSignup(ctx context.Context, in *FreeSignupRequest, opts ...http.CallOption) (*FreeSignupReply, error) {
	var out FreeSignupReply
	pattern := "/st-games/v1/free/signup"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationFreeFreeSignup))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *FreeHTTPClientImpl) FreeType(ctx context.Context, in *FreeTypeRequest, opts ...http.CallOption) (*FreeTypeReply, error) {
	var out FreeTypeReply
	pattern := "/st-games/v1/free/sub_type"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationFreeFreeType))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
