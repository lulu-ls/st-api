syntax = "proto3";

package api.user.v1;

import "google/api/annotations.proto";
import "common/v1/common.proto";
import "validate/validate.proto";

option go_package = "github.com/lulu-ls/st-api/api/user/v1;v1";
option java_multiple_files = true;
option java_package = "api.user.v1";

service User {
	// 战绩
	rpc RaceRecordList (RaceRecordListRequest) returns (RaceRecordListReply) {
		option (google.api.http) = {
			post: "/st-games/v1/user/race/record",
			body: "*",
		};
	};

	// 修改形象
	rpc InfoEdit (InfoEditRequest) returns (InfoEditReply) {
		option (google.api.http) = {
			post: "/st-games/v1/user/info/edit",
			body: "*",
		};
	};

	// 获取用户资产
	rpc AssetGet (AssetGetRequest) returns (AssetGetReply) {
		option (google.api.http) = {
			post: "/st-games/v1/user/asset/get",
			body: "*",
		};
	};

	// 消息通知
	rpc NotifyState (NotifyStateRequest) returns (NotifyStateReply) {
		option (google.api.http) = {
			post: "/st-games/v1/user/notify/state",
			body: "*",
		};
	};

	// 检查用户是否需要推送消息
	rpc NotifyCheck(NotifyCheckRequest) returns (NotifyCheckReply) ;

}

// 通知状态类型
enum NotifyState {
	close = 0; // 关闭通知
	open = 1; // 开启通知
}

// 通知次数
enum NotifyTimes {
	once = 0; // 仅仅通知一次
	ever = 1; // 永远
}

// 通知类型
enum NotifyType {
	race_start = 0; // 已报名比赛 赛事开始
	appoint_race = 1; // 指定赛事开启
	appoint_activity = 2; // 指定活动上线
}

message RaceRecordListRequest {
	common.v1.Paginate page = 1; // 分页数据
	int64 user_id = 2; // 用户 id
	int32 appId = 3; // 渠道 id
//	int32 channelId = 3; // 渠道 id
}
message RaceRecordListReply {
	repeated RaceRecordListItem list = 1;
	int32 total = 2; // 合计
}
message RaceRecordListItem {
	int64 id = 1; // 记录 id
	int64 game_id = 2; // 游戏id
	int32 game_category_id = 3; // 比赛类型
	string game_category_name = 4; // 比赛类型名称
	int32 game_config_id = 5; // 比赛配置 id
	string game_config_name = 6; // 比赛配置名称
	string game_config_title = 7; // 比赛配置标题
	int32 rounds = 8; // 进入轮次
	int32 rank = 9; // 排名
	int32 win = 10; // 胜利场次
	int32 lose = 11; // 失败场次
	int64 enter_time = 12; // 开始时间
	int64 leave_time = 13; // 离开时间
	int32 game_type_id = 14; // 类型 1:挖坑  2:斗地主
	string game_type_name = 15; // 类型名称
}

message InfoEditRequest {
	int64 user_id = 1; // 用户 id
	int32 appId = 2; // 渠道 id
	int32 channelId = 3; // 渠道 id
	int32 figure = 4; // 形象  [(validate.rules).int32 = {gt: 0}]
	int32 gender = 5; // 性别 0 未知 1 男 2 女
}
message InfoEditReply {

}

message AssetGetRequest {
	int64 user_id = 1; // 用户 id
	int32 appId = 2; // 渠道 id
	int32 channelId = 3; // 渠道 id
}
message AssetGetReply {
	int32 gold = 1; // 金币数量
	int32 diamond = 2; // 钻石数量
	int32 ticket = 3; // 唐卡数量
	int32 card_counter = 4; // 记牌器数量
}

message NotifyStateRequest {
	int64 user_id = 1; // 用户 id
	int32 appId = 2; // 渠道 id
	int32 channelId = 3; // 渠道 id
  NotifyState state = 4; // 状态 0:关闭 1:开启
	NotifyTimes times = 5; // 类型 0:一次 1:永久
//	NotifyType type = 6; // 类型 0: 赛事开始
//	int32 id = 7; // 如果是一次 则需要传赛事 id game_config_id
}
message NotifyStateReply {

}
message NotifyCheckRequest {
	repeated int64 user_ids = 1; // 用户 id [(validate.rules).repeated = {min_items: 1, items: {int64: {gt: 0}}}]
	int32 appId = 2; // 渠道 id
	int32 channelId = 3; // 渠道 id
	NotifyType type = 4; // 类型 0: 赛事开始
//	int32 id = 5; // 如果是一次 则需要传赛事 id game_config_id
}
message NotifyCheckReply {
	repeated string open_ids = 1; // 可以发送微信消息的 open id
}
