// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package v1

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

// 为某个枚举单独设置错误码
func IsUserNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_USER_NOT_FOUND.String() && e.Code == 404
}

// 为某个枚举单独设置错误码
func ErrorUserNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorReason_USER_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

// 发送模板推送消息失败
func IsNotifyTemplateMsgErr(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_NOTIFY_TEMPLATE_MSG_ERR.String() && e.Code == 400
}

// 发送模板推送消息失败
func ErrorNotifyTemplateMsgErr(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_NOTIFY_TEMPLATE_MSG_ERR.String(), fmt.Sprintf(format, args...))
}

// 破产补助错误
func IsSubsidyErr(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_SUBSIDY_ERR.String() && e.Code == 410
}

// 破产补助错误
func ErrorSubsidyErr(format string, args ...interface{}) *errors.Error {
	return errors.New(410, ErrorReason_SUBSIDY_ERR.String(), fmt.Sprintf(format, args...))
}
