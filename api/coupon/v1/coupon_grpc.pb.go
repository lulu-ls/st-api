// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: coupon/v1/coupon.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Coupon_Create_FullMethodName       = "/api.coupon.v1.Coupon/Create"
	Coupon_Verification_FullMethodName = "/api.coupon.v1.Coupon/Verification"
	Coupon_Cancelled_FullMethodName    = "/api.coupon.v1.Coupon/Cancelled"
	Coupon_Detail_FullMethodName       = "/api.coupon.v1.Coupon/Detail"
	Coupon_HistoryList_FullMethodName  = "/api.coupon.v1.Coupon/HistoryList"
	Coupon_List_FullMethodName         = "/api.coupon.v1.Coupon/List"
)

// CouponClient is the client API for Coupon service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CouponClient interface {
	// 创建优惠券
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateReply, error)
	// 核销优惠券
	Verification(ctx context.Context, in *VerificationRequest, opts ...grpc.CallOption) (*VerificationReply, error)
	// 作废优惠券
	Cancelled(ctx context.Context, in *CancelledRequest, opts ...grpc.CallOption) (*CancelledReply, error)
	// 获取优惠券详情
	Detail(ctx context.Context, in *DetailRequest, opts ...grpc.CallOption) (*DetailReply, error)
	// 获取优惠券核销记录列表
	HistoryList(ctx context.Context, in *HistoryListRequest, opts ...grpc.CallOption) (*HistoryListReply, error)
	// 获取某个用户的优惠券
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListReply, error)
}

type couponClient struct {
	cc grpc.ClientConnInterface
}

func NewCouponClient(cc grpc.ClientConnInterface) CouponClient {
	return &couponClient{cc}
}

func (c *couponClient) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateReply, error) {
	out := new(CreateReply)
	err := c.cc.Invoke(ctx, Coupon_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *couponClient) Verification(ctx context.Context, in *VerificationRequest, opts ...grpc.CallOption) (*VerificationReply, error) {
	out := new(VerificationReply)
	err := c.cc.Invoke(ctx, Coupon_Verification_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *couponClient) Cancelled(ctx context.Context, in *CancelledRequest, opts ...grpc.CallOption) (*CancelledReply, error) {
	out := new(CancelledReply)
	err := c.cc.Invoke(ctx, Coupon_Cancelled_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *couponClient) Detail(ctx context.Context, in *DetailRequest, opts ...grpc.CallOption) (*DetailReply, error) {
	out := new(DetailReply)
	err := c.cc.Invoke(ctx, Coupon_Detail_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *couponClient) HistoryList(ctx context.Context, in *HistoryListRequest, opts ...grpc.CallOption) (*HistoryListReply, error) {
	out := new(HistoryListReply)
	err := c.cc.Invoke(ctx, Coupon_HistoryList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *couponClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListReply, error) {
	out := new(ListReply)
	err := c.cc.Invoke(ctx, Coupon_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CouponServer is the server API for Coupon service.
// All implementations must embed UnimplementedCouponServer
// for forward compatibility
type CouponServer interface {
	// 创建优惠券
	Create(context.Context, *CreateRequest) (*CreateReply, error)
	// 核销优惠券
	Verification(context.Context, *VerificationRequest) (*VerificationReply, error)
	// 作废优惠券
	Cancelled(context.Context, *CancelledRequest) (*CancelledReply, error)
	// 获取优惠券详情
	Detail(context.Context, *DetailRequest) (*DetailReply, error)
	// 获取优惠券核销记录列表
	HistoryList(context.Context, *HistoryListRequest) (*HistoryListReply, error)
	// 获取某个用户的优惠券
	List(context.Context, *ListRequest) (*ListReply, error)
	mustEmbedUnimplementedCouponServer()
}

// UnimplementedCouponServer must be embedded to have forward compatible implementations.
type UnimplementedCouponServer struct {
}

func (UnimplementedCouponServer) Create(context.Context, *CreateRequest) (*CreateReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedCouponServer) Verification(context.Context, *VerificationRequest) (*VerificationReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Verification not implemented")
}
func (UnimplementedCouponServer) Cancelled(context.Context, *CancelledRequest) (*CancelledReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cancelled not implemented")
}
func (UnimplementedCouponServer) Detail(context.Context, *DetailRequest) (*DetailReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Detail not implemented")
}
func (UnimplementedCouponServer) HistoryList(context.Context, *HistoryListRequest) (*HistoryListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HistoryList not implemented")
}
func (UnimplementedCouponServer) List(context.Context, *ListRequest) (*ListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedCouponServer) mustEmbedUnimplementedCouponServer() {}

// UnsafeCouponServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CouponServer will
// result in compilation errors.
type UnsafeCouponServer interface {
	mustEmbedUnimplementedCouponServer()
}

func RegisterCouponServer(s grpc.ServiceRegistrar, srv CouponServer) {
	s.RegisterService(&Coupon_ServiceDesc, srv)
}

func _Coupon_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouponServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Coupon_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouponServer).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coupon_Verification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouponServer).Verification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Coupon_Verification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouponServer).Verification(ctx, req.(*VerificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coupon_Cancelled_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelledRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouponServer).Cancelled(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Coupon_Cancelled_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouponServer).Cancelled(ctx, req.(*CancelledRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coupon_Detail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DetailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouponServer).Detail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Coupon_Detail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouponServer).Detail(ctx, req.(*DetailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coupon_HistoryList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HistoryListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouponServer).HistoryList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Coupon_HistoryList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouponServer).HistoryList(ctx, req.(*HistoryListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coupon_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CouponServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Coupon_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CouponServer).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Coupon_ServiceDesc is the grpc.ServiceDesc for Coupon service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Coupon_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.coupon.v1.Coupon",
	HandlerType: (*CouponServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Coupon_Create_Handler,
		},
		{
			MethodName: "Verification",
			Handler:    _Coupon_Verification_Handler,
		},
		{
			MethodName: "Cancelled",
			Handler:    _Coupon_Cancelled_Handler,
		},
		{
			MethodName: "Detail",
			Handler:    _Coupon_Detail_Handler,
		},
		{
			MethodName: "HistoryList",
			Handler:    _Coupon_HistoryList_Handler,
		},
		{
			MethodName: "List",
			Handler:    _Coupon_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "coupon/v1/coupon.proto",
}
