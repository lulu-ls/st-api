// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: coupon/v1/coupon.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreateRequestMultiError, or
// nil if none found.
func (m *CreateRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := CreateRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetItemId() <= 0 {
		err := CreateRequestValidationError{
			field:  "ItemId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateRequestMultiError(errors)
	}

	return nil
}

// CreateRequestMultiError is an error wrapping multiple validation errors
// returned by CreateRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateRequestMultiError) AllErrors() []error { return m }

// CreateRequestValidationError is the validation error returned by
// CreateRequest.Validate if the designated constraints aren't met.
type CreateRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateRequestValidationError) ErrorName() string { return "CreateRequestValidationError" }

// Error satisfies the builtin error interface
func (e CreateRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateRequestValidationError{}

// Validate checks the field values on CreateReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreateReplyMultiError, or
// nil if none found.
func (m *CreateReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for VoucherId

	if len(errors) > 0 {
		return CreateReplyMultiError(errors)
	}

	return nil
}

// CreateReplyMultiError is an error wrapping multiple validation errors
// returned by CreateReply.ValidateAll() if the designated constraints aren't met.
type CreateReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateReplyMultiError) AllErrors() []error { return m }

// CreateReplyValidationError is the validation error returned by
// CreateReply.Validate if the designated constraints aren't met.
type CreateReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateReplyValidationError) ErrorName() string { return "CreateReplyValidationError" }

// Error satisfies the builtin error interface
func (e CreateReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateReplyValidationError{}

// Validate checks the field values on DetailRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DetailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DetailRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DetailRequestMultiError, or
// nil if none found.
func (m *DetailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DetailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for VoucherId

	// no validation rules for Code

	if len(errors) > 0 {
		return DetailRequestMultiError(errors)
	}

	return nil
}

// DetailRequestMultiError is an error wrapping multiple validation errors
// returned by DetailRequest.ValidateAll() if the designated constraints
// aren't met.
type DetailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DetailRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DetailRequestMultiError) AllErrors() []error { return m }

// DetailRequestValidationError is the validation error returned by
// DetailRequest.Validate if the designated constraints aren't met.
type DetailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DetailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DetailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DetailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DetailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DetailRequestValidationError) ErrorName() string { return "DetailRequestValidationError" }

// Error satisfies the builtin error interface
func (e DetailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDetailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DetailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DetailRequestValidationError{}

// Validate checks the field values on DetailReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DetailReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DetailReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DetailReplyMultiError, or
// nil if none found.
func (m *DetailReply) ValidateAll() error {
	return m.validate(true)
}

func (m *DetailReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for VoucherId

	// no validation rules for MerchantId

	// no validation rules for MerchantName

	// no validation rules for Code

	// no validation rules for Amount

	// no validation rules for StartTime

	// no validation rules for EndTime

	// no validation rules for Status

	// no validation rules for ConsumeAt

	// no validation rules for UserId

	// no validation rules for UserNickname

	// no validation rules for Name

	// no validation rules for Title

	// no validation rules for Image

	// no validation rules for Instruction

	// no validation rules for ItemId

	if len(errors) > 0 {
		return DetailReplyMultiError(errors)
	}

	return nil
}

// DetailReplyMultiError is an error wrapping multiple validation errors
// returned by DetailReply.ValidateAll() if the designated constraints aren't met.
type DetailReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DetailReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DetailReplyMultiError) AllErrors() []error { return m }

// DetailReplyValidationError is the validation error returned by
// DetailReply.Validate if the designated constraints aren't met.
type DetailReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DetailReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DetailReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DetailReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DetailReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DetailReplyValidationError) ErrorName() string { return "DetailReplyValidationError" }

// Error satisfies the builtin error interface
func (e DetailReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDetailReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DetailReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DetailReplyValidationError{}

// Validate checks the field values on HistoryListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *HistoryListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HistoryListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// HistoryListRequestMultiError, or nil if none found.
func (m *HistoryListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *HistoryListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, HistoryListRequestValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, HistoryListRequestValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return HistoryListRequestValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for UserId

	if m.GetMerchantId() <= 0 {
		err := HistoryListRequestValidationError{
			field:  "MerchantId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetStoreId() <= 0 {
		err := HistoryListRequestValidationError{
			field:  "StoreId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for StartTime

	// no validation rules for EndTime

	if len(errors) > 0 {
		return HistoryListRequestMultiError(errors)
	}

	return nil
}

// HistoryListRequestMultiError is an error wrapping multiple validation errors
// returned by HistoryListRequest.ValidateAll() if the designated constraints
// aren't met.
type HistoryListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HistoryListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HistoryListRequestMultiError) AllErrors() []error { return m }

// HistoryListRequestValidationError is the validation error returned by
// HistoryListRequest.Validate if the designated constraints aren't met.
type HistoryListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HistoryListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HistoryListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HistoryListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HistoryListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HistoryListRequestValidationError) ErrorName() string {
	return "HistoryListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e HistoryListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHistoryListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HistoryListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HistoryListRequestValidationError{}

// Validate checks the field values on HistoryListReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *HistoryListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HistoryListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// HistoryListReplyMultiError, or nil if none found.
func (m *HistoryListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *HistoryListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, HistoryListReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, HistoryListReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return HistoryListReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	// no validation rules for Quantity

	// no validation rules for Amount

	if len(errors) > 0 {
		return HistoryListReplyMultiError(errors)
	}

	return nil
}

// HistoryListReplyMultiError is an error wrapping multiple validation errors
// returned by HistoryListReply.ValidateAll() if the designated constraints
// aren't met.
type HistoryListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HistoryListReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HistoryListReplyMultiError) AllErrors() []error { return m }

// HistoryListReplyValidationError is the validation error returned by
// HistoryListReply.Validate if the designated constraints aren't met.
type HistoryListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HistoryListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HistoryListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HistoryListReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HistoryListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HistoryListReplyValidationError) ErrorName() string { return "HistoryListReplyValidationError" }

// Error satisfies the builtin error interface
func (e HistoryListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHistoryListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HistoryListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HistoryListReplyValidationError{}

// Validate checks the field values on HistoryListItem with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *HistoryListItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on HistoryListItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// HistoryListItemMultiError, or nil if none found.
func (m *HistoryListItem) ValidateAll() error {
	return m.validate(true)
}

func (m *HistoryListItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Type

	// no validation rules for Code

	// no validation rules for VoucherId

	// no validation rules for VoucherConfigId

	// no validation rules for Message

	// no validation rules for MerchantId

	// no validation rules for MerchantName

	// no validation rules for StoreId

	// no validation rules for StoreName

	// no validation rules for EmployeeId

	// no validation rules for EmployeeName

	// no validation rules for Name

	// no validation rules for Title

	// no validation rules for Image

	// no validation rules for Instruction

	if len(errors) > 0 {
		return HistoryListItemMultiError(errors)
	}

	return nil
}

// HistoryListItemMultiError is an error wrapping multiple validation errors
// returned by HistoryListItem.ValidateAll() if the designated constraints
// aren't met.
type HistoryListItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m HistoryListItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m HistoryListItemMultiError) AllErrors() []error { return m }

// HistoryListItemValidationError is the validation error returned by
// HistoryListItem.Validate if the designated constraints aren't met.
type HistoryListItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e HistoryListItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e HistoryListItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e HistoryListItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e HistoryListItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e HistoryListItemValidationError) ErrorName() string { return "HistoryListItemValidationError" }

// Error satisfies the builtin error interface
func (e HistoryListItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sHistoryListItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = HistoryListItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = HistoryListItemValidationError{}

// Validate checks the field values on VerificationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *VerificationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VerificationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VerificationRequestMultiError, or nil if none found.
func (m *VerificationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *VerificationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for VoucherId

	if m.GetStoreId() <= 0 {
		err := VerificationRequestValidationError{
			field:  "StoreId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetEmployeeId() <= 0 {
		err := VerificationRequestValidationError{
			field:  "EmployeeId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Code

	if len(errors) > 0 {
		return VerificationRequestMultiError(errors)
	}

	return nil
}

// VerificationRequestMultiError is an error wrapping multiple validation
// errors returned by VerificationRequest.ValidateAll() if the designated
// constraints aren't met.
type VerificationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VerificationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VerificationRequestMultiError) AllErrors() []error { return m }

// VerificationRequestValidationError is the validation error returned by
// VerificationRequest.Validate if the designated constraints aren't met.
type VerificationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerificationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerificationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerificationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerificationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerificationRequestValidationError) ErrorName() string {
	return "VerificationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e VerificationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerificationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerificationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerificationRequestValidationError{}

// Validate checks the field values on VerificationReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *VerificationReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VerificationReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VerificationReplyMultiError, or nil if none found.
func (m *VerificationReply) ValidateAll() error {
	return m.validate(true)
}

func (m *VerificationReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return VerificationReplyMultiError(errors)
	}

	return nil
}

// VerificationReplyMultiError is an error wrapping multiple validation errors
// returned by VerificationReply.ValidateAll() if the designated constraints
// aren't met.
type VerificationReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VerificationReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VerificationReplyMultiError) AllErrors() []error { return m }

// VerificationReplyValidationError is the validation error returned by
// VerificationReply.Validate if the designated constraints aren't met.
type VerificationReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VerificationReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VerificationReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VerificationReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VerificationReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VerificationReplyValidationError) ErrorName() string {
	return "VerificationReplyValidationError"
}

// Error satisfies the builtin error interface
func (e VerificationReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVerificationReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VerificationReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VerificationReplyValidationError{}

// Validate checks the field values on CancelledRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CancelledRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelledRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CancelledRequestMultiError, or nil if none found.
func (m *CancelledRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelledRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CancelledRequestMultiError(errors)
	}

	return nil
}

// CancelledRequestMultiError is an error wrapping multiple validation errors
// returned by CancelledRequest.ValidateAll() if the designated constraints
// aren't met.
type CancelledRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelledRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelledRequestMultiError) AllErrors() []error { return m }

// CancelledRequestValidationError is the validation error returned by
// CancelledRequest.Validate if the designated constraints aren't met.
type CancelledRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelledRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelledRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelledRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelledRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelledRequestValidationError) ErrorName() string { return "CancelledRequestValidationError" }

// Error satisfies the builtin error interface
func (e CancelledRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelledRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelledRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelledRequestValidationError{}

// Validate checks the field values on CancelledReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CancelledReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelledReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CancelledReplyMultiError,
// or nil if none found.
func (m *CancelledReply) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelledReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CancelledReplyMultiError(errors)
	}

	return nil
}

// CancelledReplyMultiError is an error wrapping multiple validation errors
// returned by CancelledReply.ValidateAll() if the designated constraints
// aren't met.
type CancelledReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelledReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelledReplyMultiError) AllErrors() []error { return m }

// CancelledReplyValidationError is the validation error returned by
// CancelledReply.Validate if the designated constraints aren't met.
type CancelledReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelledReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelledReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelledReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelledReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelledReplyValidationError) ErrorName() string { return "CancelledReplyValidationError" }

// Error satisfies the builtin error interface
func (e CancelledReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelledReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelledReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelledReplyValidationError{}

// Validate checks the field values on ListRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListRequestMultiError, or
// nil if none found.
func (m *ListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetPage()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListRequestValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListRequestValidationError{
					field:  "Page",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPage()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListRequestValidationError{
				field:  "Page",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if m.GetUserId() <= 0 {
		err := ListRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for MerchantId

	// no validation rules for Status

	if len(errors) > 0 {
		return ListRequestMultiError(errors)
	}

	return nil
}

// ListRequestMultiError is an error wrapping multiple validation errors
// returned by ListRequest.ValidateAll() if the designated constraints aren't met.
type ListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRequestMultiError) AllErrors() []error { return m }

// ListRequestValidationError is the validation error returned by
// ListRequest.Validate if the designated constraints aren't met.
type ListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRequestValidationError) ErrorName() string { return "ListRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRequestValidationError{}

// Validate checks the field values on ListReply with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListReplyMultiError, or nil
// if none found.
func (m *ListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *ListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return ListReplyMultiError(errors)
	}

	return nil
}

// ListReplyMultiError is an error wrapping multiple validation errors returned
// by ListReply.ValidateAll() if the designated constraints aren't met.
type ListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListReplyMultiError) AllErrors() []error { return m }

// ListReplyValidationError is the validation error returned by
// ListReply.Validate if the designated constraints aren't met.
type ListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListReplyValidationError) ErrorName() string { return "ListReplyValidationError" }

// Error satisfies the builtin error interface
func (e ListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListReplyValidationError{}
