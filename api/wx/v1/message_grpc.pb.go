// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.0
// source: wx/v1/message.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Message_PayNotify_FullMethodName   = "/api.wx.v1.Message/PayNotify"
	Message_WxService_FullMethodName   = "/api.wx.v1.Message/WxService"
	Message_WxJSPayHtml_FullMethodName = "/api.wx.v1.Message/WxJSPayHtml"
)

// MessageClient is the client API for Message service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessageClient interface {
	PayNotify(ctx context.Context, in *PayNotifyRequest, opts ...grpc.CallOption) (*PayNotifyReply, error)
	WxService(ctx context.Context, in *WxServiceRequest, opts ...grpc.CallOption) (*WxServiceReply, error)
	WxJSPayHtml(ctx context.Context, in *WxJSPayHtmlRequest, opts ...grpc.CallOption) (*WxJSPayHtmlReply, error)
}

type messageClient struct {
	cc grpc.ClientConnInterface
}

func NewMessageClient(cc grpc.ClientConnInterface) MessageClient {
	return &messageClient{cc}
}

func (c *messageClient) PayNotify(ctx context.Context, in *PayNotifyRequest, opts ...grpc.CallOption) (*PayNotifyReply, error) {
	out := new(PayNotifyReply)
	err := c.cc.Invoke(ctx, Message_PayNotify_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageClient) WxService(ctx context.Context, in *WxServiceRequest, opts ...grpc.CallOption) (*WxServiceReply, error) {
	out := new(WxServiceReply)
	err := c.cc.Invoke(ctx, Message_WxService_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageClient) WxJSPayHtml(ctx context.Context, in *WxJSPayHtmlRequest, opts ...grpc.CallOption) (*WxJSPayHtmlReply, error) {
	out := new(WxJSPayHtmlReply)
	err := c.cc.Invoke(ctx, Message_WxJSPayHtml_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MessageServer is the server API for Message service.
// All implementations must embed UnimplementedMessageServer
// for forward compatibility
type MessageServer interface {
	PayNotify(context.Context, *PayNotifyRequest) (*PayNotifyReply, error)
	WxService(context.Context, *WxServiceRequest) (*WxServiceReply, error)
	WxJSPayHtml(context.Context, *WxJSPayHtmlRequest) (*WxJSPayHtmlReply, error)
	mustEmbedUnimplementedMessageServer()
}

// UnimplementedMessageServer must be embedded to have forward compatible implementations.
type UnimplementedMessageServer struct {
}

func (UnimplementedMessageServer) PayNotify(context.Context, *PayNotifyRequest) (*PayNotifyReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PayNotify not implemented")
}
func (UnimplementedMessageServer) WxService(context.Context, *WxServiceRequest) (*WxServiceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WxService not implemented")
}
func (UnimplementedMessageServer) WxJSPayHtml(context.Context, *WxJSPayHtmlRequest) (*WxJSPayHtmlReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WxJSPayHtml not implemented")
}
func (UnimplementedMessageServer) mustEmbedUnimplementedMessageServer() {}

// UnsafeMessageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessageServer will
// result in compilation errors.
type UnsafeMessageServer interface {
	mustEmbedUnimplementedMessageServer()
}

func RegisterMessageServer(s grpc.ServiceRegistrar, srv MessageServer) {
	s.RegisterService(&Message_ServiceDesc, srv)
}

func _Message_PayNotify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayNotifyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServer).PayNotify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Message_PayNotify_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServer).PayNotify(ctx, req.(*PayNotifyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Message_WxService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WxServiceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServer).WxService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Message_WxService_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServer).WxService(ctx, req.(*WxServiceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Message_WxJSPayHtml_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WxJSPayHtmlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServer).WxJSPayHtml(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Message_WxJSPayHtml_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServer).WxJSPayHtml(ctx, req.(*WxJSPayHtmlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Message_ServiceDesc is the grpc.ServiceDesc for Message service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Message_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.wx.v1.Message",
	HandlerType: (*MessageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PayNotify",
			Handler:    _Message_PayNotify_Handler,
		},
		{
			MethodName: "WxService",
			Handler:    _Message_WxService_Handler,
		},
		{
			MethodName: "WxJSPayHtml",
			Handler:    _Message_WxJSPayHtml_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "wx/v1/message.proto",
}
