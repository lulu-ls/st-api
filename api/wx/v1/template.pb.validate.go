// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: wx/v1/template.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on SendMsgRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SendMsgRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendMsgRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SendMsgRequestMultiError,
// or nil if none found.
func (m *SendMsgRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SendMsgRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AppId

	// no validation rules for ChannelId

	if len(m.GetOpenId()) < 1 {
		err := SendMsgRequestValidationError{
			field:  "OpenId",
			reason: "value must contain at least 1 item(s)",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	for idx, item := range m.GetOpenId() {
		_, _ = idx, item

		if utf8.RuneCountInString(item) < 1 {
			err := SendMsgRequestValidationError{
				field:  fmt.Sprintf("OpenId[%v]", idx),
				reason: "value length must be at least 1 runes",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	// no validation rules for ProgramStage

	if utf8.RuneCountInString(m.GetTemplateId()) < 1 {
		err := SendMsgRequestValidationError{
			field:  "TemplateId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SendMsgRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SendMsgRequestValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SendMsgRequestValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Page

	if len(errors) > 0 {
		return SendMsgRequestMultiError(errors)
	}

	return nil
}

// SendMsgRequestMultiError is an error wrapping multiple validation errors
// returned by SendMsgRequest.ValidateAll() if the designated constraints
// aren't met.
type SendMsgRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendMsgRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendMsgRequestMultiError) AllErrors() []error { return m }

// SendMsgRequestValidationError is the validation error returned by
// SendMsgRequest.Validate if the designated constraints aren't met.
type SendMsgRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendMsgRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendMsgRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendMsgRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendMsgRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendMsgRequestValidationError) ErrorName() string { return "SendMsgRequestValidationError" }

// Error satisfies the builtin error interface
func (e SendMsgRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendMsgRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendMsgRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendMsgRequestValidationError{}

// Validate checks the field values on SendMsgReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SendMsgReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SendMsgReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SendMsgReplyMultiError, or
// nil if none found.
func (m *SendMsgReply) ValidateAll() error {
	return m.validate(true)
}

func (m *SendMsgReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SendMsgReplyMultiError(errors)
	}

	return nil
}

// SendMsgReplyMultiError is an error wrapping multiple validation errors
// returned by SendMsgReply.ValidateAll() if the designated constraints aren't met.
type SendMsgReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SendMsgReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SendMsgReplyMultiError) AllErrors() []error { return m }

// SendMsgReplyValidationError is the validation error returned by
// SendMsgReply.Validate if the designated constraints aren't met.
type SendMsgReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SendMsgReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SendMsgReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SendMsgReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SendMsgReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SendMsgReplyValidationError) ErrorName() string { return "SendMsgReplyValidationError" }

// Error satisfies the builtin error interface
func (e SendMsgReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSendMsgReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SendMsgReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SendMsgReplyValidationError{}

// Validate checks the field values on RaceStartMsg with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RaceStartMsg) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RaceStartMsg with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RaceStartMsgMultiError, or
// nil if none found.
func (m *RaceStartMsg) ValidateAll() error {
	return m.validate(true)
}

func (m *RaceStartMsg) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetThing1()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RaceStartMsgValidationError{
					field:  "Thing1",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RaceStartMsgValidationError{
					field:  "Thing1",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetThing1()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RaceStartMsgValidationError{
				field:  "Thing1",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetThing2()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RaceStartMsgValidationError{
					field:  "Thing2",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RaceStartMsgValidationError{
					field:  "Thing2",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetThing2()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RaceStartMsgValidationError{
				field:  "Thing2",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDate3()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, RaceStartMsgValidationError{
					field:  "Date3",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, RaceStartMsgValidationError{
					field:  "Date3",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDate3()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return RaceStartMsgValidationError{
				field:  "Date3",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return RaceStartMsgMultiError(errors)
	}

	return nil
}

// RaceStartMsgMultiError is an error wrapping multiple validation errors
// returned by RaceStartMsg.ValidateAll() if the designated constraints aren't met.
type RaceStartMsgMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RaceStartMsgMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RaceStartMsgMultiError) AllErrors() []error { return m }

// RaceStartMsgValidationError is the validation error returned by
// RaceStartMsg.Validate if the designated constraints aren't met.
type RaceStartMsgValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RaceStartMsgValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RaceStartMsgValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RaceStartMsgValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RaceStartMsgValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RaceStartMsgValidationError) ErrorName() string { return "RaceStartMsgValidationError" }

// Error satisfies the builtin error interface
func (e RaceStartMsgValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRaceStartMsg.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RaceStartMsgValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RaceStartMsgValidationError{}

// Validate checks the field values on MsgValue with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MsgValue) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MsgValue with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in MsgValueMultiError, or nil
// if none found.
func (m *MsgValue) ValidateAll() error {
	return m.validate(true)
}

func (m *MsgValue) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Value

	if len(errors) > 0 {
		return MsgValueMultiError(errors)
	}

	return nil
}

// MsgValueMultiError is an error wrapping multiple validation errors returned
// by MsgValue.ValidateAll() if the designated constraints aren't met.
type MsgValueMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MsgValueMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MsgValueMultiError) AllErrors() []error { return m }

// MsgValueValidationError is the validation error returned by
// MsgValue.Validate if the designated constraints aren't met.
type MsgValueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MsgValueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MsgValueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MsgValueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MsgValueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MsgValueValidationError) ErrorName() string { return "MsgValueValidationError" }

// Error satisfies the builtin error interface
func (e MsgValueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMsgValue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MsgValueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MsgValueValidationError{}

// Validate checks the field values on CommonMsg with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CommonMsg) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CommonMsg with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CommonMsgMultiError, or nil
// if none found.
func (m *CommonMsg) ValidateAll() error {
	return m.validate(true)
}

func (m *CommonMsg) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AccessToken

	// no validation rules for Touser

	// no validation rules for TemplateId

	// no validation rules for Page

	// no validation rules for MiniprogramState

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CommonMsgValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CommonMsgValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CommonMsgValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CommonMsgMultiError(errors)
	}

	return nil
}

// CommonMsgMultiError is an error wrapping multiple validation errors returned
// by CommonMsg.ValidateAll() if the designated constraints aren't met.
type CommonMsgMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CommonMsgMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CommonMsgMultiError) AllErrors() []error { return m }

// CommonMsgValidationError is the validation error returned by
// CommonMsg.Validate if the designated constraints aren't met.
type CommonMsgValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CommonMsgValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CommonMsgValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CommonMsgValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CommonMsgValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CommonMsgValidationError) ErrorName() string { return "CommonMsgValidationError" }

// Error satisfies the builtin error interface
func (e CommonMsgValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCommonMsg.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CommonMsgValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CommonMsgValidationError{}
