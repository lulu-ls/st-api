// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: race/v1/race.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on RaceTypeRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RaceTypeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RaceTypeRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RaceTypeRequestMultiError, or nil if none found.
func (m *RaceTypeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RaceTypeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AppId

	if len(errors) > 0 {
		return RaceTypeRequestMultiError(errors)
	}

	return nil
}

// RaceTypeRequestMultiError is an error wrapping multiple validation errors
// returned by RaceTypeRequest.ValidateAll() if the designated constraints
// aren't met.
type RaceTypeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RaceTypeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RaceTypeRequestMultiError) AllErrors() []error { return m }

// RaceTypeRequestValidationError is the validation error returned by
// RaceTypeRequest.Validate if the designated constraints aren't met.
type RaceTypeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RaceTypeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RaceTypeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RaceTypeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RaceTypeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RaceTypeRequestValidationError) ErrorName() string { return "RaceTypeRequestValidationError" }

// Error satisfies the builtin error interface
func (e RaceTypeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRaceTypeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RaceTypeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RaceTypeRequestValidationError{}

// Validate checks the field values on RaceTypeReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RaceTypeReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RaceTypeReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RaceTypeReplyMultiError, or
// nil if none found.
func (m *RaceTypeReply) ValidateAll() error {
	return m.validate(true)
}

func (m *RaceTypeReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RaceTypeReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RaceTypeReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RaceTypeReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return RaceTypeReplyMultiError(errors)
	}

	return nil
}

// RaceTypeReplyMultiError is an error wrapping multiple validation errors
// returned by RaceTypeReply.ValidateAll() if the designated constraints
// aren't met.
type RaceTypeReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RaceTypeReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RaceTypeReplyMultiError) AllErrors() []error { return m }

// RaceTypeReplyValidationError is the validation error returned by
// RaceTypeReply.Validate if the designated constraints aren't met.
type RaceTypeReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RaceTypeReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RaceTypeReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RaceTypeReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RaceTypeReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RaceTypeReplyValidationError) ErrorName() string { return "RaceTypeReplyValidationError" }

// Error satisfies the builtin error interface
func (e RaceTypeReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRaceTypeReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RaceTypeReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RaceTypeReplyValidationError{}

// Validate checks the field values on RaceTypeItem with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RaceTypeItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RaceTypeItem with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RaceTypeItemMultiError, or
// nil if none found.
func (m *RaceTypeItem) ValidateAll() error {
	return m.validate(true)
}

func (m *RaceTypeItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GameSeriesId

	// no validation rules for Name

	if len(errors) > 0 {
		return RaceTypeItemMultiError(errors)
	}

	return nil
}

// RaceTypeItemMultiError is an error wrapping multiple validation errors
// returned by RaceTypeItem.ValidateAll() if the designated constraints aren't met.
type RaceTypeItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RaceTypeItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RaceTypeItemMultiError) AllErrors() []error { return m }

// RaceTypeItemValidationError is the validation error returned by
// RaceTypeItem.Validate if the designated constraints aren't met.
type RaceTypeItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RaceTypeItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RaceTypeItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RaceTypeItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RaceTypeItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RaceTypeItemValidationError) ErrorName() string { return "RaceTypeItemValidationError" }

// Error satisfies the builtin error interface
func (e RaceTypeItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRaceTypeItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RaceTypeItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RaceTypeItemValidationError{}

// Validate checks the field values on RaceListRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RaceListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RaceListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RaceListRequestMultiError, or nil if none found.
func (m *RaceListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RaceListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetGameSeriesId() <= 0 {
		err := RaceListRequestValidationError{
			field:  "GameSeriesId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for AppId

	// no validation rules for UserId

	if len(errors) > 0 {
		return RaceListRequestMultiError(errors)
	}

	return nil
}

// RaceListRequestMultiError is an error wrapping multiple validation errors
// returned by RaceListRequest.ValidateAll() if the designated constraints
// aren't met.
type RaceListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RaceListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RaceListRequestMultiError) AllErrors() []error { return m }

// RaceListRequestValidationError is the validation error returned by
// RaceListRequest.Validate if the designated constraints aren't met.
type RaceListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RaceListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RaceListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RaceListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RaceListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RaceListRequestValidationError) ErrorName() string { return "RaceListRequestValidationError" }

// Error satisfies the builtin error interface
func (e RaceListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRaceListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RaceListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RaceListRequestValidationError{}

// Validate checks the field values on RaceListReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RaceListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RaceListReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RaceListReplyMultiError, or
// nil if none found.
func (m *RaceListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *RaceListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RaceListReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RaceListReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RaceListReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return RaceListReplyMultiError(errors)
	}

	return nil
}

// RaceListReplyMultiError is an error wrapping multiple validation errors
// returned by RaceListReply.ValidateAll() if the designated constraints
// aren't met.
type RaceListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RaceListReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RaceListReplyMultiError) AllErrors() []error { return m }

// RaceListReplyValidationError is the validation error returned by
// RaceListReply.Validate if the designated constraints aren't met.
type RaceListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RaceListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RaceListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RaceListReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RaceListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RaceListReplyValidationError) ErrorName() string { return "RaceListReplyValidationError" }

// Error satisfies the builtin error interface
func (e RaceListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRaceListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RaceListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RaceListReplyValidationError{}

// Validate checks the field values on ListRaceItem with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListRaceItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListRaceItem with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListRaceItemMultiError, or
// nil if none found.
func (m *ListRaceItem) ValidateAll() error {
	return m.validate(true)
}

func (m *ListRaceItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Type

	// no validation rules for TypeName

	// no validation rules for GameTypeId

	// no validation rules for GameTypeName

	// no validation rules for Name

	// no validation rules for MaxPeople

	// no validation rules for PeopleNo

	// no validation rules for Image

	// no validation rules for Free

	// no validation rules for MaxFreeNo

	// no validation rules for FreeNo

	// no validation rules for IsSetSignupEndTime

	// no validation rules for SignupEndTime

	for idx, item := range m.GetSignupItem() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListRaceItemValidationError{
						field:  fmt.Sprintf("SignupItem[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListRaceItemValidationError{
						field:  fmt.Sprintf("SignupItem[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListRaceItemValidationError{
					field:  fmt.Sprintf("SignupItem[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for EarliestTime

	// no validation rules for GameConfigId

	// no validation rules for SignupStatus

	if len(errors) > 0 {
		return ListRaceItemMultiError(errors)
	}

	return nil
}

// ListRaceItemMultiError is an error wrapping multiple validation errors
// returned by ListRaceItem.ValidateAll() if the designated constraints aren't met.
type ListRaceItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListRaceItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListRaceItemMultiError) AllErrors() []error { return m }

// ListRaceItemValidationError is the validation error returned by
// ListRaceItem.Validate if the designated constraints aren't met.
type ListRaceItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListRaceItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListRaceItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListRaceItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListRaceItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListRaceItemValidationError) ErrorName() string { return "ListRaceItemValidationError" }

// Error satisfies the builtin error interface
func (e ListRaceItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListRaceItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListRaceItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListRaceItemValidationError{}

// Validate checks the field values on SignupItem with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SignupItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SignupItem with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SignupItemMultiError, or
// nil if none found.
func (m *SignupItem) ValidateAll() error {
	return m.validate(true)
}

func (m *SignupItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ItemId

	// no validation rules for ItemName

	// no validation rules for Quantity

	if len(errors) > 0 {
		return SignupItemMultiError(errors)
	}

	return nil
}

// SignupItemMultiError is an error wrapping multiple validation errors
// returned by SignupItem.ValidateAll() if the designated constraints aren't met.
type SignupItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SignupItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SignupItemMultiError) AllErrors() []error { return m }

// SignupItemValidationError is the validation error returned by
// SignupItem.Validate if the designated constraints aren't met.
type SignupItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SignupItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SignupItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SignupItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SignupItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SignupItemValidationError) ErrorName() string { return "SignupItemValidationError" }

// Error satisfies the builtin error interface
func (e SignupItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSignupItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SignupItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SignupItemValidationError{}

// Validate checks the field values on RaceDetailRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RaceDetailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RaceDetailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RaceDetailRequestMultiError, or nil if none found.
func (m *RaceDetailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RaceDetailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetGameConfigId() <= 0 {
		err := RaceDetailRequestValidationError{
			field:  "GameConfigId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for UserId

	if len(errors) > 0 {
		return RaceDetailRequestMultiError(errors)
	}

	return nil
}

// RaceDetailRequestMultiError is an error wrapping multiple validation errors
// returned by RaceDetailRequest.ValidateAll() if the designated constraints
// aren't met.
type RaceDetailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RaceDetailRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RaceDetailRequestMultiError) AllErrors() []error { return m }

// RaceDetailRequestValidationError is the validation error returned by
// RaceDetailRequest.Validate if the designated constraints aren't met.
type RaceDetailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RaceDetailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RaceDetailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RaceDetailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RaceDetailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RaceDetailRequestValidationError) ErrorName() string {
	return "RaceDetailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RaceDetailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRaceDetailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RaceDetailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RaceDetailRequestValidationError{}

// Validate checks the field values on RaceRewardRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RaceRewardRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RaceRewardRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RaceRewardRequestMultiError, or nil if none found.
func (m *RaceRewardRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RaceRewardRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetGameConfigId() <= 0 {
		err := RaceRewardRequestValidationError{
			field:  "GameConfigId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RaceRewardRequestMultiError(errors)
	}

	return nil
}

// RaceRewardRequestMultiError is an error wrapping multiple validation errors
// returned by RaceRewardRequest.ValidateAll() if the designated constraints
// aren't met.
type RaceRewardRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RaceRewardRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RaceRewardRequestMultiError) AllErrors() []error { return m }

// RaceRewardRequestValidationError is the validation error returned by
// RaceRewardRequest.Validate if the designated constraints aren't met.
type RaceRewardRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RaceRewardRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RaceRewardRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RaceRewardRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RaceRewardRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RaceRewardRequestValidationError) ErrorName() string {
	return "RaceRewardRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RaceRewardRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRaceRewardRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RaceRewardRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RaceRewardRequestValidationError{}

// Validate checks the field values on RaceRewardReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RaceRewardReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RaceRewardReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RaceRewardReplyMultiError, or nil if none found.
func (m *RaceRewardReply) ValidateAll() error {
	return m.validate(true)
}

func (m *RaceRewardReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RaceRewardReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RaceRewardReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RaceRewardReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	for idx, item := range m.GetRostrumItem() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RaceRewardReplyValidationError{
						field:  fmt.Sprintf("RostrumItem[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RaceRewardReplyValidationError{
						field:  fmt.Sprintf("RostrumItem[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RaceRewardReplyValidationError{
					field:  fmt.Sprintf("RostrumItem[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RaceRewardReplyMultiError(errors)
	}

	return nil
}

// RaceRewardReplyMultiError is an error wrapping multiple validation errors
// returned by RaceRewardReply.ValidateAll() if the designated constraints
// aren't met.
type RaceRewardReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RaceRewardReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RaceRewardReplyMultiError) AllErrors() []error { return m }

// RaceRewardReplyValidationError is the validation error returned by
// RaceRewardReply.Validate if the designated constraints aren't met.
type RaceRewardReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RaceRewardReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RaceRewardReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RaceRewardReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RaceRewardReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RaceRewardReplyValidationError) ErrorName() string { return "RaceRewardReplyValidationError" }

// Error satisfies the builtin error interface
func (e RaceRewardReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRaceRewardReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RaceRewardReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RaceRewardReplyValidationError{}

// Validate checks the field values on RaceRewardRuleItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RaceRewardRuleItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RaceRewardRuleItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RaceRewardRuleItemMultiError, or nil if none found.
func (m *RaceRewardRuleItem) ValidateAll() error {
	return m.validate(true)
}

func (m *RaceRewardRuleItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GameRuleConfigId

	// no validation rules for MaxPeople

	for idx, item := range m.GetItem() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RaceRewardRuleItemValidationError{
						field:  fmt.Sprintf("Item[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RaceRewardRuleItemValidationError{
						field:  fmt.Sprintf("Item[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RaceRewardRuleItemValidationError{
					field:  fmt.Sprintf("Item[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RaceRewardRuleItemMultiError(errors)
	}

	return nil
}

// RaceRewardRuleItemMultiError is an error wrapping multiple validation errors
// returned by RaceRewardRuleItem.ValidateAll() if the designated constraints
// aren't met.
type RaceRewardRuleItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RaceRewardRuleItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RaceRewardRuleItemMultiError) AllErrors() []error { return m }

// RaceRewardRuleItemValidationError is the validation error returned by
// RaceRewardRuleItem.Validate if the designated constraints aren't met.
type RaceRewardRuleItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RaceRewardRuleItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RaceRewardRuleItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RaceRewardRuleItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RaceRewardRuleItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RaceRewardRuleItemValidationError) ErrorName() string {
	return "RaceRewardRuleItemValidationError"
}

// Error satisfies the builtin error interface
func (e RaceRewardRuleItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRaceRewardRuleItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RaceRewardRuleItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RaceRewardRuleItemValidationError{}

// Validate checks the field values on RaceRewardItem with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RaceRewardItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RaceRewardItem with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RaceRewardItemMultiError,
// or nil if none found.
func (m *RaceRewardItem) ValidateAll() error {
	return m.validate(true)
}

func (m *RaceRewardItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for StartRank

	// no validation rules for EndRank

	// no validation rules for RankName

	for idx, item := range m.GetDetail() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RaceRewardItemValidationError{
						field:  fmt.Sprintf("Detail[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RaceRewardItemValidationError{
						field:  fmt.Sprintf("Detail[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RaceRewardItemValidationError{
					field:  fmt.Sprintf("Detail[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RaceRewardItemMultiError(errors)
	}

	return nil
}

// RaceRewardItemMultiError is an error wrapping multiple validation errors
// returned by RaceRewardItem.ValidateAll() if the designated constraints
// aren't met.
type RaceRewardItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RaceRewardItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RaceRewardItemMultiError) AllErrors() []error { return m }

// RaceRewardItemValidationError is the validation error returned by
// RaceRewardItem.Validate if the designated constraints aren't met.
type RaceRewardItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RaceRewardItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RaceRewardItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RaceRewardItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RaceRewardItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RaceRewardItemValidationError) ErrorName() string { return "RaceRewardItemValidationError" }

// Error satisfies the builtin error interface
func (e RaceRewardItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRaceRewardItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RaceRewardItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RaceRewardItemValidationError{}

// Validate checks the field values on RaceRewardRuleDetail with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RaceRewardRuleDetail) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RaceRewardRuleDetail with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RaceRewardRuleDetailMultiError, or nil if none found.
func (m *RaceRewardRuleDetail) ValidateAll() error {
	return m.validate(true)
}

func (m *RaceRewardRuleDetail) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ItemId

	// no validation rules for ItemName

	// no validation rules for Quantity

	// no validation rules for SendType

	if len(errors) > 0 {
		return RaceRewardRuleDetailMultiError(errors)
	}

	return nil
}

// RaceRewardRuleDetailMultiError is an error wrapping multiple validation
// errors returned by RaceRewardRuleDetail.ValidateAll() if the designated
// constraints aren't met.
type RaceRewardRuleDetailMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RaceRewardRuleDetailMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RaceRewardRuleDetailMultiError) AllErrors() []error { return m }

// RaceRewardRuleDetailValidationError is the validation error returned by
// RaceRewardRuleDetail.Validate if the designated constraints aren't met.
type RaceRewardRuleDetailValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RaceRewardRuleDetailValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RaceRewardRuleDetailValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RaceRewardRuleDetailValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RaceRewardRuleDetailValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RaceRewardRuleDetailValidationError) ErrorName() string {
	return "RaceRewardRuleDetailValidationError"
}

// Error satisfies the builtin error interface
func (e RaceRewardRuleDetailValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRaceRewardRuleDetail.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RaceRewardRuleDetailValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RaceRewardRuleDetailValidationError{}

// Validate checks the field values on RaceRostrumItem with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RaceRostrumItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RaceRostrumItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RaceRostrumItemMultiError, or nil if none found.
func (m *RaceRostrumItem) ValidateAll() error {
	return m.validate(true)
}

func (m *RaceRostrumItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GameRostrumConfigId

	// no validation rules for Ranking

	// no validation rules for Quantity

	// no validation rules for Image

	// no validation rules for Title

	if len(errors) > 0 {
		return RaceRostrumItemMultiError(errors)
	}

	return nil
}

// RaceRostrumItemMultiError is an error wrapping multiple validation errors
// returned by RaceRostrumItem.ValidateAll() if the designated constraints
// aren't met.
type RaceRostrumItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RaceRostrumItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RaceRostrumItemMultiError) AllErrors() []error { return m }

// RaceRostrumItemValidationError is the validation error returned by
// RaceRostrumItem.Validate if the designated constraints aren't met.
type RaceRostrumItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RaceRostrumItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RaceRostrumItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RaceRostrumItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RaceRostrumItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RaceRostrumItemValidationError) ErrorName() string { return "RaceRostrumItemValidationError" }

// Error satisfies the builtin error interface
func (e RaceRostrumItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRaceRostrumItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RaceRostrumItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RaceRostrumItemValidationError{}

// Validate checks the field values on RaceRuleRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RaceRuleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RaceRuleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RaceRuleRequestMultiError, or nil if none found.
func (m *RaceRuleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RaceRuleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetGameConfigId() <= 0 {
		err := RaceRuleRequestValidationError{
			field:  "GameConfigId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RaceRuleRequestMultiError(errors)
	}

	return nil
}

// RaceRuleRequestMultiError is an error wrapping multiple validation errors
// returned by RaceRuleRequest.ValidateAll() if the designated constraints
// aren't met.
type RaceRuleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RaceRuleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RaceRuleRequestMultiError) AllErrors() []error { return m }

// RaceRuleRequestValidationError is the validation error returned by
// RaceRuleRequest.Validate if the designated constraints aren't met.
type RaceRuleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RaceRuleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RaceRuleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RaceRuleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RaceRuleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RaceRuleRequestValidationError) ErrorName() string { return "RaceRuleRequestValidationError" }

// Error satisfies the builtin error interface
func (e RaceRuleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRaceRuleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RaceRuleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RaceRuleRequestValidationError{}

// Validate checks the field values on RaceRuleReply with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RaceRuleReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RaceRuleReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RaceRuleReplyMultiError, or
// nil if none found.
func (m *RaceRuleReply) ValidateAll() error {
	return m.validate(true)
}

func (m *RaceRuleReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Rule

	if len(errors) > 0 {
		return RaceRuleReplyMultiError(errors)
	}

	return nil
}

// RaceRuleReplyMultiError is an error wrapping multiple validation errors
// returned by RaceRuleReply.ValidateAll() if the designated constraints
// aren't met.
type RaceRuleReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RaceRuleReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RaceRuleReplyMultiError) AllErrors() []error { return m }

// RaceRuleReplyValidationError is the validation error returned by
// RaceRuleReply.Validate if the designated constraints aren't met.
type RaceRuleReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RaceRuleReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RaceRuleReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RaceRuleReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RaceRuleReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RaceRuleReplyValidationError) ErrorName() string { return "RaceRuleReplyValidationError" }

// Error satisfies the builtin error interface
func (e RaceRuleReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRaceRuleReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RaceRuleReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RaceRuleReplyValidationError{}

// Validate checks the field values on RaceSignupRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RaceSignupRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RaceSignupRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RaceSignupRequestMultiError, or nil if none found.
func (m *RaceSignupRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RaceSignupRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for GameConfigId

	if len(errors) > 0 {
		return RaceSignupRequestMultiError(errors)
	}

	return nil
}

// RaceSignupRequestMultiError is an error wrapping multiple validation errors
// returned by RaceSignupRequest.ValidateAll() if the designated constraints
// aren't met.
type RaceSignupRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RaceSignupRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RaceSignupRequestMultiError) AllErrors() []error { return m }

// RaceSignupRequestValidationError is the validation error returned by
// RaceSignupRequest.Validate if the designated constraints aren't met.
type RaceSignupRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RaceSignupRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RaceSignupRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RaceSignupRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RaceSignupRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RaceSignupRequestValidationError) ErrorName() string {
	return "RaceSignupRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RaceSignupRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRaceSignupRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RaceSignupRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RaceSignupRequestValidationError{}

// Validate checks the field values on RaceSignupReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RaceSignupReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RaceSignupReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RaceSignupReplyMultiError, or nil if none found.
func (m *RaceSignupReply) ValidateAll() error {
	return m.validate(true)
}

func (m *RaceSignupReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RaceSignupReplyMultiError(errors)
	}

	return nil
}

// RaceSignupReplyMultiError is an error wrapping multiple validation errors
// returned by RaceSignupReply.ValidateAll() if the designated constraints
// aren't met.
type RaceSignupReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RaceSignupReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RaceSignupReplyMultiError) AllErrors() []error { return m }

// RaceSignupReplyValidationError is the validation error returned by
// RaceSignupReply.Validate if the designated constraints aren't met.
type RaceSignupReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RaceSignupReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RaceSignupReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RaceSignupReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RaceSignupReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RaceSignupReplyValidationError) ErrorName() string { return "RaceSignupReplyValidationError" }

// Error satisfies the builtin error interface
func (e RaceSignupReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRaceSignupReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RaceSignupReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RaceSignupReplyValidationError{}

// Validate checks the field values on RaceSignupCancelRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RaceSignupCancelRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RaceSignupCancelRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RaceSignupCancelRequestMultiError, or nil if none found.
func (m *RaceSignupCancelRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RaceSignupCancelRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for GameConfigId

	if len(errors) > 0 {
		return RaceSignupCancelRequestMultiError(errors)
	}

	return nil
}

// RaceSignupCancelRequestMultiError is an error wrapping multiple validation
// errors returned by RaceSignupCancelRequest.ValidateAll() if the designated
// constraints aren't met.
type RaceSignupCancelRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RaceSignupCancelRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RaceSignupCancelRequestMultiError) AllErrors() []error { return m }

// RaceSignupCancelRequestValidationError is the validation error returned by
// RaceSignupCancelRequest.Validate if the designated constraints aren't met.
type RaceSignupCancelRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RaceSignupCancelRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RaceSignupCancelRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RaceSignupCancelRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RaceSignupCancelRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RaceSignupCancelRequestValidationError) ErrorName() string {
	return "RaceSignupCancelRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RaceSignupCancelRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRaceSignupCancelRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RaceSignupCancelRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RaceSignupCancelRequestValidationError{}

// Validate checks the field values on RaceSignupCancelReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RaceSignupCancelReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RaceSignupCancelReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RaceSignupCancelReplyMultiError, or nil if none found.
func (m *RaceSignupCancelReply) ValidateAll() error {
	return m.validate(true)
}

func (m *RaceSignupCancelReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RaceSignupCancelReplyMultiError(errors)
	}

	return nil
}

// RaceSignupCancelReplyMultiError is an error wrapping multiple validation
// errors returned by RaceSignupCancelReply.ValidateAll() if the designated
// constraints aren't met.
type RaceSignupCancelReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RaceSignupCancelReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RaceSignupCancelReplyMultiError) AllErrors() []error { return m }

// RaceSignupCancelReplyValidationError is the validation error returned by
// RaceSignupCancelReply.Validate if the designated constraints aren't met.
type RaceSignupCancelReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RaceSignupCancelReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RaceSignupCancelReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RaceSignupCancelReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RaceSignupCancelReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RaceSignupCancelReplyValidationError) ErrorName() string {
	return "RaceSignupCancelReplyValidationError"
}

// Error satisfies the builtin error interface
func (e RaceSignupCancelReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRaceSignupCancelReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RaceSignupCancelReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RaceSignupCancelReplyValidationError{}
