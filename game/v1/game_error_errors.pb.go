// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package v1

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

// 为某个枚举单独设置错误码
func IsUserNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_USER_NOT_FOUND.String() && e.Code == 404
}

// 为某个枚举单独设置错误码
func ErrorUserNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ErrorReason_USER_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

func IsContentMissing(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_CONTENT_MISSING.String() && e.Code == 400
}

func ErrorContentMissing(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ErrorReason_CONTENT_MISSING.String(), fmt.Sprintf(format, args...))
}

func IsTokenVerify(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_TOKEN_VERIFY.String() && e.Code == 401
}

func ErrorTokenVerify(format string, args ...interface{}) *errors.Error {
	return errors.New(401, ErrorReason_TOKEN_VERIFY.String(), fmt.Sprintf(format, args...))
}

// 兑换奖励失败
func IsGameRewardFailed(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GAME_REWARD_FAILED.String() && e.Code == 410
}

// 兑换奖励失败
func ErrorGameRewardFailed(format string, args ...interface{}) *errors.Error {
	return errors.New(410, ErrorReason_GAME_REWARD_FAILED.String(), fmt.Sprintf(format, args...))
}

// 奖励配置周期错误
func IsGameTaskConfigError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ErrorReason_GAME_TASK_CONFIG_ERROR.String() && e.Code == 410
}

// 奖励配置周期错误
func ErrorGameTaskConfigError(format string, args ...interface{}) *errors.Error {
	return errors.New(410, ErrorReason_GAME_TASK_CONFIG_ERROR.String(), fmt.Sprintf(format, args...))
}
