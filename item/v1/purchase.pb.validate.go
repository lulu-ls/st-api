// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: item/v1/purchase.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"

	v1 "st-games/api/wx/v1"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort

	_ = v1.VirtualPayStatus(0)
)

// Validate checks the field values on PurchaseListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PurchaseListRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PurchaseListRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PurchaseListRequestMultiError, or nil if none found.
func (m *PurchaseListRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PurchaseListRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := _PurchaseListRequest_ItemId_InLookup[m.GetItemId()]; !ok {
		err := PurchaseListRequestValidationError{
			field:  "ItemId",
			reason: "value must be in list [1 2]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return PurchaseListRequestMultiError(errors)
	}

	return nil
}

// PurchaseListRequestMultiError is an error wrapping multiple validation
// errors returned by PurchaseListRequest.ValidateAll() if the designated
// constraints aren't met.
type PurchaseListRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PurchaseListRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PurchaseListRequestMultiError) AllErrors() []error { return m }

// PurchaseListRequestValidationError is the validation error returned by
// PurchaseListRequest.Validate if the designated constraints aren't met.
type PurchaseListRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PurchaseListRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PurchaseListRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PurchaseListRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PurchaseListRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PurchaseListRequestValidationError) ErrorName() string {
	return "PurchaseListRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PurchaseListRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPurchaseListRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PurchaseListRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PurchaseListRequestValidationError{}

var _PurchaseListRequest_ItemId_InLookup = map[int32]struct{}{
	1: {},
	2: {},
}

// Validate checks the field values on PurchaseListReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PurchaseListReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PurchaseListReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PurchaseListReplyMultiError, or nil if none found.
func (m *PurchaseListReply) ValidateAll() error {
	return m.validate(true)
}

func (m *PurchaseListReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PurchaseListReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PurchaseListReplyValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PurchaseListReplyValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Total

	if len(errors) > 0 {
		return PurchaseListReplyMultiError(errors)
	}

	return nil
}

// PurchaseListReplyMultiError is an error wrapping multiple validation errors
// returned by PurchaseListReply.ValidateAll() if the designated constraints
// aren't met.
type PurchaseListReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PurchaseListReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PurchaseListReplyMultiError) AllErrors() []error { return m }

// PurchaseListReplyValidationError is the validation error returned by
// PurchaseListReply.Validate if the designated constraints aren't met.
type PurchaseListReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PurchaseListReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PurchaseListReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PurchaseListReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PurchaseListReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PurchaseListReplyValidationError) ErrorName() string {
	return "PurchaseListReplyValidationError"
}

// Error satisfies the builtin error interface
func (e PurchaseListReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPurchaseListReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PurchaseListReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PurchaseListReplyValidationError{}

// Validate checks the field values on PurchaseListItem with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PurchaseListItem) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PurchaseListItem with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PurchaseListItemMultiError, or nil if none found.
func (m *PurchaseListItem) ValidateAll() error {
	return m.validate(true)
}

func (m *PurchaseListItem) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PurchaseId

	// no validation rules for Quantity

	// no validation rules for Price

	// no validation rules for ExchangeItemId

	// no validation rules for ExchangeItemQuantity

	// no validation rules for ExchangeItemImage

	// no validation rules for ExchangeItemName

	// no validation rules for Subtitle

	// no validation rules for Tag

	// no validation rules for Image

	// no validation rules for ItemId

	// no validation rules for Title

	if len(errors) > 0 {
		return PurchaseListItemMultiError(errors)
	}

	return nil
}

// PurchaseListItemMultiError is an error wrapping multiple validation errors
// returned by PurchaseListItem.ValidateAll() if the designated constraints
// aren't met.
type PurchaseListItemMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PurchaseListItemMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PurchaseListItemMultiError) AllErrors() []error { return m }

// PurchaseListItemValidationError is the validation error returned by
// PurchaseListItem.Validate if the designated constraints aren't met.
type PurchaseListItemValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PurchaseListItemValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PurchaseListItemValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PurchaseListItemValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PurchaseListItemValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PurchaseListItemValidationError) ErrorName() string { return "PurchaseListItemValidationError" }

// Error satisfies the builtin error interface
func (e PurchaseListItemValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPurchaseListItem.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PurchaseListItemValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PurchaseListItemValidationError{}

// Validate checks the field values on VirtualBuyRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *VirtualBuyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VirtualBuyRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VirtualBuyRequestMultiError, or nil if none found.
func (m *VirtualBuyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *VirtualBuyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AppId

	// no validation rules for ChannelId

	// no validation rules for PurchaseId

	// no validation rules for UserId

	// no validation rules for OrderId

	if len(errors) > 0 {
		return VirtualBuyRequestMultiError(errors)
	}

	return nil
}

// VirtualBuyRequestMultiError is an error wrapping multiple validation errors
// returned by VirtualBuyRequest.ValidateAll() if the designated constraints
// aren't met.
type VirtualBuyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VirtualBuyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VirtualBuyRequestMultiError) AllErrors() []error { return m }

// VirtualBuyRequestValidationError is the validation error returned by
// VirtualBuyRequest.Validate if the designated constraints aren't met.
type VirtualBuyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VirtualBuyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VirtualBuyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VirtualBuyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VirtualBuyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VirtualBuyRequestValidationError) ErrorName() string {
	return "VirtualBuyRequestValidationError"
}

// Error satisfies the builtin error interface
func (e VirtualBuyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVirtualBuyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VirtualBuyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VirtualBuyRequestValidationError{}

// Validate checks the field values on VirtualBuyReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *VirtualBuyReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on VirtualBuyReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// VirtualBuyReplyMultiError, or nil if none found.
func (m *VirtualBuyReply) ValidateAll() error {
	return m.validate(true)
}

func (m *VirtualBuyReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for IsPayed

	// no validation rules for Env

	// no validation rules for OfferId

	// no validation rules for CurrencyType

	// no validation rules for Platform

	// no validation rules for OutTradNo

	// no validation rules for OrderAmount

	// no validation rules for Quantity

	// no validation rules for Mode

	// no validation rules for OrderId

	if len(errors) > 0 {
		return VirtualBuyReplyMultiError(errors)
	}

	return nil
}

// VirtualBuyReplyMultiError is an error wrapping multiple validation errors
// returned by VirtualBuyReply.ValidateAll() if the designated constraints
// aren't met.
type VirtualBuyReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VirtualBuyReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VirtualBuyReplyMultiError) AllErrors() []error { return m }

// VirtualBuyReplyValidationError is the validation error returned by
// VirtualBuyReply.Validate if the designated constraints aren't met.
type VirtualBuyReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VirtualBuyReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VirtualBuyReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VirtualBuyReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VirtualBuyReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VirtualBuyReplyValidationError) ErrorName() string { return "VirtualBuyReplyValidationError" }

// Error satisfies the builtin error interface
func (e VirtualBuyReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVirtualBuyReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VirtualBuyReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VirtualBuyReplyValidationError{}

// Validate checks the field values on JSBuyRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *JSBuyRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JSBuyRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in JSBuyRequestMultiError, or
// nil if none found.
func (m *JSBuyRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *JSBuyRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AppId

	// no validation rules for ChannelId

	// no validation rules for PurchaseId

	// no validation rules for UserId

	// no validation rules for OrderId

	if len(errors) > 0 {
		return JSBuyRequestMultiError(errors)
	}

	return nil
}

// JSBuyRequestMultiError is an error wrapping multiple validation errors
// returned by JSBuyRequest.ValidateAll() if the designated constraints aren't met.
type JSBuyRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JSBuyRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JSBuyRequestMultiError) AllErrors() []error { return m }

// JSBuyRequestValidationError is the validation error returned by
// JSBuyRequest.Validate if the designated constraints aren't met.
type JSBuyRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JSBuyRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JSBuyRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JSBuyRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JSBuyRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JSBuyRequestValidationError) ErrorName() string { return "JSBuyRequestValidationError" }

// Error satisfies the builtin error interface
func (e JSBuyRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJSBuyRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JSBuyRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JSBuyRequestValidationError{}

// Validate checks the field values on JSBuyReply with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *JSBuyReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on JSBuyReply with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in JSBuyReplyMultiError, or
// nil if none found.
func (m *JSBuyReply) ValidateAll() error {
	return m.validate(true)
}

func (m *JSBuyReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrderId

	if len(errors) > 0 {
		return JSBuyReplyMultiError(errors)
	}

	return nil
}

// JSBuyReplyMultiError is an error wrapping multiple validation errors
// returned by JSBuyReply.ValidateAll() if the designated constraints aren't met.
type JSBuyReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m JSBuyReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m JSBuyReplyMultiError) AllErrors() []error { return m }

// JSBuyReplyValidationError is the validation error returned by
// JSBuyReply.Validate if the designated constraints aren't met.
type JSBuyReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e JSBuyReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e JSBuyReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e JSBuyReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e JSBuyReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e JSBuyReplyValidationError) ErrorName() string { return "JSBuyReplyValidationError" }

// Error satisfies the builtin error interface
func (e JSBuyReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sJSBuyReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = JSBuyReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = JSBuyReplyValidationError{}

// Validate checks the field values on GetPurchaseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPurchaseRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPurchaseRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPurchaseRequestMultiError, or nil if none found.
func (m *GetPurchaseRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPurchaseRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PurchaseId

	if len(errors) > 0 {
		return GetPurchaseRequestMultiError(errors)
	}

	return nil
}

// GetPurchaseRequestMultiError is an error wrapping multiple validation errors
// returned by GetPurchaseRequest.ValidateAll() if the designated constraints
// aren't met.
type GetPurchaseRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPurchaseRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPurchaseRequestMultiError) AllErrors() []error { return m }

// GetPurchaseRequestValidationError is the validation error returned by
// GetPurchaseRequest.Validate if the designated constraints aren't met.
type GetPurchaseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPurchaseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPurchaseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPurchaseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPurchaseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPurchaseRequestValidationError) ErrorName() string {
	return "GetPurchaseRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPurchaseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPurchaseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPurchaseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPurchaseRequestValidationError{}

// Validate checks the field values on GetPurchaseReply with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetPurchaseReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPurchaseReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPurchaseReplyMultiError, or nil if none found.
func (m *GetPurchaseReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPurchaseReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PurchaseId

	// no validation rules for Quantity

	// no validation rules for Price

	// no validation rules for ExchangeItemId

	// no validation rules for ExchangeItemQuantity

	// no validation rules for ExchangeItemImage

	// no validation rules for ExchangeItemName

	// no validation rules for Image

	// no validation rules for ItemId

	// no validation rules for Subtitle

	// no validation rules for Title

	// no validation rules for Tag

	if len(errors) > 0 {
		return GetPurchaseReplyMultiError(errors)
	}

	return nil
}

// GetPurchaseReplyMultiError is an error wrapping multiple validation errors
// returned by GetPurchaseReply.ValidateAll() if the designated constraints
// aren't met.
type GetPurchaseReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPurchaseReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPurchaseReplyMultiError) AllErrors() []error { return m }

// GetPurchaseReplyValidationError is the validation error returned by
// GetPurchaseReply.Validate if the designated constraints aren't met.
type GetPurchaseReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPurchaseReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPurchaseReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPurchaseReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPurchaseReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPurchaseReplyValidationError) ErrorName() string { return "GetPurchaseReplyValidationError" }

// Error satisfies the builtin error interface
func (e GetPurchaseReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPurchaseReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPurchaseReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPurchaseReplyValidationError{}

// Validate checks the field values on GetPurchaseRecordRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPurchaseRecordRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPurchaseRecordRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPurchaseRecordRequestMultiError, or nil if none found.
func (m *GetPurchaseRecordRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPurchaseRecordRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrderId

	if len(errors) > 0 {
		return GetPurchaseRecordRequestMultiError(errors)
	}

	return nil
}

// GetPurchaseRecordRequestMultiError is an error wrapping multiple validation
// errors returned by GetPurchaseRecordRequest.ValidateAll() if the designated
// constraints aren't met.
type GetPurchaseRecordRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPurchaseRecordRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPurchaseRecordRequestMultiError) AllErrors() []error { return m }

// GetPurchaseRecordRequestValidationError is the validation error returned by
// GetPurchaseRecordRequest.Validate if the designated constraints aren't met.
type GetPurchaseRecordRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPurchaseRecordRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPurchaseRecordRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPurchaseRecordRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPurchaseRecordRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPurchaseRecordRequestValidationError) ErrorName() string {
	return "GetPurchaseRecordRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetPurchaseRecordRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPurchaseRecordRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPurchaseRecordRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPurchaseRecordRequestValidationError{}

// Validate checks the field values on GetPurchaseRecordReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetPurchaseRecordReply) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetPurchaseRecordReply with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetPurchaseRecordReplyMultiError, or nil if none found.
func (m *GetPurchaseRecordReply) ValidateAll() error {
	return m.validate(true)
}

func (m *GetPurchaseRecordReply) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ItemPurchaseRecodeId

	// no validation rules for OrderId

	// no validation rules for UserId

	// no validation rules for PurchaseId

	// no validation rules for AppId

	// no validation rules for AccessChannelId

	// no validation rules for Name

	// no validation rules for Image

	// no validation rules for Price

	// no validation rules for Quantity

	// no validation rules for Extra

	if len(errors) > 0 {
		return GetPurchaseRecordReplyMultiError(errors)
	}

	return nil
}

// GetPurchaseRecordReplyMultiError is an error wrapping multiple validation
// errors returned by GetPurchaseRecordReply.ValidateAll() if the designated
// constraints aren't met.
type GetPurchaseRecordReplyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetPurchaseRecordReplyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetPurchaseRecordReplyMultiError) AllErrors() []error { return m }

// GetPurchaseRecordReplyValidationError is the validation error returned by
// GetPurchaseRecordReply.Validate if the designated constraints aren't met.
type GetPurchaseRecordReplyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetPurchaseRecordReplyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetPurchaseRecordReplyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetPurchaseRecordReplyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetPurchaseRecordReplyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetPurchaseRecordReplyValidationError) ErrorName() string {
	return "GetPurchaseRecordReplyValidationError"
}

// Error satisfies the builtin error interface
func (e GetPurchaseRecordReplyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetPurchaseRecordReply.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetPurchaseRecordReplyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetPurchaseRecordReplyValidationError{}
