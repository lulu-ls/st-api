// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.24.4
// source: bag/v1/bag.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Bag_ListItem_FullMethodName  = "/api.bag.v1.Bag/ListItem"
	Bag_ListEmoji_FullMethodName = "/api.bag.v1.Bag/ListEmoji"
	Bag_UseEmoji_FullMethodName  = "/api.bag.v1.Bag/UseEmoji"
)

// BagClient is the client API for Bag service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BagClient interface {
	// 背包道具列表
	ListItem(ctx context.Context, in *ItemListRequest, opts ...grpc.CallOption) (*ItemListReply, error)
	// 表情列表
	ListEmoji(ctx context.Context, in *ListEmojiRequest, opts ...grpc.CallOption) (*ListEmojiReply, error)
	// 使用表情
	UseEmoji(ctx context.Context, in *UseEmojiRequest, opts ...grpc.CallOption) (*UseEmojiReply, error)
}

type bagClient struct {
	cc grpc.ClientConnInterface
}

func NewBagClient(cc grpc.ClientConnInterface) BagClient {
	return &bagClient{cc}
}

func (c *bagClient) ListItem(ctx context.Context, in *ItemListRequest, opts ...grpc.CallOption) (*ItemListReply, error) {
	out := new(ItemListReply)
	err := c.cc.Invoke(ctx, Bag_ListItem_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bagClient) ListEmoji(ctx context.Context, in *ListEmojiRequest, opts ...grpc.CallOption) (*ListEmojiReply, error) {
	out := new(ListEmojiReply)
	err := c.cc.Invoke(ctx, Bag_ListEmoji_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bagClient) UseEmoji(ctx context.Context, in *UseEmojiRequest, opts ...grpc.CallOption) (*UseEmojiReply, error) {
	out := new(UseEmojiReply)
	err := c.cc.Invoke(ctx, Bag_UseEmoji_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BagServer is the server API for Bag service.
// All implementations must embed UnimplementedBagServer
// for forward compatibility
type BagServer interface {
	// 背包道具列表
	ListItem(context.Context, *ItemListRequest) (*ItemListReply, error)
	// 表情列表
	ListEmoji(context.Context, *ListEmojiRequest) (*ListEmojiReply, error)
	// 使用表情
	UseEmoji(context.Context, *UseEmojiRequest) (*UseEmojiReply, error)
	mustEmbedUnimplementedBagServer()
}

// UnimplementedBagServer must be embedded to have forward compatible implementations.
type UnimplementedBagServer struct {
}

func (UnimplementedBagServer) ListItem(context.Context, *ItemListRequest) (*ItemListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListItem not implemented")
}
func (UnimplementedBagServer) ListEmoji(context.Context, *ListEmojiRequest) (*ListEmojiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEmoji not implemented")
}
func (UnimplementedBagServer) UseEmoji(context.Context, *UseEmojiRequest) (*UseEmojiReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UseEmoji not implemented")
}
func (UnimplementedBagServer) mustEmbedUnimplementedBagServer() {}

// UnsafeBagServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BagServer will
// result in compilation errors.
type UnsafeBagServer interface {
	mustEmbedUnimplementedBagServer()
}

func RegisterBagServer(s grpc.ServiceRegistrar, srv BagServer) {
	s.RegisterService(&Bag_ServiceDesc, srv)
}

func _Bag_ListItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ItemListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BagServer).ListItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bag_ListItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BagServer).ListItem(ctx, req.(*ItemListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bag_ListEmoji_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEmojiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BagServer).ListEmoji(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bag_ListEmoji_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BagServer).ListEmoji(ctx, req.(*ListEmojiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bag_UseEmoji_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UseEmojiRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BagServer).UseEmoji(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Bag_UseEmoji_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BagServer).UseEmoji(ctx, req.(*UseEmojiRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Bag_ServiceDesc is the grpc.ServiceDesc for Bag service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Bag_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.bag.v1.Bag",
	HandlerType: (*BagServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListItem",
			Handler:    _Bag_ListItem_Handler,
		},
		{
			MethodName: "ListEmoji",
			Handler:    _Bag_ListEmoji_Handler,
		},
		{
			MethodName: "UseEmoji",
			Handler:    _Bag_UseEmoji_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bag/v1/bag.proto",
}
